<tool id="blankenberg_plink2" name="PLINK 2" version="2.00aLM" tool_type="default" profile="19.05">
    <requirements>
        <requirement type="package" version="2.00aLM">plink2</requirement>
    </requirements>
    <code file="plink_code_file.py" />
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <version_command>plink2 --version</version_command>
    <command><![CDATA[
        plink2

#if str($CONDITIONAL_pfile.CONDITIONAL_SELECT_pfile) == "set":
            --pfile
            

    #if $str($CONDITIONAL_pfile.pfile_MOD_0_0):
            '${CONDITIONAL_pfile.pfile_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_pfile.pfile_MOD_1_0):
            '${CONDITIONAL_pfile.pfile_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_pgen.CONDITIONAL_SELECT_pgen) == "set":
            --pgen
            

    #if $CONDITIONAL_pgen.pgen_MOD_0_0:
            '${CONDITIONAL_pgen.pgen_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_pvar.CONDITIONAL_SELECT_pvar) == "set":
            --pvar
            

    #if $CONDITIONAL_pvar.pvar_MOD_0_0:
            '${CONDITIONAL_pvar.pvar_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_psam.CONDITIONAL_SELECT_psam) == "set":
            --psam
            

    #if $CONDITIONAL_psam.psam_MOD_0_0:
            '${CONDITIONAL_psam.psam_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_bpfile.CONDITIONAL_SELECT_bpfile) == "set":
            --bpfile
            

    #if $str($CONDITIONAL_bpfile.bpfile_MOD_0_0):
            '${CONDITIONAL_bpfile.bpfile_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_bpfile.bpfile_MOD_1_0):
            '${CONDITIONAL_bpfile.bpfile_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_keep_autoconv.CONDITIONAL_SELECT_keep_autoconv) == "set":
            --keep-autoconv
            

#end if

#if str($CONDITIONAL_no_fid.CONDITIONAL_SELECT_no_fid) == "set":
            --no-fid
            

#end if

#if str($CONDITIONAL_no_parents.CONDITIONAL_SELECT_no_parents) == "set":
            --no-parents
            

#end if

#if str($CONDITIONAL_no_sex.CONDITIONAL_SELECT_no_sex) == "set":
            --no-sex
            

#end if

#if str($CONDITIONAL_no_pheno.CONDITIONAL_SELECT_no_pheno) == "set":
            --no-pheno
            

#end if

#if str($CONDITIONAL_vcf.CONDITIONAL_SELECT_vcf) == "set":
            --vcf
            

    #if $CONDITIONAL_vcf.vcf_MOD_0_0:
            '${CONDITIONAL_vcf.vcf_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_vcf.vcf_MOD_1_0):
            '${CONDITIONAL_vcf.vcf_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_bcf.CONDITIONAL_SELECT_bcf) == "set":
            --bcf
            

    #if $CONDITIONAL_bcf.bcf_MOD_0_0:
            '${CONDITIONAL_bcf.bcf_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_bcf.bcf_MOD_1_0):
            '${CONDITIONAL_bcf.bcf_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_bgen.CONDITIONAL_SELECT_bgen) == "set":
            --bgen
            

    #if $CONDITIONAL_bgen.bgen_MOD_0_0:
            '${CONDITIONAL_bgen.bgen_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_bgen.bgen_MOD_1_0):
            '${CONDITIONAL_bgen.bgen_MOD_1_0}'
        #end if

#if $str($CONDITIONAL_bgen.CONDITIONAL_bgen_MOD_2.CONDITIONAL_SELECT_bgen_MOD_2) == 'from_list'
                                            '${CONDITIONAL_bgen.CONDITIONAL_bgen_MOD_2.bgen_MOD_2}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_gen.CONDITIONAL_SELECT_gen) == "set":
            --gen
            

    #if $CONDITIONAL_gen.gen_MOD_0_0:
            '${CONDITIONAL_gen.gen_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_gen.CONDITIONAL_gen_MOD_1.CONDITIONAL_SELECT_gen_MOD_1) == 'from_list'
                                            '${CONDITIONAL_gen.CONDITIONAL_gen_MOD_1.gen_MOD_1}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_sample.CONDITIONAL_SELECT_sample) == "set":
            --sample
            

    #if $CONDITIONAL_sample.sample_MOD_0_0:
            '${CONDITIONAL_sample.sample_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_haps.CONDITIONAL_SELECT_haps) == "set":
            --haps
            

    #if $CONDITIONAL_haps.haps_MOD_0_0:
            '${CONDITIONAL_haps.haps_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_haps.CONDITIONAL_haps_MOD_1.CONDITIONAL_SELECT_haps_MOD_1) == 'from_list'
                                            '${CONDITIONAL_haps.CONDITIONAL_haps_MOD_1.haps_MOD_1}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_legend.CONDITIONAL_SELECT_legend) == "set":
            --legend
            

    #if $CONDITIONAL_legend.legend_MOD_0_0:
            '${CONDITIONAL_legend.legend_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_legend.legend_MOD_1_0):
            '${CONDITIONAL_legend.legend_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_map.CONDITIONAL_SELECT_map) == "set":
            --map
            

    #if $CONDITIONAL_map.map_MOD_0_0:
            '${CONDITIONAL_map.map_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_import_dosage.CONDITIONAL_SELECT_import_dosage) == "set":
            --import-dosage
            

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_0_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_1_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_2_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_3_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_3_0}'
        #end if

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_4_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_4_0}'
        #end if

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_5_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_5_0}'
        #end if

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_6_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_6_0}'
        #end if

#if $str($CONDITIONAL_import_dosage.CONDITIONAL_import_dosage_MOD_7.CONDITIONAL_SELECT_import_dosage_MOD_7) == 'from_list'
                                            '${CONDITIONAL_import_dosage.CONDITIONAL_import_dosage_MOD_7.import_dosage_MOD_7}'
                                        #end if
                        

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_8_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_8_0}'
        #end if

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_9_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_9_0}'
        #end if

    #if $str($CONDITIONAL_import_dosage.import_dosage_MOD_10_0):
            '${CONDITIONAL_import_dosage.import_dosage_MOD_10_0}'
        #end if

#end if

#if str($CONDITIONAL_dummy.CONDITIONAL_SELECT_dummy) == "set":
            --dummy
            

    #if $str($CONDITIONAL_dummy.dummy_MOD_0_0):
            '${CONDITIONAL_dummy.dummy_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_dummy.dummy_MOD_1_0):
            '${CONDITIONAL_dummy.dummy_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_dummy.dummy_MOD_2_0):
            '${CONDITIONAL_dummy.dummy_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_dummy.dummy_MOD_3_0):
            '${CONDITIONAL_dummy.dummy_MOD_3_0}'
        #end if

#if $str($CONDITIONAL_dummy.CONDITIONAL_dummy_MOD_4.CONDITIONAL_SELECT_dummy_MOD_4) == 'from_list'
                                            '${CONDITIONAL_dummy.CONDITIONAL_dummy_MOD_4.dummy_MOD_4}'
                                        #end if
                        

    #if $str($CONDITIONAL_dummy.dummy_MOD_5_0):
            '${CONDITIONAL_dummy.dummy_MOD_5_0}'
        #end if

    #if $str($CONDITIONAL_dummy.dummy_MOD_6_0):
            '${CONDITIONAL_dummy.dummy_MOD_6_0}'
        #end if

    #if $str($CONDITIONAL_dummy.dummy_MOD_7_0):
            '${CONDITIONAL_dummy.dummy_MOD_7_0}'
        #end if

#end if

#if str($CONDITIONAL_make_pgen.CONDITIONAL_SELECT_make_pgen) == "set":
            --make-pgen
            

    #if $str($CONDITIONAL_make_pgen.make_pgen_MOD_0_0):
            '${CONDITIONAL_make_pgen.make_pgen_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_make_pgen.make_pgen_MOD_1_0):
            '${CONDITIONAL_make_pgen.make_pgen_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_make_pgen.make_pgen_MOD_2_0):
            '${CONDITIONAL_make_pgen.make_pgen_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_make_pgen.make_pgen_MOD_3_0):
            '${CONDITIONAL_make_pgen.make_pgen_MOD_3_0}'
        #end if

    #if $str($CONDITIONAL_make_pgen.make_pgen_MOD_4_0):
            '${CONDITIONAL_make_pgen.make_pgen_MOD_4_0}'
        #end if

    #if $str($CONDITIONAL_make_pgen.make_pgen_MOD_5_0):
            '${CONDITIONAL_make_pgen.make_pgen_MOD_5_0}'
        #end if

    #if $str($CONDITIONAL_make_pgen.make_pgen_MOD_6_0):
            '${CONDITIONAL_make_pgen.make_pgen_MOD_6_0}'
        #end if

#end if

#if str($CONDITIONAL_make_bpgen.CONDITIONAL_SELECT_make_bpgen) == "set":
            --make-bpgen
            

    #if $str($CONDITIONAL_make_bpgen.make_bpgen_MOD_0_0):
            '${CONDITIONAL_make_bpgen.make_bpgen_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_make_bpgen.make_bpgen_MOD_1_0):
            '${CONDITIONAL_make_bpgen.make_bpgen_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_make_bpgen.make_bpgen_MOD_2_0):
            '${CONDITIONAL_make_bpgen.make_bpgen_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_make_bpgen.make_bpgen_MOD_3_0):
            '${CONDITIONAL_make_bpgen.make_bpgen_MOD_3_0}'
        #end if

    #if $str($CONDITIONAL_make_bpgen.make_bpgen_MOD_4_0):
            '${CONDITIONAL_make_bpgen.make_bpgen_MOD_4_0}'
        #end if

#end if

#if str($CONDITIONAL_make_bed.CONDITIONAL_SELECT_make_bed) == "set":
            --make-bed
            

    #if $str($CONDITIONAL_make_bed.make_bed_MOD_0_0):
            '${CONDITIONAL_make_bed.make_bed_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_make_bed.make_bed_MOD_1_0):
            '${CONDITIONAL_make_bed.make_bed_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_make_just_pvar.CONDITIONAL_SELECT_make_just_pvar) == "set":
            --make-just-pvar
            

    #if $str($CONDITIONAL_make_just_pvar.make_just_pvar_MOD_0_0):
            '${CONDITIONAL_make_just_pvar.make_just_pvar_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_make_just_pvar.make_just_pvar_MOD_1_0):
            '${CONDITIONAL_make_just_pvar.make_just_pvar_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_make_just_psam.CONDITIONAL_SELECT_make_just_psam) == "set":
            --make-just-psam
            

    #if $str($CONDITIONAL_make_just_psam.make_just_psam_MOD_0_0):
            '${CONDITIONAL_make_just_psam.make_just_psam_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_make_just_bim.CONDITIONAL_SELECT_make_just_bim) == "set":
            --make-just-bim
            

    #if $str($CONDITIONAL_make_just_bim.make_just_bim_MOD_0_0):
            '${CONDITIONAL_make_just_bim.make_just_bim_MOD_0_0}'
        #end if

#end if

${make_just_fam}

#if str($CONDITIONAL_export.CONDITIONAL_SELECT_export) == "set":
            --export
            

    #if $str($CONDITIONAL_export.export_MOD_0_0):
            '${CONDITIONAL_export.export_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_export.CONDITIONAL_export_MOD_1.CONDITIONAL_SELECT_export_MOD_1) == 'from_list'
                                            '${CONDITIONAL_export.CONDITIONAL_export_MOD_1.export_MOD_1}'
                                        #end if
                        

    #if $str($CONDITIONAL_export.export_MOD_2_0):
            '${CONDITIONAL_export.export_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_export.export_MOD_3_0):
            '${CONDITIONAL_export.export_MOD_3_0}'
        #end if

#end if

#if str($CONDITIONAL_freq.CONDITIONAL_SELECT_freq) == "set":
            --freq
            

    #if $str($CONDITIONAL_freq.freq_MOD_0_0):
            '${CONDITIONAL_freq.freq_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_freq.freq_MOD_1_0):
            '${CONDITIONAL_freq.freq_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_freq.freq_MOD_2_0):
            '${CONDITIONAL_freq.freq_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_freq.freq_MOD_3_0):
            '${CONDITIONAL_freq.freq_MOD_3_0}'
        #end if

#end if

#if str($CONDITIONAL_geno_counts.CONDITIONAL_SELECT_geno_counts) == "set":
            --geno-counts
            

    #if $str($CONDITIONAL_geno_counts.geno_counts_MOD_0_0):
            '${CONDITIONAL_geno_counts.geno_counts_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_geno_counts.geno_counts_MOD_1_0):
            '${CONDITIONAL_geno_counts.geno_counts_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_missing.CONDITIONAL_SELECT_missing) == "set":
            --missing
            

    #if $str($CONDITIONAL_missing.missing_MOD_0_0):
            '${CONDITIONAL_missing.missing_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_missing.CONDITIONAL_missing_MOD_1.CONDITIONAL_SELECT_missing_MOD_1) == 'from_list'
                                            '${CONDITIONAL_missing.CONDITIONAL_missing_MOD_1.missing_MOD_1}'
                                        #end if
                        

    #if $str($CONDITIONAL_missing.missing_MOD_2_0):
            '${CONDITIONAL_missing.missing_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_missing.missing_MOD_3_0):
            '${CONDITIONAL_missing.missing_MOD_3_0}'
        #end if

#end if

#if str($CONDITIONAL_hardy.CONDITIONAL_SELECT_hardy) == "set":
            --hardy
            

    #if $str($CONDITIONAL_hardy.hardy_MOD_0_0):
            '${CONDITIONAL_hardy.hardy_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_hardy.hardy_MOD_1_0):
            '${CONDITIONAL_hardy.hardy_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_hardy.hardy_MOD_2_0):
            '${CONDITIONAL_hardy.hardy_MOD_2_0}'
        #end if

#end if

#if str($CONDITIONAL_indep_pairwise.CONDITIONAL_SELECT_indep_pairwise) == "set":
            --indep-pairwise
            

    #if $str($CONDITIONAL_indep_pairwise.indep_pairwise_MOD_0_0):
            '${CONDITIONAL_indep_pairwise.indep_pairwise_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_indep_pairwise.indep_pairwise_MOD_1_0):
            '${CONDITIONAL_indep_pairwise.indep_pairwise_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_indep_pairwise.indep_pairwise_MOD_2_0):
            '${CONDITIONAL_indep_pairwise.indep_pairwise_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_indep_pairwise.indep_pairwise_MOD_3_0):
            '${CONDITIONAL_indep_pairwise.indep_pairwise_MOD_3_0}'
        #end if

#end if

#if str($CONDITIONAL_ld.CONDITIONAL_SELECT_ld) == "set":
            --ld
            

    #if $str($CONDITIONAL_ld.ld_MOD_0_0):
            '${CONDITIONAL_ld.ld_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_ld.ld_MOD_1_0):
            '${CONDITIONAL_ld.ld_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_ld.ld_MOD_2_0):
            '${CONDITIONAL_ld.ld_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_ld.ld_MOD_3_0):
            '${CONDITIONAL_ld.ld_MOD_3_0}'
        #end if

#end if

#if str($CONDITIONAL_make_king.CONDITIONAL_SELECT_make_king) == "set":
            --make-king
            

#if $str($CONDITIONAL_make_king.CONDITIONAL_make_king_MOD_0.CONDITIONAL_SELECT_make_king_MOD_0) == 'from_list'
                                            '${CONDITIONAL_make_king.CONDITIONAL_make_king_MOD_0.make_king_MOD_0}'
                                        #end if
                        

#if $str($CONDITIONAL_make_king.CONDITIONAL_make_king_MOD_1.CONDITIONAL_SELECT_make_king_MOD_1) == 'from_list'
                                            '${CONDITIONAL_make_king.CONDITIONAL_make_king_MOD_1.make_king_MOD_1}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_make_king_table.CONDITIONAL_SELECT_make_king_table) == "set":
            --make-king-table
            

    #if $str($CONDITIONAL_make_king_table.make_king_table_MOD_0_0):
            '${CONDITIONAL_make_king_table.make_king_table_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_make_king_table.make_king_table_MOD_1_0):
            '${CONDITIONAL_make_king_table.make_king_table_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_make_king_table.make_king_table_MOD_2_0):
            '${CONDITIONAL_make_king_table.make_king_table_MOD_2_0}'
        #end if

#end if

#if str($CONDITIONAL_make_rel.CONDITIONAL_SELECT_make_rel) == "set":
            --make-rel
            

    #if $str($CONDITIONAL_make_rel.make_rel_MOD_0_0):
            '${CONDITIONAL_make_rel.make_rel_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_make_rel.make_rel_MOD_1_0):
            '${CONDITIONAL_make_rel.make_rel_MOD_1_0}'
        #end if

#if $str($CONDITIONAL_make_rel.CONDITIONAL_make_rel_MOD_2.CONDITIONAL_SELECT_make_rel_MOD_2) == 'from_list'
                                            '${CONDITIONAL_make_rel.CONDITIONAL_make_rel_MOD_2.make_rel_MOD_2}'
                                        #end if
                        

#if $str($CONDITIONAL_make_rel.CONDITIONAL_make_rel_MOD_3.CONDITIONAL_SELECT_make_rel_MOD_3) == 'from_list'
                                            '${CONDITIONAL_make_rel.CONDITIONAL_make_rel_MOD_3.make_rel_MOD_3}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_make_grm_gz.CONDITIONAL_SELECT_make_grm_gz) == "set":
            --make-grm-gz
            

    #if $str($CONDITIONAL_make_grm_gz.make_grm_gz_MOD_0_0):
            '${CONDITIONAL_make_grm_gz.make_grm_gz_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_make_grm_gz.make_grm_gz_MOD_1_0):
            '${CONDITIONAL_make_grm_gz.make_grm_gz_MOD_1_0}'
        #end if

#if $str($CONDITIONAL_make_grm_gz.CONDITIONAL_make_grm_gz_MOD_2.CONDITIONAL_SELECT_make_grm_gz_MOD_2) == 'from_list'
                                            '${CONDITIONAL_make_grm_gz.CONDITIONAL_make_grm_gz_MOD_2.make_grm_gz_MOD_2}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_make_grm_bin.CONDITIONAL_SELECT_make_grm_bin) == "set":
            --make-grm-bin
            

    #if $str($CONDITIONAL_make_grm_bin.make_grm_bin_MOD_0_0):
            '${CONDITIONAL_make_grm_bin.make_grm_bin_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_make_grm_bin.make_grm_bin_MOD_1_0):
            '${CONDITIONAL_make_grm_bin.make_grm_bin_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_OVERLOADED_SELECT_pca) == "form_0":
        #if str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.CONDITIONAL_SELECT_pca) == "set":
            --pca
            
    #if $str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_0_0):
            '${CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_0_0}'
        #end if
#if $str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.CONDITIONAL_pca_MOD_1.CONDITIONAL_SELECT_pca_MOD_1) == 'from_list'
                                            '${CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.CONDITIONAL_pca_MOD_1.pca_MOD_1}'
                                        #end if
                        
    #if $str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_2_0):
            '${CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_2_0}'
        #end if
#end if
        #end if

#if str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_OVERLOADED_SELECT_pca) == "form_1":
        #if str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.CONDITIONAL_SELECT_pca) == "set":
            --pca
            
    #if $str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_0_0):
            '${CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_0_0}'
        #end if
#if $str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.CONDITIONAL_pca_MOD_1.CONDITIONAL_SELECT_pca_MOD_1) == 'from_list'
                                            '${CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.CONDITIONAL_pca_MOD_1.pca_MOD_1}'
                                        #end if
                        
    #if $str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_2_0):
            '${CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_2_0}'
        #end if
    #if $str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_3_0):
            '${CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_3_0}'
        #end if
    #if $str($CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_4_0):
            '${CONDITIONAL_OVERLOADED_pca.CONDITIONAL_pca.pca_MOD_4_0}'
        #end if
#end if
        #end if

#if str($CONDITIONAL_king_cutoff.CONDITIONAL_SELECT_king_cutoff) == "set":
            --king-cutoff
            

    #if $str($CONDITIONAL_king_cutoff.king_cutoff_MOD_0_0):
            '${CONDITIONAL_king_cutoff.king_cutoff_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_king_cutoff.king_cutoff_MOD_1_0):
            '${CONDITIONAL_king_cutoff.king_cutoff_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_write_covar.CONDITIONAL_SELECT_write_covar) == "set":
            --write-covar
            

    #if $str($CONDITIONAL_write_covar.write_covar_MOD_0_0):
            '${CONDITIONAL_write_covar.write_covar_MOD_0_0}'
        #end if

#end if

${write_samples}

#if str($CONDITIONAL_write_snplist.CONDITIONAL_SELECT_write_snplist) == "set":
            --write-snplist
            

    #if $str($CONDITIONAL_write_snplist.write_snplist_MOD_0_0):
            '${CONDITIONAL_write_snplist.write_snplist_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_glm.CONDITIONAL_SELECT_glm) == "set":
            --glm
            

    #if $str($CONDITIONAL_glm.glm_MOD_0_0):
            '${CONDITIONAL_glm.glm_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_glm.CONDITIONAL_glm_MOD_1.CONDITIONAL_SELECT_glm_MOD_1) == 'from_list'
                                            '${CONDITIONAL_glm.CONDITIONAL_glm_MOD_1.glm_MOD_1}'
                                        #end if
                        

#if $str($CONDITIONAL_glm.CONDITIONAL_glm_MOD_2.CONDITIONAL_SELECT_glm_MOD_2) == 'from_list'
                                            '${CONDITIONAL_glm.CONDITIONAL_glm_MOD_2.glm_MOD_2}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_score.CONDITIONAL_SELECT_score) == "set":
            --score
            

    #if $CONDITIONAL_score.score_MOD_0_0:
            '${CONDITIONAL_score.score_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_score.score_MOD_1_0):
            '${CONDITIONAL_score.score_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_score.score_MOD_2_0):
            '${CONDITIONAL_score.score_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_score.score_MOD_3_0):
            '${CONDITIONAL_score.score_MOD_3_0}'
        #end if

#if $str($CONDITIONAL_score.CONDITIONAL_score_MOD_4.CONDITIONAL_SELECT_score_MOD_4) == 'from_list'
                                            '${CONDITIONAL_score.CONDITIONAL_score_MOD_4.score_MOD_4}'
                                        #end if
                        

    #if $str($CONDITIONAL_score.score_MOD_5_0):
            '${CONDITIONAL_score.score_MOD_5_0}'
        #end if

#if $str($CONDITIONAL_score.CONDITIONAL_score_MOD_6.CONDITIONAL_SELECT_score_MOD_6) == 'from_list'
                                            '${CONDITIONAL_score.CONDITIONAL_score_MOD_6.score_MOD_6}'
                                        #end if
                        

    #if $str($CONDITIONAL_score.score_MOD_7_0):
            '${CONDITIONAL_score.score_MOD_7_0}'
        #end if

    #if $str($CONDITIONAL_score.score_MOD_8_0):
            '${CONDITIONAL_score.score_MOD_8_0}'
        #end if

#if $str($CONDITIONAL_score.CONDITIONAL_score_MOD_9.CONDITIONAL_SELECT_score_MOD_9) == 'from_list'
                                            '${CONDITIONAL_score.CONDITIONAL_score_MOD_9.score_MOD_9}'
                                        #end if
                        

    #if $str($CONDITIONAL_score.score_MOD_10_0):
            '${CONDITIONAL_score.score_MOD_10_0}'
        #end if

#end if

#if str($CONDITIONAL_genotyping_rate.CONDITIONAL_SELECT_genotyping_rate) == "set":
            --genotyping-rate
            

    #if $str($CONDITIONAL_genotyping_rate.genotyping_rate_MOD_0_0):
            '${CONDITIONAL_genotyping_rate.genotyping_rate_MOD_0_0}'
        #end if

#end if

${validate}

#if str($CONDITIONAL_zst_decompress.CONDITIONAL_SELECT_zst_decompress) == "set":
            --zst-decompress
            

    #if $str($CONDITIONAL_zst_decompress.zst_decompress_MOD_0_0):
            '${CONDITIONAL_zst_decompress.zst_decompress_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_zst_decompress.zst_decompress_MOD_1_0):
            '${CONDITIONAL_zst_decompress.zst_decompress_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_silent.CONDITIONAL_SELECT_silent) == "set":
            --silent
            

#end if

#if str($CONDITIONAL_input_missing_genotype.CONDITIONAL_SELECT_input_missing_genotype) == "set":
            --input-missing-genotype
            

    #if $str($CONDITIONAL_input_missing_genotype.input_missing_genotype_MOD_0_0):
            '${CONDITIONAL_input_missing_genotype.input_missing_genotype_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_double_id.CONDITIONAL_SELECT_double_id) == "set":
            --double-id
            

#end if

#if str($CONDITIONAL_const_fid.CONDITIONAL_SELECT_const_fid) == "set":
            --const-fid
            

    #if $str($CONDITIONAL_const_fid.const_fid_MOD_0_0):
            '${CONDITIONAL_const_fid.const_fid_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_id_delim.CONDITIONAL_SELECT_id_delim) == "set":
            --id-delim
            

    #if $str($CONDITIONAL_id_delim.id_delim_MOD_0_0):
            '${CONDITIONAL_id_delim.id_delim_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_idspace_to.CONDITIONAL_SELECT_idspace_to) == "set":
            --idspace-to
            

    #if $str($CONDITIONAL_idspace_to.idspace_to_MOD_0_0):
            '${CONDITIONAL_idspace_to.idspace_to_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_vcf_require_gt.CONDITIONAL_SELECT_vcf_require_gt) == "set":
            --vcf-require-gt
            

#end if

#if str($CONDITIONAL_vcf_min_gq.CONDITIONAL_SELECT_vcf_min_gq) == "set":
            --vcf-min-gq
            

    #if $str($CONDITIONAL_vcf_min_gq.vcf_min_gq_MOD_0_0):
            '${CONDITIONAL_vcf_min_gq.vcf_min_gq_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_vcf_min_dp.CONDITIONAL_SELECT_vcf_min_dp) == "set":
            --vcf-min-dp
            

    #if $str($CONDITIONAL_vcf_min_dp.vcf_min_dp_MOD_0_0):
            '${CONDITIONAL_vcf_min_dp.vcf_min_dp_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_vcf_half_call.CONDITIONAL_SELECT_vcf_half_call) == "set":
            --vcf-half-call
            

    #if $str($CONDITIONAL_vcf_half_call.vcf_half_call_MOD_0_0):
            '${CONDITIONAL_vcf_half_call.vcf_half_call_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_oxford_single_chr.CONDITIONAL_SELECT_oxford_single_chr) == "set":
            --oxford-single-chr
            

    #if $str($CONDITIONAL_oxford_single_chr.oxford_single_chr_MOD_0_0):
            '${CONDITIONAL_oxford_single_chr.oxford_single_chr_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_hard_call_threshold.CONDITIONAL_SELECT_hard_call_threshold) == "set":
            --hard-call-threshold
            

    #if $str($CONDITIONAL_hard_call_threshold.hard_call_threshold_MOD_0_0):
            '${CONDITIONAL_hard_call_threshold.hard_call_threshold_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_dosage_erase_threshold.CONDITIONAL_SELECT_dosage_erase_threshold) == "set":
            --dosage-erase-threshold
            

    #if $str($CONDITIONAL_dosage_erase_threshold.dosage_erase_threshold_MOD_0_0):
            '${CONDITIONAL_dosage_erase_threshold.dosage_erase_threshold_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_import_dosage_certainty.CONDITIONAL_SELECT_import_dosage_certainty) == "set":
            --import-dosage-certainty
            

    #if $str($CONDITIONAL_import_dosage_certainty.import_dosage_certainty_MOD_0_0):
            '${CONDITIONAL_import_dosage_certainty.import_dosage_certainty_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_missing_code.CONDITIONAL_SELECT_missing_code) == "set":
            --missing-code
            

    #if $str($CONDITIONAL_missing_code.missing_code_MOD_0_0):
            '${CONDITIONAL_missing_code.missing_code_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_allow_extra_chr.CONDITIONAL_SELECT_allow_extra_chr) == "set":
            --allow-extra-chr
            

#end if

#if str($CONDITIONAL_chr_set.CONDITIONAL_SELECT_chr_set) == "set":
            --chr-set
            

    #if $str($CONDITIONAL_chr_set.chr_set_MOD_0_0):
            '${CONDITIONAL_chr_set.chr_set_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_chr_set.chr_set_MOD_1_0):
            '${CONDITIONAL_chr_set.chr_set_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_chr_set.chr_set_MOD_2_0):
            '${CONDITIONAL_chr_set.chr_set_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_chr_set.chr_set_MOD_3_0):
            '${CONDITIONAL_chr_set.chr_set_MOD_3_0}'
        #end if

    #if $str($CONDITIONAL_chr_set.chr_set_MOD_4_0):
            '${CONDITIONAL_chr_set.chr_set_MOD_4_0}'
        #end if

#end if

#if str($CONDITIONAL_cow.CONDITIONAL_SELECT_cow) == "set":
            --cow
            

#end if

#if str($CONDITIONAL_dog.CONDITIONAL_SELECT_dog) == "set":
            --dog
            

#end if

#if str($CONDITIONAL_horse.CONDITIONAL_SELECT_horse) == "set":
            --horse
            

#end if

#if str($CONDITIONAL_mouse.CONDITIONAL_SELECT_mouse) == "set":
            --mouse
            

#end if

#if str($CONDITIONAL_rice.CONDITIONAL_SELECT_rice) == "set":
            --rice
            

#end if

#if str($CONDITIONAL_sheep.CONDITIONAL_SELECT_sheep) == "set":
            --sheep
            

#end if

#if str($CONDITIONAL_autosome_num.CONDITIONAL_SELECT_autosome_num) == "set":
            --autosome-num
            

    #if $str($CONDITIONAL_autosome_num.autosome_num_MOD_0_0):
            '${CONDITIONAL_autosome_num.autosome_num_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_human.CONDITIONAL_SELECT_human) == "set":
            --human
            

#end if

#if str($CONDITIONAL_chr_override.CONDITIONAL_SELECT_chr_override) == "set":
            --chr-override
            

    #if $str($CONDITIONAL_chr_override.chr_override_MOD_0_0):
            '${CONDITIONAL_chr_override.chr_override_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_biallelic_only.CONDITIONAL_SELECT_biallelic_only) == "set":
            --biallelic-only
            

    #if $str($CONDITIONAL_biallelic_only.biallelic_only_MOD_0_0):
            '${CONDITIONAL_biallelic_only.biallelic_only_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_biallelic_only.biallelic_only_MOD_1_0):
            '${CONDITIONAL_biallelic_only.biallelic_only_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_var_min_qual.CONDITIONAL_SELECT_var_min_qual) == "set":
            --var-min-qual
            

    #if $str($CONDITIONAL_var_min_qual.var_min_qual_MOD_0_0):
            '${CONDITIONAL_var_min_qual.var_min_qual_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_var_filter.CONDITIONAL_SELECT_var_filter) == "set":
            --var-filter
            

    #if $str($CONDITIONAL_var_filter.var_filter_MOD_0_0):
            '${CONDITIONAL_var_filter.var_filter_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_pheno.CONDITIONAL_SELECT_pheno) == "set":
            --pheno
            

    #if $CONDITIONAL_pheno.pheno_MOD_0_0:
            '${CONDITIONAL_pheno.pheno_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_pheno_name.CONDITIONAL_SELECT_pheno_name) == "set":
            --pheno-name
            

    #if $str($CONDITIONAL_pheno_name.pheno_name_MOD_0_0):
            '${CONDITIONAL_pheno_name.pheno_name_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_input_missing_phenotype.CONDITIONAL_SELECT_input_missing_phenotype) == "set":
            --input-missing-phenotype
            

    #if $str($CONDITIONAL_input_missing_phenotype.input_missing_phenotype_MOD_0_0):
            '${CONDITIONAL_input_missing_phenotype.input_missing_phenotype_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_GALAXY_1.CONDITIONAL_SELECT_GALAXY_1) == "set":
            --1
            

#end if

#if str($CONDITIONAL_missing_catname.CONDITIONAL_SELECT_missing_catname) == "set":
            --missing-catname
            

    #if $str($CONDITIONAL_missing_catname.missing_catname_MOD_0_0):
            '${CONDITIONAL_missing_catname.missing_catname_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_covar.CONDITIONAL_SELECT_covar) == "set":
            --covar
            

    #if $CONDITIONAL_covar.covar_MOD_0_0:
            '${CONDITIONAL_covar.covar_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_covar_name.CONDITIONAL_SELECT_covar_name) == "set":
            --covar-name
            

    #if $str($CONDITIONAL_covar_name.covar_name_MOD_0_0):
            '${CONDITIONAL_covar_name.covar_name_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_within.CONDITIONAL_SELECT_within) == "set":
            --within
            

    #if $CONDITIONAL_within.within_MOD_0_0:
            '${CONDITIONAL_within.within_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_within.within_MOD_1_0):
            '${CONDITIONAL_within.within_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_mwithin.CONDITIONAL_SELECT_mwithin) == "set":
            --mwithin
            

    #if $str($CONDITIONAL_mwithin.mwithin_MOD_0_0):
            '${CONDITIONAL_mwithin.mwithin_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_family.CONDITIONAL_SELECT_family) == "set":
            --family
            

    #if $str($CONDITIONAL_family.family_MOD_0_0):
            '${CONDITIONAL_family.family_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_family_missing_catname.CONDITIONAL_SELECT_family_missing_catname) == "set":
            --family-missing-catname
            

    #if $str($CONDITIONAL_family_missing_catname.family_missing_catname_MOD_0_0):
            '${CONDITIONAL_family_missing_catname.family_missing_catname_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_keep.CONDITIONAL_SELECT_keep) == "set":
            --keep
            

    #if $str($CONDITIONAL_keep.keep_MOD_0_0):
            '${CONDITIONAL_keep.keep_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_keep.keep_MOD_1_0):
            '${CONDITIONAL_keep.keep_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_remove.CONDITIONAL_SELECT_remove) == "set":
            --remove
            

    #if $str($CONDITIONAL_remove.remove_MOD_0_0):
            '${CONDITIONAL_remove.remove_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_remove.remove_MOD_1_0):
            '${CONDITIONAL_remove.remove_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_keep_fam.CONDITIONAL_SELECT_keep_fam) == "set":
            --keep-fam
            

    #if $str($CONDITIONAL_keep_fam.keep_fam_MOD_0_0):
            '${CONDITIONAL_keep_fam.keep_fam_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_remove_fam.CONDITIONAL_SELECT_remove_fam) == "set":
            --remove-fam
            

    #if $str($CONDITIONAL_remove_fam.remove_fam_MOD_0_0):
            '${CONDITIONAL_remove_fam.remove_fam_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_extract.CONDITIONAL_SELECT_extract) == "set":
            --extract
            

    #if $str($CONDITIONAL_extract.extract_MOD_0_0):
            '${CONDITIONAL_extract.extract_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_extract.extract_MOD_1_0):
            '${CONDITIONAL_extract.extract_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_exclude.CONDITIONAL_SELECT_exclude) == "set":
            --exclude
            

    #if $str($CONDITIONAL_exclude.exclude_MOD_0_0):
            '${CONDITIONAL_exclude.exclude_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_exclude.exclude_MOD_1_0):
            '${CONDITIONAL_exclude.exclude_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_keep_cats.CONDITIONAL_SELECT_keep_cats) == "set":
            --keep-cats
            

    #if $CONDITIONAL_keep_cats.keep_cats_MOD_0_0:
            '${CONDITIONAL_keep_cats.keep_cats_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_keep_cat_names.CONDITIONAL_SELECT_keep_cat_names) == "set":
            --keep-cat-names
            

    #if $str($CONDITIONAL_keep_cat_names.keep_cat_names_MOD_0_0):
            '${CONDITIONAL_keep_cat_names.keep_cat_names_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_keep_cat_pheno.CONDITIONAL_SELECT_keep_cat_pheno) == "set":
            --keep-cat-pheno
            

    #if $str($CONDITIONAL_keep_cat_pheno.keep_cat_pheno_MOD_0_0):
            '${CONDITIONAL_keep_cat_pheno.keep_cat_pheno_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_remove_cats.CONDITIONAL_SELECT_remove_cats) == "set":
            --remove-cats
            

    #if $CONDITIONAL_remove_cats.remove_cats_MOD_0_0:
            '${CONDITIONAL_remove_cats.remove_cats_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_remove_cat_names.CONDITIONAL_SELECT_remove_cat_names) == "set":
            --remove-cat-names
            

    #if $str($CONDITIONAL_remove_cat_names.remove_cat_names_MOD_0_0):
            '${CONDITIONAL_remove_cat_names.remove_cat_names_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_remove_cat_pheno.CONDITIONAL_SELECT_remove_cat_pheno) == "set":
            --remove-cat-pheno
            

    #if $str($CONDITIONAL_remove_cat_pheno.remove_cat_pheno_MOD_0_0):
            '${CONDITIONAL_remove_cat_pheno.remove_cat_pheno_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_split_cat_pheno.CONDITIONAL_SELECT_split_cat_pheno) == "set":
            --split-cat-pheno
            

    #if $str($CONDITIONAL_split_cat_pheno.split_cat_pheno_MOD_0_0):
            '${CONDITIONAL_split_cat_pheno.split_cat_pheno_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_split_cat_pheno.split_cat_pheno_MOD_1_0):
            '${CONDITIONAL_split_cat_pheno.split_cat_pheno_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_split_cat_pheno.split_cat_pheno_MOD_2_0):
            '${CONDITIONAL_split_cat_pheno.split_cat_pheno_MOD_2_0}'
        #end if

#end if

#if str($CONDITIONAL_loop_cats.CONDITIONAL_SELECT_loop_cats) == "set":
            --loop-cats
            

    #if $str($CONDITIONAL_loop_cats.loop_cats_MOD_0_0):
            '${CONDITIONAL_loop_cats.loop_cats_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_variance_standardize.CONDITIONAL_SELECT_variance_standardize) == "set":
            --variance-standardize
            

    #if $str($CONDITIONAL_variance_standardize.variance_standardize_MOD_0_0):
            '${CONDITIONAL_variance_standardize.variance_standardize_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_covar_variance_standardize.CONDITIONAL_SELECT_covar_variance_standardize) == "set":
            --covar-variance-standardize
            

    #if $str($CONDITIONAL_covar_variance_standardize.covar_variance_standardize_MOD_0_0):
            '${CONDITIONAL_covar_variance_standardize.covar_variance_standardize_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_quantile_normalize.CONDITIONAL_SELECT_quantile_normalize) == "set":
            --quantile-normalize
            

    #if $str($CONDITIONAL_quantile_normalize.quantile_normalize_MOD_0_0):
            '${CONDITIONAL_quantile_normalize.quantile_normalize_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_pheno_quantile_normalize.CONDITIONAL_SELECT_pheno_quantile_normalize) == "set":
            --pheno-quantile-normalize
            

    #if $str($CONDITIONAL_pheno_quantile_normalize.pheno_quantile_normalize_MOD_0_0):
            '${CONDITIONAL_pheno_quantile_normalize.pheno_quantile_normalize_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_covar_quantile_normalize.CONDITIONAL_SELECT_covar_quantile_normalize) == "set":
            --covar-quantile-normalize
            

    #if $str($CONDITIONAL_covar_quantile_normalize.covar_quantile_normalize_MOD_0_0):
            '${CONDITIONAL_covar_quantile_normalize.covar_quantile_normalize_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_chr.CONDITIONAL_SELECT_chr) == "set":
            --chr
            

    #if $str($CONDITIONAL_chr.chr_MOD_0_0):
            '${CONDITIONAL_chr.chr_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_not_chr.CONDITIONAL_SELECT_not_chr) == "set":
            --not-chr
            

    #if $str($CONDITIONAL_not_chr.not_chr_MOD_0_0):
            '${CONDITIONAL_not_chr.not_chr_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_autosome.CONDITIONAL_SELECT_autosome) == "set":
            --autosome
            

#end if

#if str($CONDITIONAL_autosome_par.CONDITIONAL_SELECT_autosome_par) == "set":
            --autosome-par
            

#end if

#if str($CONDITIONAL_snps_only.CONDITIONAL_SELECT_snps_only) == "set":
            --snps-only
            

    #if $str($CONDITIONAL_snps_only.snps_only_MOD_0_0):
            '${CONDITIONAL_snps_only.snps_only_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_from.CONDITIONAL_SELECT_from) == "set":
            --from
            

    #if $str($CONDITIONAL_from.from_MOD_0_0):
            '${CONDITIONAL_from.from_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_to.CONDITIONAL_SELECT_to) == "set":
            --to
            

    #if $str($CONDITIONAL_to.to_MOD_0_0):
            '${CONDITIONAL_to.to_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_snp.CONDITIONAL_SELECT_snp) == "set":
            --snp
            

    #if $str($CONDITIONAL_snp.snp_MOD_0_0):
            '${CONDITIONAL_snp.snp_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_exclude_snp.CONDITIONAL_SELECT_exclude_snp) == "set":
            --exclude-snp
            

    #if $str($CONDITIONAL_exclude_snp.exclude_snp_MOD_0_0):
            '${CONDITIONAL_exclude_snp.exclude_snp_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_window.CONDITIONAL_SELECT_window) == "set":
            --window
            

    #if $str($CONDITIONAL_window.window_MOD_0_0):
            '${CONDITIONAL_window.window_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_from_bp.CONDITIONAL_SELECT_from_bp) == "set":
            --from-bp
            

    #if $str($CONDITIONAL_from_bp.from_bp_MOD_0_0):
            '${CONDITIONAL_from_bp.from_bp_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_to_bp.CONDITIONAL_SELECT_to_bp) == "set":
            --to-bp
            

    #if $str($CONDITIONAL_to_bp.to_bp_MOD_0_0):
            '${CONDITIONAL_to_bp.to_bp_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_from_kb.CONDITIONAL_SELECT_from_kb) == "set":
            --from-kb
            

    #if $str($CONDITIONAL_from_kb.from_kb_MOD_0_0):
            '${CONDITIONAL_from_kb.from_kb_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_to_kb.CONDITIONAL_SELECT_to_kb) == "set":
            --to-kb
            

    #if $str($CONDITIONAL_to_kb.to_kb_MOD_0_0):
            '${CONDITIONAL_to_kb.to_kb_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_from_mb.CONDITIONAL_SELECT_from_mb) == "set":
            --from-mb
            

    #if $str($CONDITIONAL_from_mb.from_mb_MOD_0_0):
            '${CONDITIONAL_from_mb.from_mb_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_to_mb.CONDITIONAL_SELECT_to_mb) == "set":
            --to-mb
            

    #if $str($CONDITIONAL_to_mb.to_mb_MOD_0_0):
            '${CONDITIONAL_to_mb.to_mb_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_snps.CONDITIONAL_SELECT_snps) == "set":
            --snps
            

    #if $str($CONDITIONAL_snps.snps_MOD_0_0):
            '${CONDITIONAL_snps.snps_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_exclude_snps.CONDITIONAL_SELECT_exclude_snps) == "set":
            --exclude-snps
            

    #if $str($CONDITIONAL_exclude_snps.exclude_snps_MOD_0_0):
            '${CONDITIONAL_exclude_snps.exclude_snps_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_force_intersect.CONDITIONAL_SELECT_force_intersect) == "set":
            --force-intersect
            

#end if

#if str($CONDITIONAL_geno.CONDITIONAL_SELECT_geno) == "set":
            --geno
            

    #if $str($CONDITIONAL_geno.geno_MOD_0_0):
            '${CONDITIONAL_geno.geno_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_geno.CONDITIONAL_geno_MOD_1.CONDITIONAL_SELECT_geno_MOD_1) == 'from_list'
                                            '${CONDITIONAL_geno.CONDITIONAL_geno_MOD_1.geno_MOD_1}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_mind.CONDITIONAL_SELECT_mind) == "set":
            --mind
            

    #if $str($CONDITIONAL_mind.mind_MOD_0_0):
            '${CONDITIONAL_mind.mind_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_mind.CONDITIONAL_mind_MOD_1.CONDITIONAL_SELECT_mind_MOD_1) == 'from_list'
                                            '${CONDITIONAL_mind.CONDITIONAL_mind_MOD_1.mind_MOD_1}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_require_pheno.CONDITIONAL_SELECT_require_pheno) == "set":
            --require-pheno
            

    #if $str($CONDITIONAL_require_pheno.require_pheno_MOD_0_0):
            '${CONDITIONAL_require_pheno.require_pheno_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_require_covar.CONDITIONAL_SELECT_require_covar) == "set":
            --require-covar
            

    #if $str($CONDITIONAL_require_covar.require_covar_MOD_0_0):
            '${CONDITIONAL_require_covar.require_covar_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_maf.CONDITIONAL_SELECT_maf) == "set":
            --maf
            

    #if $str($CONDITIONAL_maf.maf_MOD_0_0):
            '${CONDITIONAL_maf.maf_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_max_maf.CONDITIONAL_SELECT_max_maf) == "set":
            --max-maf
            

    #if $str($CONDITIONAL_max_maf.max_maf_MOD_0_0):
            '${CONDITIONAL_max_maf.max_maf_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_mac.CONDITIONAL_SELECT_mac) == "set":
            --mac
            

    #if $str($CONDITIONAL_mac.mac_MOD_0_0):
            '${CONDITIONAL_mac.mac_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_max_mac.CONDITIONAL_SELECT_max_mac) == "set":
            --max-mac
            

    #if $str($CONDITIONAL_max_mac.max_mac_MOD_0_0):
            '${CONDITIONAL_max_mac.max_mac_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_maf_succ.CONDITIONAL_SELECT_maf_succ) == "set":
            --maf-succ
            

#end if

#if str($CONDITIONAL_read_freq.CONDITIONAL_SELECT_read_freq) == "set":
            --read-freq
            

    #if $str($CONDITIONAL_read_freq.read_freq_MOD_0_0):
            '${CONDITIONAL_read_freq.read_freq_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_hwe.CONDITIONAL_SELECT_hwe) == "set":
            --hwe
            

    #if $str($CONDITIONAL_hwe.hwe_MOD_0_0):
            '${CONDITIONAL_hwe.hwe_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_hwe.hwe_MOD_1_0):
            '${CONDITIONAL_hwe.hwe_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_hwe.hwe_MOD_2_0):
            '${CONDITIONAL_hwe.hwe_MOD_2_0}'
        #end if

#end if

#if str($CONDITIONAL_mach_r2_filter.CONDITIONAL_SELECT_mach_r2_filter) == "set":
            --mach-r2-filter
            

    #if $str($CONDITIONAL_mach_r2_filter.mach_r2_filter_MOD_0_0):
            '${CONDITIONAL_mach_r2_filter.mach_r2_filter_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_mach_r2_filter.mach_r2_filter_MOD_1_0):
            '${CONDITIONAL_mach_r2_filter.mach_r2_filter_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_keep_females.CONDITIONAL_SELECT_keep_females) == "set":
            --keep-females
            

#end if

#if str($CONDITIONAL_keep_males.CONDITIONAL_SELECT_keep_males) == "set":
            --keep-males
            

#end if

#if str($CONDITIONAL_keep_nosex.CONDITIONAL_SELECT_keep_nosex) == "set":
            --keep-nosex
            

#end if

#if str($CONDITIONAL_remove_females.CONDITIONAL_SELECT_remove_females) == "set":
            --remove-females
            

#end if

#if str($CONDITIONAL_remove_males.CONDITIONAL_SELECT_remove_males) == "set":
            --remove-males
            

#end if

#if str($CONDITIONAL_remove_nosex.CONDITIONAL_SELECT_remove_nosex) == "set":
            --remove-nosex
            

#end if

#if str($CONDITIONAL_keep_founders.CONDITIONAL_SELECT_keep_founders) == "set":
            --keep-founders
            

#end if

#if str($CONDITIONAL_keep_nonfounders.CONDITIONAL_SELECT_keep_nonfounders) == "set":
            --keep-nonfounders
            

#end if

#if str($CONDITIONAL_keep_if.CONDITIONAL_SELECT_keep_if) == "set":
            --keep-if
            

    #if $str($CONDITIONAL_keep_if.keep_if_MOD_0_0):
            '${CONDITIONAL_keep_if.keep_if_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_keep_if.keep_if_MOD_1_0):
            '${CONDITIONAL_keep_if.keep_if_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_keep_if.keep_if_MOD_2_0):
            '${CONDITIONAL_keep_if.keep_if_MOD_2_0}'
        #end if

#end if

#if str($CONDITIONAL_remove_if.CONDITIONAL_SELECT_remove_if) == "set":
            --remove-if
            

    #if $str($CONDITIONAL_remove_if.remove_if_MOD_0_0):
            '${CONDITIONAL_remove_if.remove_if_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_remove_if.remove_if_MOD_1_0):
            '${CONDITIONAL_remove_if.remove_if_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_remove_if.remove_if_MOD_2_0):
            '${CONDITIONAL_remove_if.remove_if_MOD_2_0}'
        #end if

#end if

#if str($CONDITIONAL_nonfounders.CONDITIONAL_SELECT_nonfounders) == "set":
            --nonfounders
            

#end if

#if str($CONDITIONAL_output_chr.CONDITIONAL_SELECT_output_chr) == "set":
            --output-chr
            

    #if $str($CONDITIONAL_output_chr.output_chr_MOD_0_0):
            '${CONDITIONAL_output_chr.output_chr_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_output_missing_genotype.CONDITIONAL_SELECT_output_missing_genotype) == "set":
            --output-missing-genotype
            

    #if $str($CONDITIONAL_output_missing_genotype.output_missing_genotype_MOD_0_0):
            '${CONDITIONAL_output_missing_genotype.output_missing_genotype_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_output_missing_phenotype.CONDITIONAL_SELECT_output_missing_phenotype) == "set":
            --output-missing-phenotype
            

    #if $str($CONDITIONAL_output_missing_phenotype.output_missing_phenotype_MOD_0_0):
            '${CONDITIONAL_output_missing_phenotype.output_missing_phenotype_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_sort_vars.CONDITIONAL_SELECT_sort_vars) == "set":
            --sort-vars
            

    #if $str($CONDITIONAL_sort_vars.sort_vars_MOD_0_0):
            '${CONDITIONAL_sort_vars.sort_vars_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_set_hh_missing.CONDITIONAL_SELECT_set_hh_missing) == "set":
            --set-hh-missing
            

#end if

#if str($CONDITIONAL_set_mixed_mt_missing.CONDITIONAL_SELECT_set_mixed_mt_missing) == "set":
            --set-mixed-mt-missing
            

#end if

#if str($CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_OVERLOADED_SELECT_split_par) == "form_0":
        #if str($CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.CONDITIONAL_SELECT_split_par) == "set":
            --split-par
            
    #if $str($CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.split_par_MOD_0_0):
            '${CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.split_par_MOD_0_0}'
        #end if
    #if $str($CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.split_par_MOD_1_0):
            '${CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.split_par_MOD_1_0}'
        #end if
#end if
        #end if

#if str($CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_OVERLOADED_SELECT_split_par) == "form_1":
        #if str($CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.CONDITIONAL_SELECT_split_par) == "set":
            --split-par
            
    #if $str($CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.split_par_MOD_0_0):
            '${CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.split_par_MOD_0_0}'
        #end if
    #if $str($CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.split_par_MOD_1_0):
            '${CONDITIONAL_OVERLOADED_split_par.CONDITIONAL_split_par.split_par_MOD_1_0}'
        #end if
#end if
        #end if

#if str($CONDITIONAL_merge_par.CONDITIONAL_SELECT_merge_par) == "set":
            --merge-par
            

#end if

#if str($CONDITIONAL_set_missing_var_ids.CONDITIONAL_SELECT_set_missing_var_ids) == "set":
            --set-missing-var-ids
            

    #if $str($CONDITIONAL_set_missing_var_ids.set_missing_var_ids_MOD_0_0):
            '${CONDITIONAL_set_missing_var_ids.set_missing_var_ids_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_set_all_var_ids.CONDITIONAL_SELECT_set_all_var_ids) == "set":
            --set-all-var-ids
            

    #if $str($CONDITIONAL_set_all_var_ids.set_all_var_ids_MOD_0_0):
            '${CONDITIONAL_set_all_var_ids.set_all_var_ids_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_new_id_max_allele_len.CONDITIONAL_SELECT_new_id_max_allele_len) == "set":
            --new-id-max-allele-len
            

    #if $str($CONDITIONAL_new_id_max_allele_len.new_id_max_allele_len_MOD_0_0):
            '${CONDITIONAL_new_id_max_allele_len.new_id_max_allele_len_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_new_id_max_allele_len.CONDITIONAL_new_id_max_allele_len_MOD_1.CONDITIONAL_SELECT_new_id_max_allele_len_MOD_1) == 'from_list'
                                            '${CONDITIONAL_new_id_max_allele_len.CONDITIONAL_new_id_max_allele_len_MOD_1.new_id_max_allele_len_MOD_1}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_missing_var_code.CONDITIONAL_SELECT_missing_var_code) == "set":
            --missing-var-code
            

    #if $str($CONDITIONAL_missing_var_code.missing_var_code_MOD_0_0):
            '${CONDITIONAL_missing_var_code.missing_var_code_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_update_sex.CONDITIONAL_SELECT_update_sex) == "set":
            --update-sex
            

    #if $CONDITIONAL_update_sex.update_sex_MOD_0_0:
            '${CONDITIONAL_update_sex.update_sex_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_update_sex.update_sex_MOD_1_0):
            '${CONDITIONAL_update_sex.update_sex_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_real_ref_alleles.CONDITIONAL_SELECT_real_ref_alleles) == "set":
            --real-ref-alleles
            

#end if

#if str($CONDITIONAL_maj_ref.CONDITIONAL_SELECT_maj_ref) == "set":
            --maj-ref
            

    #if $str($CONDITIONAL_maj_ref.maj_ref_MOD_0_0):
            '${CONDITIONAL_maj_ref.maj_ref_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_ref_allele.CONDITIONAL_SELECT_ref_allele) == "set":
            --ref-allele
            

    #if $str($CONDITIONAL_ref_allele.ref_allele_MOD_0_0):
            '${CONDITIONAL_ref_allele.ref_allele_MOD_0_0}'
        #end if

    #if $CONDITIONAL_ref_allele.ref_allele_MOD_1_0:
            '${CONDITIONAL_ref_allele.ref_allele_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_ref_allele.ref_allele_MOD_2_0):
            '${CONDITIONAL_ref_allele.ref_allele_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_ref_allele.ref_allele_MOD_3_0):
            '${CONDITIONAL_ref_allele.ref_allele_MOD_3_0}'
        #end if

    #if $str($CONDITIONAL_ref_allele.ref_allele_MOD_4_0):
            '${CONDITIONAL_ref_allele.ref_allele_MOD_4_0}'
        #end if

#end if

#if str($CONDITIONAL_alt1_allele.CONDITIONAL_SELECT_alt1_allele) == "set":
            --alt1-allele
            

    #if $str($CONDITIONAL_alt1_allele.alt1_allele_MOD_0_0):
            '${CONDITIONAL_alt1_allele.alt1_allele_MOD_0_0}'
        #end if

    #if $CONDITIONAL_alt1_allele.alt1_allele_MOD_1_0:
            '${CONDITIONAL_alt1_allele.alt1_allele_MOD_1_0}'
        #end if

    #if $str($CONDITIONAL_alt1_allele.alt1_allele_MOD_2_0):
            '${CONDITIONAL_alt1_allele.alt1_allele_MOD_2_0}'
        #end if

    #if $str($CONDITIONAL_alt1_allele.alt1_allele_MOD_3_0):
            '${CONDITIONAL_alt1_allele.alt1_allele_MOD_3_0}'
        #end if

    #if $str($CONDITIONAL_alt1_allele.alt1_allele_MOD_4_0):
            '${CONDITIONAL_alt1_allele.alt1_allele_MOD_4_0}'
        #end if

#end if

#if str($CONDITIONAL_ref_from_fa.CONDITIONAL_SELECT_ref_from_fa) == "set":
            --ref-from-fa
            

    #if $CONDITIONAL_ref_from_fa.ref_from_fa_MOD_0_0:
            '${CONDITIONAL_ref_from_fa.ref_from_fa_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_ref_from_fa.ref_from_fa_MOD_1_0):
            '${CONDITIONAL_ref_from_fa.ref_from_fa_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_indiv_sort.CONDITIONAL_SELECT_indiv_sort) == "set":
            --indiv-sort
            

    #if $str($CONDITIONAL_indiv_sort.indiv_sort_MOD_0_0):
            '${CONDITIONAL_indiv_sort.indiv_sort_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_indiv_sort.indiv_sort_MOD_1_0):
            '${CONDITIONAL_indiv_sort.indiv_sort_MOD_1_0}'
        #end if

    #if $CONDITIONAL_indiv_sort.indiv_sort_MOD_2_0:
            '${CONDITIONAL_indiv_sort.indiv_sort_MOD_2_0}'
        #end if

#end if

#if str($CONDITIONAL_king_table_filter.CONDITIONAL_SELECT_king_table_filter) == "set":
            --king-table-filter
            

    #if $str($CONDITIONAL_king_table_filter.king_table_filter_MOD_0_0):
            '${CONDITIONAL_king_table_filter.king_table_filter_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_condition.CONDITIONAL_SELECT_condition) == "set":
            --condition
            

    #if $str($CONDITIONAL_condition.condition_MOD_0_0):
            '${CONDITIONAL_condition.condition_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_condition.CONDITIONAL_condition_MOD_1.CONDITIONAL_SELECT_condition_MOD_1) == 'from_list'
                                            '${CONDITIONAL_condition.CONDITIONAL_condition_MOD_1.condition_MOD_1}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_condition_list.CONDITIONAL_SELECT_condition_list) == "set":
            --condition-list
            

    #if $CONDITIONAL_condition_list.condition_list_MOD_0_0:
            '${CONDITIONAL_condition_list.condition_list_MOD_0_0}'
        #end if

#if $str($CONDITIONAL_condition_list.CONDITIONAL_condition_list_MOD_1.CONDITIONAL_SELECT_condition_list_MOD_1) == 'from_list'
                                            '${CONDITIONAL_condition_list.CONDITIONAL_condition_list_MOD_1.condition_list_MOD_1}'
                                        #end if
                        

#end if

#if str($CONDITIONAL_parameters.CONDITIONAL_SELECT_parameters) == "set":
            --parameters
            

    #if $str($CONDITIONAL_parameters.parameters_MOD_0_0):
            '${CONDITIONAL_parameters.parameters_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_vif.CONDITIONAL_SELECT_vif) == "set":
            --vif
            

    #if $str($CONDITIONAL_vif.vif_MOD_0_0):
            '${CONDITIONAL_vif.vif_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_max_corr.CONDITIONAL_SELECT_max_corr) == "set":
            --max-corr
            

    #if $str($CONDITIONAL_max_corr.max_corr_MOD_0_0):
            '${CONDITIONAL_max_corr.max_corr_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_xchr_model.CONDITIONAL_SELECT_xchr_model) == "set":
            --xchr-model
            

    #if $str($CONDITIONAL_xchr_model.xchr_model_MOD_0_0):
            '${CONDITIONAL_xchr_model.xchr_model_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_ci.CONDITIONAL_SELECT_ci) == "set":
            --ci
            

    #if $str($CONDITIONAL_ci.ci_MOD_0_0):
            '${CONDITIONAL_ci.ci_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_pfilter.CONDITIONAL_SELECT_pfilter) == "set":
            --pfilter
            

    #if $str($CONDITIONAL_pfilter.pfilter_MOD_0_0):
            '${CONDITIONAL_pfilter.pfilter_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_score_col_nums.CONDITIONAL_SELECT_score_col_nums) == "set":
            --score-col-nums
            

    #if $str($CONDITIONAL_score_col_nums.score_col_nums_MOD_0_0):
            '${CONDITIONAL_score_col_nums.score_col_nums_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_memory.CONDITIONAL_SELECT_memory) == "set":
            --memory
            

    #if $str($CONDITIONAL_memory.memory_MOD_0_0):
            '${CONDITIONAL_memory.memory_MOD_0_0}'
        #end if

    #if $str($CONDITIONAL_memory.memory_MOD_1_0):
            '${CONDITIONAL_memory.memory_MOD_1_0}'
        #end if

#end if

#if str($CONDITIONAL_threads.CONDITIONAL_SELECT_threads) == "set":
            --threads
            

    #if $str($CONDITIONAL_threads.threads_MOD_0_0):
            '${CONDITIONAL_threads.threads_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_seed.CONDITIONAL_SELECT_seed) == "set":
            --seed
            

    #if $str($CONDITIONAL_seed.seed_MOD_0_0):
            '${CONDITIONAL_seed.seed_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_output_min_p.CONDITIONAL_SELECT_output_min_p) == "set":
            --output-min-p
            

    #if $str($CONDITIONAL_output_min_p.output_min_p_MOD_0_0):
            '${CONDITIONAL_output_min_p.output_min_p_MOD_0_0}'
        #end if

#end if

#if str($CONDITIONAL_debug.CONDITIONAL_SELECT_debug) == "set":
            --debug
            

#end if

#if str($CONDITIONAL_randmem.CONDITIONAL_SELECT_randmem) == "set":
            --randmem
            

#end if

#if str($CONDITIONAL_warning_errcode.CONDITIONAL_SELECT_warning_errcode) == "set":
            --warning-errcode
            

#end if
    ]]></command>
    <inputs>
        <conditional name="CONDITIONAL_pfile">
                          <param name="CONDITIONAL_SELECT_pfile" type="select" label="Set Pfile" help="Specify .pgen + .pvar{.zst} + .psam prefix. " argument="--pfile">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="pfile_MOD_0_0" type="text" label="prefix" value="" optional="False" argument="prefix" help=""/>
        <param name="pfile_MOD_1_0" type="text" label="vzs" value="" optional="True" argument="vzs" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_pgen">
                          <param name="CONDITIONAL_SELECT_pgen" type="select" label="Set Pgen" help="Specify full name of .pgen/.bed file. " argument="--pgen">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="pgen_MOD_0_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_pvar">
                          <param name="CONDITIONAL_SELECT_pvar" type="select" label="Set Pvar" help="Specify full name of .pvar/.bim file. " argument="--pvar">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="pvar_MOD_0_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_psam">
                          <param name="CONDITIONAL_SELECT_psam" type="select" label="Set Psam" help="Specify full name of .psam/.fam file. " argument="--psam">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="psam_MOD_0_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_bpfile">
                          <param name="CONDITIONAL_SELECT_bpfile" type="select" label="Set Bpfile" help="Specify .pgen + .bim{.zst} + .fam prefix. " argument="--bpfile">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="bpfile_MOD_0_0" type="text" label="prefx" value="" optional="False" argument="prefx" help=""/>
        <param name="bpfile_MOD_1_0" type="text" label="vzs" value="" optional="True" argument="vzs" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_autoconv">
                          <param name="CONDITIONAL_SELECT_keep_autoconv" type="select" label="Set Keep autoconv" help="When importing non-PLINK-binary data, don't delete                       autogenerated binary fileset at end of run. " argument="--keep-autoconv">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_no_fid">
                          <param name="CONDITIONAL_SELECT_no_fid" type="select" label="Set No fid" help=".fam file does not contain column 1 (family ID). " argument="--no-fid">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_no_parents">
                          <param name="CONDITIONAL_SELECT_no_parents" type="select" label="Set No parents" help=".fam file does not contain columns 3-4 (parents). " argument="--no-parents">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_no_sex">
                          <param name="CONDITIONAL_SELECT_no_sex" type="select" label="Set No sex" help=".fam file does not contain column 5 (sex). " argument="--no-sex">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_no_pheno">
                          <param name="CONDITIONAL_SELECT_no_pheno" type="select" label="Set No pheno" help=".fam file does not contain column 6 (phenotype). " argument="--no-pheno">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_vcf">
                          <param name="CONDITIONAL_SELECT_vcf" type="select" label="Set Vcf" help="" argument="--vcf">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="vcf_MOD_0_0" type="data" format="vcf" label="filename" multiple="False" optional="False" argument="filename"/>
        <param name="vcf_MOD_1_0" type="text" label="dosage=[field]" value="" optional="True" argument="dosage=[field]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_bcf">
                          <param name="CONDITIONAL_SELECT_bcf" type="select" label="Set Bcf" help="Specify full name of .vcf{.gz|.zst} or BCF2 file to import. * These can be used with --psam. * By default, dosage information is not imported.  To import the GP field (must be VCFv4.3-style 0..1, one probability per possible genotype), add 'dosage=GP'.  'dosage=DS' (or anything else) causes the named field to be interpreted as a Minimac3-style dosage." argument="--bcf">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="bcf_MOD_0_0" type="data" format="bcf" label="filename" multiple="False" optional="False" argument="filename"/>
        <param name="bcf_MOD_1_0" type="text" label="dosage=[field]" value="" optional="True" argument="dosage=[field]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_bgen">
                          <param name="CONDITIONAL_SELECT_bgen" type="select" label="Set Bgen" help="" argument="--bgen">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="bgen_MOD_0_0" type="data" format="plink.bgen" label="filename" multiple="False" optional="False" argument="filename"/>
        <param name="bgen_MOD_1_0" type="text" label="snpid-chr" value="" optional="True" argument="snpid-chr" help=""/>
        <conditional name="CONDITIONAL_bgen_MOD_2">
                              <param name="CONDITIONAL_SELECT_bgen_MOD_2" type="select" label="How to set Bgen">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="bgen_MOD_2" type="select" label="Select value">
                        <option value="ref-first">ref-first</option>
<option value="ref-second">ref-second</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_gen">
                          <param name="CONDITIONAL_SELECT_gen" type="select" label="Set Gen" help="" argument="--gen">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="gen_MOD_0_0" type="data" format="plink.gen" label="filename" multiple="False" optional="False" argument="filename"/>
        <conditional name="CONDITIONAL_gen_MOD_1">
                              <param name="CONDITIONAL_SELECT_gen_MOD_1" type="select" label="How to set Gen">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="gen_MOD_1" type="select" label="Select value">
                        <option value="ref-first">ref-first</option>
<option value="ref-second">ref-second</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_sample">
                          <param name="CONDITIONAL_SELECT_sample" type="select" label="Set Sample" help="Specify an Oxford-format dataset to import.  --data specifies a .gen{.zst} + .sample pair, while --bgen specifies a BGEN v1.1+ file. * If a BGEN v1.2+ file contains sample IDs, it may be imported without a companion .sample file. * With 'snpid-chr', chromosome codes are read from the 'SNP ID' field instead of the usual chromosome field. * By default, the second allele for each variant is treated as a provisional reference allele.  To specify that the first (resp. second) allele really is always reference, add the 'ref-first' (resp. 'ref-second') modifier." argument="--sample">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="sample_MOD_0_0" type="data" format="plink.sample" label="filename" multiple="False" optional="False" argument="filename"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_haps">
                          <param name="CONDITIONAL_SELECT_haps" type="select" label="Set Haps" help="" argument="--haps">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="haps_MOD_0_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        <conditional name="CONDITIONAL_haps_MOD_1">
                              <param name="CONDITIONAL_SELECT_haps_MOD_1" type="select" label="How to set Haps">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="haps_MOD_1" type="select" label="Select value">
                        <option value="ref-first">ref-first</option>
<option value="ref-second">ref-second</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_legend">
                          <param name="CONDITIONAL_SELECT_legend" type="select" label="Set Legend" help="Specify .haps {+ .legend} file(s) to import. * When --legend is specified, it's assumed that the --haps file doesn't contain header columns. * On chrX, the second male column may contain dummy '-' entries.  (However, PLINK currently cannot handle omitted male columns.) * If not used with --sample, new sample IDs are of the form 'per#/per#'." argument="--legend">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="legend_MOD_0_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        <param name="legend_MOD_1_0" type="text" label="chr code" value="" optional="False" argument="chr code" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_map">
                          <param name="CONDITIONAL_SELECT_map" type="select" label="Set Map" help="Specify full name of .map file. " argument="--map">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="map_MOD_0_0" type="data" format="plink.map" label="fname" multiple="False" optional="False" argument="fname"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_import_dosage">
                          <param name="CONDITIONAL_SELECT_import_dosage" type="select" label="Set Import dosage" help="Specify PLINK 1.x-style dosage file to import. * You must also specify a companion .psam/.fam file. * By default, PLINK assumes that the file contains a header line, which has 'SNP' in (1-based) column i+1, 'A1' in column i+j+2, 'A2' in column i+j+3, and sample FID/IIDs starting from column i+j+k+4.  (i/j/k are normally zero, but can be changed with 'skip0', 'skip1', and 'skip2' respectively.)  If such a header line is not present, use the 'noheader' modifier; samples will then be assumed to appear in the same order as they do in the .psam/.fam file. * You may specify a companion .map file.  If you do not, * 'single-chr=' can be used to specify that all variants are on the named chromosome.  Otherwise, you can use 'chr-col-num=' to read chromosome codes from the given (1-based) column number. * 'pos-col-num=' causes bp coordinates to be read from the given column number. * The 'format' modifier lets you specify the number of values used to represent each dosage.  'format=1' normally indicates a single 0..2 A1 expected count; 'dose1' modifies this to a 0..1 frequency.  'format=2' (the default) indicates a 0..1 homozygous A1 likelihood followed by a 0..1 het likelihood, while 'format=3' indicates 0..1 hom A1, 0..1 het, 0..1 hom A2." argument="--import-dosage">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="import_dosage_MOD_0_0" type="text" label="allele dosage file" value="" optional="False" argument="allele dosage file" help=""/>
        <param name="import_dosage_MOD_1_0" type="text" label="noheader" value="" optional="True" argument="noheader" help=""/>
        <param name="import_dosage_MOD_2_0" type="text" label="skip0=[i]" value="" optional="True" argument="skip0=[i]" help=""/>
        <param name="import_dosage_MOD_3_0" type="text" label="skip1=[j]" value="" optional="True" argument="skip1=[j]" help=""/>
        <param name="import_dosage_MOD_4_0" type="text" label="skip2=[k]" value="" optional="True" argument="skip2=[k]" help=""/>
        <param name="import_dosage_MOD_5_0" type="text" label="dose1" value="" optional="True" argument="dose1" help=""/>
        <param name="import_dosage_MOD_6_0" type="text" label="format=[m]" value="" optional="True" argument="format=[m]" help=""/>
        <conditional name="CONDITIONAL_import_dosage_MOD_7">
                              <param name="CONDITIONAL_SELECT_import_dosage_MOD_7" type="select" label="How to set Import dosage">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="import_dosage_MOD_7" type="select" label="Select value">
                        <option value="ref-first">ref-first</option>
<option value="ref-second">ref-second</option>
</param>
                        </when>
                      </conditional>
        <param name="import_dosage_MOD_8_0" type="text" label="single-chr=[code]" value="" optional="True" argument="single-chr=[code]" help=""/>
        <param name="import_dosage_MOD_9_0" type="text" label="chr-col-num=[#]" value="" optional="True" argument="chr-col-num=[#]" help=""/>
        <param name="import_dosage_MOD_10_0" type="text" label="pos-col-num=[#]" value="" optional="True" argument="pos-col-num=[#]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_dummy">
                          <param name="CONDITIONAL_SELECT_dummy" type="select" label="Set Dummy" help="This generates a fake input dataset with the specified number of samples and SNPs. * By default, the missing dosage and phenotype frequencies are zero. These can be changed by providing 3rd and 4th numeric parameters. * By default, allele codes are As and Bs; this can be changed with the 'acgt', '1234', or '12' modifier. * By default, one binary phenotype is generated.  'pheno-ct=' can be used to change the number of phenotypes, and 'scalar-pheno' causes these phenotypes to be normally distributed scalars. * By default, all (nonmissing) dosages are in {0,1,2}.  To make some of them take on decimal values, use 'dosage-freq='.  (These dosages are affected by --hard-call-threshold and --dosage-erase-threshold.)" argument="--dummy">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="dummy_MOD_0_0" type="text" label="sample ct" value="" optional="False" argument="sample ct" help=""/>
        <param name="dummy_MOD_1_0" type="text" label="SNP ct" value="" optional="False" argument="SNP ct" help=""/>
        <param name="dummy_MOD_2_0" type="text" label="missing dosage freq" value="" optional="True" argument="missing dosage freq" help=""/>
        <param name="dummy_MOD_3_0" type="text" label="missing pheno freq" value="" optional="True" argument="missing pheno freq" help=""/>
        <conditional name="CONDITIONAL_dummy_MOD_4">
                              <param name="CONDITIONAL_SELECT_dummy_MOD_4" type="select" label="How to set Dummy">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="dummy_MOD_4" type="select" label="Select value">
                        <option value="acgt">acgt</option>
<option value="1234">1234</option>
<option value="12">12</option>
</param>
                        </when>
                      </conditional>
        <param name="dummy_MOD_5_0" type="text" label="pheno-ct=[count]" value="" optional="True" argument="pheno-ct=[count]" help=""/>
        <param name="dummy_MOD_6_0" type="text" label="scalar-pheno" value="" optional="True" argument="scalar-pheno" help=""/>
        <param name="dummy_MOD_7_0" type="text" label="dosage-freq=[rate]" value="" optional="True" argument="dosage-freq=[rate]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_pgen">
                          <param name="CONDITIONAL_SELECT_make_pgen" type="select" label="Set Make pgen" help="" argument="--make-pgen">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_pgen_MOD_0_0" type="text" label="vzs" value="" optional="True" argument="vzs" help=""/>
        <param name="make_pgen_MOD_1_0" type="text" label="format=[code]" value="" optional="True" argument="format=[code]" help=""/>
        <param name="make_pgen_MOD_2_0" type="text" label="trim-alts" value="" optional="True" argument="trim-alts" help=""/>
        <param name="make_pgen_MOD_3_0" type="text" label="erase-phase" value="" optional="True" argument="erase-phase" help=""/>
        <param name="make_pgen_MOD_4_0" type="text" label="erase-dosage" value="" optional="True" argument="erase-dosage" help=""/>
        <param name="make_pgen_MOD_5_0" type="text" label="pvar-cols=[col set descriptor]" value="" optional="True" argument="pvar-cols=[col set descriptor]" help=""/>
        <param name="make_pgen_MOD_6_0" type="text" label="psam-cols=[col set descriptor]" value="" optional="True" argument="psam-cols=[col set descriptor]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_bpgen">
                          <param name="CONDITIONAL_SELECT_make_bpgen" type="select" label="Set Make bpgen" help="" argument="--make-bpgen">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_bpgen_MOD_0_0" type="text" label="vzs" value="" optional="True" argument="vzs" help=""/>
        <param name="make_bpgen_MOD_1_0" type="text" label="format=[code]" value="" optional="True" argument="format=[code]" help=""/>
        <param name="make_bpgen_MOD_2_0" type="text" label="trim-alts" value="" optional="True" argument="trim-alts" help=""/>
        <param name="make_bpgen_MOD_3_0" type="text" label="erase-phase" value="" optional="True" argument="erase-phase" help=""/>
        <param name="make_bpgen_MOD_4_0" type="text" label="erase-dosage" value="" optional="True" argument="erase-dosage" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_bed">
                          <param name="CONDITIONAL_SELECT_make_bed" type="select" label="Set Make bed" help="Create a new PLINK binary fileset (--make-pgen = .pgen + .pvar{.zst} + .psam, --make-bpgen = .pgen + .bim{.zst} + .fam). * Unlike the automatic text-to-binary converters (which only heed chromosome filters), this supports all of plink2's filtering flags. * The 'vzs' modifier causes the variant file (.pvar/.bim) to be Zstd-compressed. * The 'format' modifier requests an uncompressed fixed-variant-width .pgen file.  (These do not directly support multiallelic variants.)  The following format code is currently supported: 2: just like .bed, except with an extended (12-byte instead of 3-byte)           header containing variant/sample counts, and rotated genotype codes           (00 = hom ref, 01 = het, 10 = hom alt, 11 = missing). * The 'erase-phase' and 'erase-dosage' modifiers prevent phase and dosage information from being written to the new .pgen. * The first five columns of a .pvar file are always #CHROM/POS/ID/REF/ALT. Supported optional .pvar column sets are: xheader: All ## header lines (yeah, this is technically not a column).                 Without this, only the #CHROM header line is kept. maybequal: QUAL.  Omitted if all loaded values are missing. qual: Force QUAL column to be written even when empty. maybefilter: FILTER.  Omitted if all loaded values are missing. filter: Force FILTER column to be written even when empty. maybeinfo: INFO.  Omitted if all loaded values are missing, or if                   INFO:PR is the only subfield. info: Force INFO column to be written. maybecm: Centimorgan coordinate.  Omitted if all loaded values are 0. cm: Force CM column to be written even when empty. The default is xheader,maybequal,maybefilter,maybeinfo,maybecm. * The first two columns of a .psam file are always #FID/IID.  Supported optional .psam column sets are: maybesid: Sample disambiguation ID (useful when multiple samples are                  collected from a single organism), '0' = missing.  Omitted if                  all loaded values are missing. sid: Force SID column to be written even when empty. maybeparents: Father and mother IIDs, '0' = missing.  Omitted if all                      loaded values are missing. parents: Force PAT and MAT columns to be written even when empty. sex: '1'/'M'/'m' = male, '2'/'F'/'f' = female, 'NA'/'0' = missing. pheno1: First active phenotype.  If none, all column entries are set to                the --output-missing-phenotype string. phenos: All active phenotypes, if any.  (Can be combined with pheno1 to                force at least one phenotype column to be written.) The default is maybesid,maybeparents,sex,phenos." argument="--make-bed">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_bed_MOD_0_0" type="text" label="vzs" value="" optional="True" argument="vzs" help=""/>
        <param name="make_bed_MOD_1_0" type="text" label="trim-alts" value="" optional="True" argument="trim-alts" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_just_pvar">
                          <param name="CONDITIONAL_SELECT_make_just_pvar" type="select" label="Set Make just pvar" help="" argument="--make-just-pvar">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_just_pvar_MOD_0_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        <param name="make_just_pvar_MOD_1_0" type="text" label="cols=[column set descriptor]" value="" optional="True" argument="cols=[column set descriptor]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_just_psam">
                          <param name="CONDITIONAL_SELECT_make_just_psam" type="select" label="Set Make just psam" help="" argument="--make-just-psam">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_just_psam_MOD_0_0" type="text" label="cols=[column set descriptor]" value="" optional="True" argument="cols=[column set descriptor]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_just_bim">
                          <param name="CONDITIONAL_SELECT_make_just_bim" type="select" label="Set Make just bim" help="" argument="--make-just-bim">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_just_bim_MOD_0_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        </when>
                      </conditional>
        <param name="make_just_fam" type="boolean" label="Make just fam" truevalue="--make-just-fam" falsevalue="" optional="true" argument="--make-just-fam" help="Variants of --make-pgen/--make-bed which only write a new variant or sample file.  These don't always require an input genotype file. USE THESE CAUTIOUSLY.  It is very easy to desynchronize your binary genotype data and your sample/variant indexes if you use these commands improperly.  If you have any doubt, stick with --make-{b}pgen/--make-bed." checked="False"/>
        <conditional name="CONDITIONAL_export">
                          <param name="CONDITIONAL_SELECT_export" type="select" label="Set Export" help="&lt;id-paste=[column set descriptor]&gt; &lt;include-alt&gt; &lt;omit-nonmale-y&gt; &lt;spaces&gt; &lt;vcf-dosage=[field]&gt; &lt;ref-first&gt; &lt;bits=[#]&gt; Create a new fileset with all filters applied.  The following output formats are supported: (actually, only A-transpose, bgen-1.1, ind-major-bed, haps, hapslegend, oxford, and vcf are implemented for now) * '23': 23andMe 4-column format.  This can only be used on a single            sample's data (--keep may be handy), and does not support            multicharacter allele codes. * 'A': Sample-major additive (0/1/2) coding, suitable for loading from R.           If you need uncounted alleles to be named in the header line, add           the 'include-alt' modifier. * 'AD': Sample-major additive (0/1/2) + dominant (het=1/hom=0) coding.            Also supports 'include-alt'. * 'A-transpose': Variant-major 0/1/2. * 'beagle': Unphased per-autosome .dat and .map files, readable by early                BEAGLE versions. * 'beagle-nomap': Single .beagle.dat file. * 'bgen-1.x': Oxford-format .bgen + .sample.  For v1.2/v1.3, sample                  identifiers are stored in the .bgen (with id-delim and                  id-paste settings applied), and default precision is 16-bit                  (use the 'bits' modifier to change this). * 'bimbam': Regular BIMBAM format. * 'bimbam-1chr': BIMBAM format, with a two-column .pos.txt file.  Does not                     support multiple chromosomes. * 'fastphase': Per-chromosome fastPHASE files, with                   .chr-[chr #].phase.inp filename extensions. * 'fastphase-1chr': Single .phase.inp file.  Does not support                        multiple chromosomes. * 'haps', 'hapslegend': Oxford-format .haps + .sample{ + .legend}.  All                            data must be biallelic and phased. * 'HV': Per-chromosome Haploview files, with .chr-[chr #][.ped + .info]            filename extensions. * 'HV-1chr': Single Haploview .ped + .info file pair.  Does not support                 multiple chromosomes. * 'ind-major-bed': PLINK 1 sample-major .bed (+ .bim + .fam). * 'lgen': PLINK 1 long-format (.lgen + .fam + .map), loadable with --lfile. * 'lgen-ref': .lgen + .fam + .map + .ref, loadable with --lfile +                  --reference. * 'list': Single genotype-based list, up to 4 lines per variant.  To omit              nonmale genotypes on the Y chromosome, add the 'omit-nonmale-y'              modifier. * 'rlist': .rlist + .fam + .map fileset, where the .rlist file is a                genotype-based list which omits the most common genotype for                each variant.  Also supports 'omit-nonmale-y'. * 'oxford': Oxford-format .gen + .sample. * 'ped': PLINK 1 sample-major (.ped + .map), loadable with --file. * 'compound-genotypes': Same as 'ped', except that the space between each                            pair of same-variant allele codes is removed. * 'structure': Structure-format. * 'transpose': PLINK 1 variant-major (.tped + .tfam), loadable with                   --tfile. * 'vcf': VCFv4.3.  If PAR1 and PAR2 are present, they are automatically             merged with chrX, with proper handling of chromosome codes and             male ploidy.  If the 'bgz' modifier is added, the VCF file is             block-gzipped.             The 'id-paste' modifier controls which .psam columns are used to             construct sample IDs (choices are fid, iid, maybesid, and sid;             default is fid,iid,maybesid), while the 'id-delim' modifier sets             the character between the ID pieces (default '_').             By default, dosages are not exported; use 'vcf-dosage=GP' to             export them as genotype posterior probabilities, or             'vcf-dosage=DS' to export Minimac3-style dosages.  Replace 'DS'             with 'DS-force' to prevent DS from being omitted when it's an             integer. In addition, * When the output format only supports biallelic variants, multiallelic variants are downcoded to ref/alt1, not split. * The '12' modifier causes alt1 alleles to be coded as '1' and ref alleles to be coded as '2', while '01' maps alt1 -&gt; 0 and ref -&gt; 1. * The 'spaces' modifier makes the output space-delimited instead of tab-delimited, whenever both are permitted. * For biallelic formats where it's unspecified whether the reference/major allele should appear first or second, --export defaults to second for compatibility with PLINK 1.9.  Use 'ref-first' to change this." argument="--export">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="export_MOD_0_0" type="text" label="output format(s)..." value="" optional="False" argument="output format(s)..." help="Multiple values are allowed"/>
        <conditional name="CONDITIONAL_export_MOD_1">
                              <param name="CONDITIONAL_SELECT_export_MOD_1" type="select" label="How to set Export">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="export_MOD_1" type="select" label="Select value">
                        <option value="01">01</option>
<option value="12">12</option>
</param>
                        </when>
                      </conditional>
        <param name="export_MOD_2_0" type="text" label="bgz" value="" optional="True" argument="bgz" help=""/>
        <param name="export_MOD_3_0" type="text" label="id-delim=[char]" value="" optional="True" argument="id-delim=[char]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_freq">
                          <param name="CONDITIONAL_SELECT_freq" type="select" label="Set Freq" help="&lt;refbins=[comma-separated bin boundaries] | refbins-file=[filename]&gt; &lt;alt1bins=[comma-separated bin boundaries] | alt1bins-file=[filename]&gt; Empirical allele frequency report.  By default, only founders are considered.  Dosages are taken into account (e.g. heterozygous haploid calls count as 0.5).  chrM dosages are scaled to sum to 2. Supported column sets are: chrom: Chromosome ID. pos: Base-pair coordinate. (ID is always present, and positioned here.) ref: Reference allele. alt1: Alternate allele 1. alt: All alternate alleles, comma-separated. reffreq: Reference allele frequency/dosage. alt1freq: Alt1 frequency/dosage. altfreq: Comma-separated frequencies/dosages for all alternate alleles. freq: Similar to altfreq, except ref is also included at the start. eq: Comma-separated [allele]=[freq] for all present alleles.  (If no          alleles are present, the column contains a single '.'.) eqz: Same as eq, except zero-counts are included. alteq/alteqz: Same as eq/eqz, except reference allele is omitted. numeq: 0=[freq],1=[freq], etc.  Zero-counts are omitted. altnumeq: Same as numeq, except reference allele is omitted. machr2: Empirical divided by theoretical variance quality metric. nobs: Number of allele observations. The default is chrom,ref,alt,altfreq,nobs. Additional .afreq.{ref,alt1}.bins (or .acount.{ref,alt1}.bins with 'counts') file(s) are generated when 'refbins='/'refbins-file=' or 'alt1bins='/'alt1bins-file=' is present; these report the total number of frequencies or counts in each left-closed, right-open interval.  (If you only want these histogram(s), and not the main report, add 'bins-only'.)" argument="--freq">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="freq_MOD_0_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        <param name="freq_MOD_1_0" type="text" label="counts" value="" optional="True" argument="counts" help=""/>
        <param name="freq_MOD_2_0" type="text" label="cols=[column set descriptor]" value="" optional="True" argument="cols=[column set descriptor]" help=""/>
        <param name="freq_MOD_3_0" type="text" label="bins-only" value="" optional="True" argument="bins-only" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_geno_counts">
                          <param name="CONDITIONAL_SELECT_geno_counts" type="select" label="Set Geno counts" help="Hardcall genotype count report (considering both alleles simultaneously in the diploid case).  Nonfounders are now included; use --keep-founders if this is a problem.  Heterozygous haploid calls are treated as missing. Supported column sets are: chrom: Chromosome ID. pos: Base-pair coordinate. (ID is always present, and positioned here.) ref: Reference allele. alt1: Alternate allele 1. alt: All alternate alleles, comma-separated. homref: Homozygous-ref count. refalt1: Heterozygous ref-alt1 count. refalt: Comma-separated het ref-altx counts. homalt1: Homozygous-alt1 count. altxy: Comma-separated altx-alty counts, in (1/1)-(1/2)-(2/2)-(1/3)-...             order. xy: Similar to altxy, except the reference allele is treated as alt0,          and the sequence starts (0/0)-(0/1)-(1/1)-(0/2)-... hapref: Haploid-ref count. hapalt1: Haploid-alt1 count. hapalt: Comma-separated haploid-altx counts. hap: Similar to hapalts, except ref is also included at the start. numeq: 0/0=[hom ref ct],0/1=[het ref-alt1],1/1=[hom alt1],...,0=[hap ref]             etc.  Zero-counts are omitted.  (If all genotypes are missing, the             column contains a single '.'.) missing: Number of missing genotypes. nobs: Number of (nonmissing) genotype observations. The default is chrom,ref,alt,homref,refalt,altxy,hapref,hapalt,missing." argument="--geno-counts">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="geno_counts_MOD_0_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        <param name="geno_counts_MOD_1_0" type="text" label="cols=[column set descriptor]" value="" optional="True" argument="cols=[column set descriptor]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_missing">
                          <param name="CONDITIONAL_SELECT_missing" type="select" label="Set Missing" help="Generate sample- and variant-based missing data reports (or just one report if 'sample-only'/'variant-only' is specified). Supported column sets in the sample-based report are: (FID and IID are always present, and positioned here.) maybesid: SID, if at least one nonmissing value is present. sid: Force SID column to be written even when empty. misspheno1: First active phenotype missing (Y/N)?  Always 'Y' if no                  phenotypes are loaded. missphenos: A Y/N column for each loaded phenotype.  (Can be combined                  with misspheno1 to force at least one such column.) nmissdosage: Number of missing dosages. nmiss: Number of missing hardcalls, not counting het haploids. nmisshh: Number of missing hardcalls, counting het haploids. hethap: Number of heterozygous haploid hardcalls. nobs: Denominator (male count on chrY, otherwise total sample count). fmissdosage: Missing dosage rate. fmiss: Missing hardcall rate, not counting het haploids. fmisshh: Missing hardcall rate, counting het haploids. The default is maybesid,missphenos,nmiss,nobs,fmiss. Supported column sets in the variant-based report are: chrom: Chromosome ID. pos: Base-pair coordinate. (ID is always present, and positioned here.) ref: Reference allele. alt1: Alternate allele 1. alt: All alternate alleles, comma-separated. nmissdosage: Number of missing dosages. nmiss: Number of missing hardcalls, not counting het haploids. nmisshh: Number of missing hardcalls, counting het haploids. hethap: Number of heterozygous haploid calls. nobs: Number of potentially valid calls. fmissdosage: Missing dosage rate. fmiss: Missing hardcall rate, not counting het haploids. fmisshh: Missing hardcall rate, counting het haploids. fhethap: Heterozygous haploid rate. The default is chrom,nmiss,nobs,fmiss." argument="--missing">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="missing_MOD_0_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        <conditional name="CONDITIONAL_missing_MOD_1">
                              <param name="CONDITIONAL_SELECT_missing_MOD_1" type="select" label="How to set Missing">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="missing_MOD_1" type="select" label="Select value">
                        <option value="sample-only">sample-only</option>
<option value="variant-only">variant-only</option>
</param>
                        </when>
                      </conditional>
        <param name="missing_MOD_2_0" type="text" label="scols=[column set descriptor]" value="" optional="True" argument="scols=[column set descriptor]" help=""/>
        <param name="missing_MOD_3_0" type="text" label="vcols=[column set descriptor]" value="" optional="True" argument="vcols=[column set descriptor]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_hardy">
                          <param name="CONDITIONAL_SELECT_hardy" type="select" label="Set Hardy" help="Hardy-Weinberg exact test p-value report(s). * For multiallelic variants, the test is based on the reference allele. * By default, only founders are considered; change this with --nonfounders. * chrX is now omitted from the main {output prefix}.hardy report.  Instead, (if present) it gets its own {output prefix}.hardy.x report based on the method described in Graffelman J, Weir BS (2016) Hardy-Weinberg equilibrium and the X chromosome. * There is currently no special handling of case/control phenotypes. Supported column sets are: chrom: Chromosome ID. pos: Base-pair coordinate. (ID is always present, and positioned here.) ref: Reference allele. alt1: Alternate allele 1. alt: All alternate alleles, comma-separated. gcounts: Hom-ref count, total number of ref-altx heterozygous calls, and               total number of nonmissing calls with no reference allele.  On               chrX, these are followed by male ref and male alt counts. gcount1col: gcounts values in a single comma-separated column. hetfreq: Observed and expected heterozygote frequencies. sexaf: Female and male ref allele frequencies (chrX only). femalep: Female-only p/midp-value (chrX only). p: Hardy-Weinberg equilibrium exact test p/midp-value. The default is chrom,ref,alt,gcounts,hetfreq,sexaf,p." argument="--hardy">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="hardy_MOD_0_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        <param name="hardy_MOD_1_0" type="text" label="midp" value="" optional="True" argument="midp" help=""/>
        <param name="hardy_MOD_2_0" type="text" label="cols=[column set descriptor]" value="" optional="True" argument="cols=[column set descriptor]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_indep_pairwise">
                          <param name="CONDITIONAL_SELECT_indep_pairwise" type="select" label="Set Indep pairwise" help="Generate a list of variants in approximate linkage equilibrium.  With the 'kb' modifier, the window size is in kilobase instead of variant count units.  (Pre-'kb' space is optional, i.e. '--indep-pairwise 500 kb 0.5' and and '--indep-pairwise 500kb 0.5' have the same effect.) The step size now defaults to 1 if it's unspecified, and *must* be 1 if the window is in kilobase units. Note that you need to rerun plink2 using --extract or --exclude on the .prune.in/.prune.out file to apply the list to another computation." argument="--indep-pairwise">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="indep_pairwise_MOD_0_0" type="text" label="window size" value="" optional="False" argument="window size" help=""/>
        <param name="indep_pairwise_MOD_1_0" type="text" label="kb" value="" optional="True" argument="kb" help=""/>
        <param name="indep_pairwise_MOD_2_0" type="text" label="step size (variant ct)" value="" optional="True" argument="step size (variant ct)" help=""/>
        <param name="indep_pairwise_MOD_3_0" type="text" label="unphased-hardcall-r^2 threshold" value="" optional="False" argument="unphased-hardcall-r^2 threshold" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_ld">
                          <param name="CONDITIONAL_SELECT_ld" type="select" label="Set Ld" help="This displays diplotype frequencies, r^2, and D' for a single pair of variants. * Phase information is used when both variants are on the same chromosome. * When there is at least one sample with unphased het calls for both variants, diplotype frequencies are estimated using the Hill equation. If there are multiple biologically possible local maxima, all are displayed, along with HWE exact test statistics. * By default, only hardcalls are considered.  Add the 'dosage' modifier if you want dosages to be taken into account.  (In the diploid case, an unphased dosage of x is interpreted as P(0/0) = 1 - x, P(0/1) = x when x is in 0..1.)  Note that when both an unphased dosage and a phased hardcall are present, this ignores the phased hardcall, which may not be what you want when the dosage is e.g. 0.95..." argument="--ld">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="ld_MOD_0_0" type="text" label="variant ID" value="" optional="False" argument="variant ID" help=""/>
        <param name="ld_MOD_1_0" type="text" label="variant ID" value="" optional="False" argument="variant ID" help=""/>
        <param name="ld_MOD_2_0" type="text" label="dosage" value="" optional="True" argument="dosage" help=""/>
        <param name="ld_MOD_3_0" type="text" label="hwe-midp" value="" optional="True" argument="hwe-midp" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_king">
                          <param name="CONDITIONAL_SELECT_make_king" type="select" label="Set Make king" help="KING-robust kinship estimator, described by Manichaikul A, Mychaleckyj JC, Rich SS, Daly K, Sale M, Chen WM (2010) Robust relationship inference in genome-wide association studies.  By default, this writes a lower-triangular tab-delimited table of kinship coefficients to {output prefix}.king, and a list of the corresponding sample IDs to {output prefix}.king.id.  The first row of the .king file contains a single [genome 1-genome 2] kinship coefficient, the second row has the [genome 1-genome 3] and [genome 2-genome 3] kinship values in that order, etc. * Only autosomes are currently considered. * Pedigree information is currently ignored; the between-family estimator is used for all pairs. * If the 'square' or 'square0' modifier is present, a square matrix is written instead; 'square0' fills the upper right triangle with zeroes. * If the 'zs' modifier is present, the .king file is Zstd-compressed. * If the 'bin' modifier is present, a binary (square) matrix of double-precision floating point values, suitable for loading from R, is instead written to {output prefix}.king.bin.  ('bin4' specifies single-precision numbers instead.)  This can be combined with 'square0' if you still want the upper right zeroed out, or 'triangle' if you don't want to pad the upper right at all. * The computation can be subdivided with --parallel." argument="--make-king">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <conditional name="CONDITIONAL_make_king_MOD_0">
                              <param name="CONDITIONAL_SELECT_make_king_MOD_0" type="select" label="How to set Make king">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="make_king_MOD_0" type="select" label="Select value">
                        <option value="square">square</option>
<option value="square0">square0</option>
<option value="triangle">triangle</option>
</param>
                        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_king_MOD_1">
                              <param name="CONDITIONAL_SELECT_make_king_MOD_1" type="select" label="How to set Make king">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="make_king_MOD_1" type="select" label="Select value">
                        <option value="zs">zs</option>
<option value="bin">bin</option>
<option value="bin4">bin4</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_king_table">
                          <param name="CONDITIONAL_SELECT_make_king_table" type="select" label="Set Make king table" help="Similar to --make-king, except results are reported in the original .kin0 text table format (with minor changes, e.g. row order is more friendly to incremental addition of samples), and --king-table-filter can be used to restrict the report to high kinship values. Supported column sets are: (FID and IID are always present, and positioned here.) maybesid: SID, if at least one nonmissing value is present. sid: Force SID column to be written even when empty. misspheno1: First active phenotype missing (Y/N)?  Always 'Y' if no                  phenotypes are loaded. missphenos: A Y/N column for each loaded phenotype.  (Can be combined                  with misspheno1 to force at least one such column.) id: FID1/ID1/FID2/ID2. maybesid: SID1/SID2, if at least one value is nonmissing.  Must be used                with 'id'. sid: Force SID1/SID2 even when all values are missing. nsnp: Number of variants considered (autosomal, neither call missing). hethet: Proportion/count of considered call pairs which are het-het. ibs0: Proportion/count of considered call pairs which are opposite homs. ibs1: HET1_HOM2 and HET2_HOM1 proportions/counts. kinship: KING-robust between-family kinship estimator. The default is id,maybesid,nsnp,hethet,ibs0,kinship.  hethet/ibs0/ibs1 values are proportions unless the 'counts' modifier is present.  If id is omitted, a .kin0.id file is also written." argument="--make-king-table">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_king_table_MOD_0_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        <param name="make_king_table_MOD_1_0" type="text" label="counts" value="" optional="True" argument="counts" help=""/>
        <param name="make_king_table_MOD_2_0" type="text" label="cols=[column set descriptor]" value="" optional="True" argument="cols=[column set descriptor]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_rel">
                          <param name="CONDITIONAL_SELECT_make_rel" type="select" label="Set Make rel" help="Write a lower-triangular variance-standardized relationship matrix to {output prefix}.rel, and corresponding IDs to {output prefix}.rel.id. * It is usually best to perform this calculation on a variant set in approximate linkage equilibrium, with no very-low-MAF variants. * The 'cov' modifier removes the variance standardization step, causing a covariance matrix to be calculated instead. * The computation can be subdivided with --parallel." argument="--make-rel">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_rel_MOD_0_0" type="text" label="cov" value="" optional="True" argument="cov" help=""/>
        <param name="make_rel_MOD_1_0" type="text" label="meanimpute" value="" optional="True" argument="meanimpute" help=""/>
        <conditional name="CONDITIONAL_make_rel_MOD_2">
                              <param name="CONDITIONAL_SELECT_make_rel_MOD_2" type="select" label="How to set Make rel">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="make_rel_MOD_2" type="select" label="Select value">
                        <option value="square">square</option>
<option value="square0">square0</option>
<option value="triangle">triangle</option>
</param>
                        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_rel_MOD_3">
                              <param name="CONDITIONAL_SELECT_make_rel_MOD_3" type="select" label="How to set Make rel">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="make_rel_MOD_3" type="select" label="Select value">
                        <option value="zs">zs</option>
<option value="bin">bin</option>
<option value="bin4">bin4</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_grm_gz">
                          <param name="CONDITIONAL_SELECT_make_grm_gz" type="select" label="Set Make grm gz" help="" argument="--make-grm-gz">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_grm_gz_MOD_0_0" type="text" label="cov" value="" optional="True" argument="cov" help=""/>
        <param name="make_grm_gz_MOD_1_0" type="text" label="meanimpute" value="" optional="True" argument="meanimpute" help=""/>
        <conditional name="CONDITIONAL_make_grm_gz_MOD_2">
                              <param name="CONDITIONAL_SELECT_make_grm_gz_MOD_2" type="select" label="How to set Make grm gz">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="make_grm_gz_MOD_2" type="select" label="Select value">
                        <option value="no-gz">no-gz</option>
<option value="zs">zs</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_make_grm_bin">
                          <param name="CONDITIONAL_SELECT_make_grm_bin" type="select" label="Set Make grm bin" help="--make-grm-gz causes the relationships to be written to GCTA's original gzipped list format, which describes one pair per line, while --make-grm-bin writes them in GCTA 1.1+'s single-precision triangular binary format.  Note that these formats explicitly report the number of valid observations (where neither sample has a missing call) for each pair, which is useful input for some scripts." argument="--make-grm-bin">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="make_grm_bin_MOD_0_0" type="text" label="cov" value="" optional="True" argument="cov" help=""/>
        <param name="make_grm_bin_MOD_1_0" type="text" label="meanimpute" value="" optional="True" argument="meanimpute" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_OVERLOADED_pca">
                      <param name="CONDITIONAL_OVERLOADED_SELECT_pca" type="select" label="Choose argument form for Pca" help="Overloaded argument, must chose a form">
                <option value="form_0">Form 0</option>
                <option value="form_1">Form 1</option>
                </param>
        <when value="form_0">
                
        <conditional name="CONDITIONAL_pca">
                          <param name="CONDITIONAL_SELECT_pca" type="select" label="Set Pca" help="" argument="--pca">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="pca_MOD_0_0" type="text" label="count" value="" optional="True" argument="count" help=""/>
        <conditional name="CONDITIONAL_pca_MOD_1">
                              <param name="CONDITIONAL_SELECT_pca_MOD_1" type="select" label="How to set Pca">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="pca_MOD_1" type="select" label="Select value">
                        <option value="approx">approx</option>
<option value="meanimpute">meanimpute</option>
</param>
                        </when>
                      </conditional>
        <param name="pca_MOD_2_0" type="text" label="sid" value="" optional="True" argument="sid" help=""/>
        </when>
                      </conditional>
        </when>
        <when value="form_1">
                
        <conditional name="CONDITIONAL_pca">
                          <param name="CONDITIONAL_SELECT_pca" type="select" label="Set Pca" help="Extracts top principal components from the variance-standardized relationship matrix. * It is usually best to perform this calculation on a variant set in approximate linkage equilibrium, with no very-low-MAF variants. * By default, 10 PCs are extracted; you can adjust this by passing a numeric parameter.  (Note that 10 is lower than the PLINK 1.9 default of 20; this is due to the randomized algorithm's memory footprint growing quadratically w.r.t. the PC count.) * The 'approx' modifier causes the standard deterministic computation to be replaced with the randomized algorithm originally implemented for Galinsky KJ, Bhatia G, Loh PR, Georgiev S, Mukherjee S, Patterson NJ, Price AL (2016) Fast Principal-Component Analysis Reveals Convergent Evolution of ADH1B in Europe and East Asia.  This can be a good idea when you have &gt;5k samples. * The randomized algorithm always uses mean imputation for missing genotype calls.  For comparison purposes, you can use the 'meanimpute' modifier to request this behavior for the standard computation. * The 'var-wts' modifier requests an additional .eigenvec.var file with PCs expressed as variant weights instead of sample weights.  When it's present, 'vzs' causes the .eigenvec.var file to be Zstd-compressed. 'vcols' can be used to customize the report columns; supported column sets are: chrom: Chromosome ID. pos: Base-pair coordinate. (ID is always present, and positioned here.) ref: Reference allele. alt1: Alternate allele 1. alt: All alternate alleles, comma-separated. maj: Major allele. nonmaj: All nonmajor alleles, comma-separated. (PCs are always present, and positioned here.  Signs are w.r.t. the major, not necessarily reference, allele.) Default is chrom,maj,nonmaj." argument="--pca">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="pca_MOD_0_0" type="text" label="count" value="" optional="True" argument="count" help=""/>
        <conditional name="CONDITIONAL_pca_MOD_1">
                              <param name="CONDITIONAL_SELECT_pca_MOD_1" type="select" label="How to set Pca">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="pca_MOD_1" type="select" label="Select value">
                        <option value="approx">approx</option>
<option value="meanimpute">meanimpute</option>
</param>
                        </when>
                      </conditional>
        <param name="pca_MOD_2_0" type="text" label="sid" value="" optional="True" argument="sid" help=""/>
        <param name="pca_MOD_3_0" type="text" label="vzs" value="" optional="True" argument="vzs" help=""/>
        <param name="pca_MOD_4_0" type="text" label="vcols=[col set descriptor]" value="" optional="True" argument="vcols=[col set descriptor]" help=""/>
        </when>
                      </conditional>
        </when>
        </conditional>
        <conditional name="CONDITIONAL_king_cutoff">
                          <param name="CONDITIONAL_SELECT_king_cutoff" type="select" label="Set King cutoff" help="Exclude one member of each pair of samples with KING-robust kinship greater than the given threshold.  Remaining/excluded sample IDs are written to {output prefix}.king.cutoff.in + .king.cutoff.out. If present, the .king.bin file must be triangular (either precision is ok)." argument="--king-cutoff">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="king_cutoff_MOD_0_0" type="text" label=".king.bin + .king.id fileset prefix" value="" optional="True" argument=".king.bin + .king.id fileset prefix" help=""/>
        <param name="king_cutoff_MOD_1_0" type="text" label="threshold" value="" optional="False" argument="threshold" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_write_covar">
                          <param name="CONDITIONAL_SELECT_write_covar" type="select" label="Set Write covar" help="If covariates are defined, an updated version (with all filters applied) is automatically written to {output prefix}.cov whenever --make-pgen, --make-just-psam, --export, or a similar command is present.  However, if you do not wish to simultaneously generate a new sample file, you can use --write-covar to just produce a pruned covariate file. Supported column sets are: maybesid: SID, if at least one nonmissing value is present. sid: Force SID column to be written even when empty. maybeparents: Father and mother IIDs, '0' = missing.  Omitted if all                    loaded values are missing. parents: Force PAT and MAT columns to be written even when empty. sex: '1'/'M'/'m' = male, '2'/'F'/'f' = female, 'NA'/'0' = missing. pheno1: First active phenotype.  If none, all column entries are set to              the --output-missing-phenotype string. phenos: All active phenotypes, if any.  (Can be combined with pheno1 to              force at least one phenotype column to be written.) (Covariates are always present, and positioned here.) The default is just maybesid." argument="--write-covar">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="write_covar_MOD_0_0" type="text" label="cols=[column set descriptor]" value="" optional="True" argument="cols=[column set descriptor]" help=""/>
        </when>
                      </conditional>
        <param name="write_samples" type="boolean" label="Write samples" truevalue="--write-samples" falsevalue="" optional="true" argument="--write-samples" help="Report FID/IID (or FID/IID/SID, iff the input .psam file had a SID column) of all samples which pass your filters/inclusion thresholds." checked="False"/>
        <conditional name="CONDITIONAL_write_snplist">
                          <param name="CONDITIONAL_SELECT_write_snplist" type="select" label="Set Write snplist" help="List all variants which pass your filters/inclusion thresholds." argument="--write-snplist">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="write_snplist_MOD_0_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_glm">
                          <param name="CONDITIONAL_SELECT_glm" type="select" label="Set Glm" help="&lt;interaction&gt; &lt;hide-covar&gt; &lt;intercept&gt; &lt;firth-fallback | firth&gt; &lt;cols=[col set descriptor]&gt; &lt;local-covar=[f]&gt; &lt;local-pvar=[f]&gt; &lt;local-psam=[f]&gt; &lt;local-omit-last | local-cats=[category ct]&gt; Basic association analysis on quantitative and/or case/control phenotypes. For each variant, a linear (for quantitative traits) or logistic (for case/control) regression is run with the phenotype as the dependent variable, and alt dosage and a constant-1 column as predictors. * For multiallelic variants, the total alt1 + alt2 + ... dosage is used. * By default, sex (male = 1, female = 2; note that this is a change from PLINK 1.x) is automatically added as a predictor for X chromosome variants, and no others.  The 'sex' modifier causes it to be added everywhere (except chrY), while 'no-x-sex' excludes it entirely. * The 'genotypic' modifier adds an additive effect/dominance deviation 2df joint test (0-2 and 0..1..0 coding), while 'hethom' uses 0..0..1 and 0..1..0 coding instead. * 'dominant' and 'recessive' specify a model assuming full dominance or recessiveness, respectively, for the ref allele.  I.e. the genotype column is recoded as 0..1..1 or 0..0..1, respectively. * 'interaction' adds genotype x covariate interactions to the model. * Additional predictors can be added with --covar.  By default, association statistics are reported for all nonconstant predictors; 'hide-covar' suppresses covariate-only results, while 'intercept' causes intercepts to be reported. * For logistic regression, when the phenotype {quasi-}separates the genotype, an NA result will normally be reported.  To fall back on Firth logistic regression instead when the basic logistic regression fails to converge, add the 'firth-fallback' modifier.  To eliminate the special case and use Firth logistic regression everywhere, add 'firth'. * To add covariates which are not constant across all variants, add the 'local-covar=', 'local-pvar=', and 'local-psam=' modifiers, and use full filenames for each. Normally, the local-covar file should have c * n real-valued columns, where the first c columns correspond to the first sample in the local-psam file, columns (c+1) to 2c correspond to the second sample, etc.; and the mth line correspond to the mth nonheader line of the local-pvar file.  (Variants outside of the local-pvar file are excluded from the regression.)  The local covariates are assigned the names LOCAL1, LOCAL2, etc.; to exclude the last local covariate from the regression (necessary if they are e.g. local ancestry coefficients which sum to 1), add 'local-omit-last'. Alternatively, with 'local-cats=[k]', the local-covar file is expected to have n columns with integer-valued entries in [1, k].  These category assignments are expanded into (k-1) local covariates in the usual manner. The main report supports the following column sets: chrom: Chromosome ID. pos: Base-pair coordinate. (ID is always present, and positioned here.) ref: Reference allele. alt1: Alternate allele 1. alt: All alternate alleles, comma-separated. altcount: Alternate allele count (can be decimal with dosage data). totallele: Allele observation count (can be higher than --freq value, due                 to inclusion of het haploids and chrX model). altcountcc: Alt count in cases, then controls (case/control only). totallelecc: Case and control allele observation counts. gcountcc: Genotype hardcall counts (hom-ref, ref-alt, alt-alt) in cases,                then controls (case/control only). altfreq: alt allele frequency. altfreqcc: alt frequency in cases, then controls (case/control only). machr2: Empirical divided by theoretical variance quality metric. firth: Reports whether Firth regression was used (firth-fallback only). test: Test identifier.  (Required unless only one test is run.) nobs: Number of samples in the regression. beta: Regression coefficient (for alternate allele). orbeta: Odds ratio for case/control, beta for quantitative traits. se: Standard error of beta/odds ratio. ci: Bounds of symmetric approximate confidence interval (requires --ci). t: T-statistic. p: Asymptotic p-value for t-statistic. The default is chrom,pos,ref,alt,firth,test,nobs,orbeta,se,ci,t,p." argument="--glm">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="glm_MOD_0_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        <conditional name="CONDITIONAL_glm_MOD_1">
                              <param name="CONDITIONAL_SELECT_glm_MOD_1" type="select" label="How to set Glm">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="glm_MOD_1" type="select" label="Select value">
                        <option value="sex">sex</option>
<option value="no-x-sex">no-x-sex</option>
</param>
                        </when>
                      </conditional>
        <conditional name="CONDITIONAL_glm_MOD_2">
                              <param name="CONDITIONAL_SELECT_glm_MOD_2" type="select" label="How to set Glm">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="glm_MOD_2" type="select" label="Select value">
                        <option value="genotypic">genotypic</option>
<option value="hethom">hethom</option>
<option value="dominant">dominant</option>
<option value="recessive">recessive</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_score">
                          <param name="CONDITIONAL_SELECT_score" type="select" label="Set Score" help="Apply linear scoring system(s) to each sample. The input file should have one line per scored variant.  Variant IDs are read from column #i and allele codes are read from column #j, where i defaults to 1 and j defaults to i+1. * By default, a single column of input coefficients is read from column #k, where k defaults to j+1.  (--score-number can be used to specify multiple columns.) * The 'header' modifier causes the first nonempty line of the input file to be treated as an ignorable header line, while 'header-read' causes score column header(s) to be read and included in the report. * By default, copies of unnamed alleles contribute zero to score, while missing genotypes contribute an amount proportional to the loaded (via --read-freq) or imputed allele frequency.  To throw out missing observations instead (decreasing the denominator in the final average when this happens), use the 'no-mean-imputation' modifier. * You can use the 'center' modifier to shift all genotypes to mean zero, or 'variance-standardize' to linearly transform the genotypes to mean-0, variance-1.  ('variance-standardize' cannot be used with chrX or MT.) * The 'se' modifier causes the score coefficients to be treated as independent standard errors; in this case, standard errors for the score average/sum are reported.  (Note that this will systematically underestimate standard errors when scored variants are in LD.) * The 'list-variants{-zs}' modifier causes variant IDs used for scoring to be written to [output prefix].sscore.vars{.zst}. The main report supports the following column sets: (FID and IID are always present, and positioned here.) maybesid: SID, if at least one nonmissing value is present. sid: Force SID column to be written even when empty. pheno1: First active phenotype. phenos: All active phenotypes, if any. nmissallele: Number of nonmissing alleles. denom: Denominator of score average (equal to nmissallele value when             'no-mean-imputation' specified) dosagesum: Sum of named allele dosages. scoreavgs: Score averages. scoresums: Score sums. The default is maybesid,phenos,nmissallele,dosagesum,scoreavgs." argument="--score">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="score_MOD_0_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        <param name="score_MOD_1_0" type="text" label="i" value="" optional="True" argument="i" help=""/>
        <param name="score_MOD_2_0" type="text" label="j" value="" optional="True" argument="j" help=""/>
        <param name="score_MOD_3_0" type="text" label="k" value="" optional="True" argument="k" help=""/>
        <conditional name="CONDITIONAL_score_MOD_4">
                              <param name="CONDITIONAL_SELECT_score_MOD_4" type="select" label="How to set Score">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="score_MOD_4" type="select" label="Select value">
                        <option value="header">header</option>
<option value="header-read">header-read</option>
</param>
                        </when>
                      </conditional>
        <param name="score_MOD_5_0" type="text" label="no-mean-imputation" value="" optional="True" argument="no-mean-imputation" help=""/>
        <conditional name="CONDITIONAL_score_MOD_6">
                              <param name="CONDITIONAL_SELECT_score_MOD_6" type="select" label="How to set Score">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="score_MOD_6" type="select" label="Select value">
                        <option value="center">center</option>
<option value="variance-standardize">variance-standardize</option>
</param>
                        </when>
                      </conditional>
        <param name="score_MOD_7_0" type="text" label="se" value="" optional="True" argument="se" help=""/>
        <param name="score_MOD_8_0" type="text" label="zs" value="" optional="True" argument="zs" help=""/>
        <conditional name="CONDITIONAL_score_MOD_9">
                              <param name="CONDITIONAL_SELECT_score_MOD_9" type="select" label="How to set Score">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="score_MOD_9" type="select" label="Select value">
                        <option value="list-variants">list-variants</option>
<option value="list-variants-zs">list-variants-zs</option>
</param>
                        </when>
                      </conditional>
        <param name="score_MOD_10_0" type="text" label="cols=[col set descriptor]" value="" optional="True" argument="cols=[col set descriptor]" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_genotyping_rate">
                          <param name="CONDITIONAL_SELECT_genotyping_rate" type="select" label="Set Genotyping rate" help="Report genotyping rate in log (this was automatic in PLINK 1.x)." argument="--genotyping-rate">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="genotyping_rate_MOD_0_0" type="text" label="dosage" value="" optional="True" argument="dosage" help=""/>
        </when>
                      </conditional>
        <param name="validate" type="boolean" label="Validate" truevalue="--validate" falsevalue="" optional="true" argument="--validate" help="Validates all variant records in a .pgen file." checked="False"/>
        <conditional name="CONDITIONAL_zst_decompress">
                          <param name="CONDITIONAL_SELECT_zst_decompress" type="select" label="Set Zst decompress" help="Decompress a Zstd-compressed file.  If no output filename is specified, the file is decompressed to standard output. This cannot be used with any other flags, and does not cause a log file to be generated." argument="--zst-decompress">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="zst_decompress_MOD_0_0" type="text" label=".zst file" value="" optional="False" argument=".zst file" help=""/>
        <param name="zst_decompress_MOD_1_0" type="text" label="output filename" value="" optional="True" argument="output filename" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_silent">
                          <param name="CONDITIONAL_SELECT_silent" type="select" label="Set Silent" help="Suppress output to console. " argument="--silent">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_input_missing_genotype">
                          <param name="CONDITIONAL_SELECT_input_missing_genotype" type="select" label="Set Input missing genotype" help="'.' is always interpreted as a missing                                 genotype code in input files.  By default, '0'                                 also is; you can change this second missing                                 code with --input-missing-genotype. " argument="--input-missing-genotype">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="input_missing_genotype_MOD_0_0" type="text" label="c" value="" optional="False" argument="c" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_double_id">
                          <param name="CONDITIONAL_SELECT_double_id" type="select" label="Set Double id" help="Set both FIDs and IIDs to the VCF/.bgen sample ID. " argument="--double-id">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_const_fid">
                          <param name="CONDITIONAL_SELECT_const_fid" type="select" label="Set Const fid" help="Set all FIDs to the given constant (default '0'). " argument="--const-fid">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="const_fid_MOD_0_0" type="text" label="ID" value="" optional="True" argument="ID" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_id_delim">
                          <param name="CONDITIONAL_SELECT_id_delim" type="select" label="Set Id delim" help="Parse sample IDs as [FID][d][IID] (or                       [FID][d][IID][d][SID] when delimiter appears twice).                       Default delimiter is '_'. " argument="--id-delim">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="id_delim_MOD_0_0" type="text" label="d" value="" optional="True" argument="d" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_idspace_to">
                          <param name="CONDITIONAL_SELECT_idspace_to" type="select" label="Set Idspace to" help="Convert spaces in VCF/.bgen sample IDs to the given                       character. " argument="--idspace-to">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="idspace_to_MOD_0_0" type="text" label="c" value="" optional="False" argument="c" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_vcf_require_gt">
                          <param name="CONDITIONAL_SELECT_vcf_require_gt" type="select" label="Set Vcf require gt" help="Skip variants with no GT field. " argument="--vcf-require-gt">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_vcf_min_gq">
                          <param name="CONDITIONAL_SELECT_vcf_min_gq" type="select" label="Set Vcf min gq" help="No-call genotypes when GQ is present and below the                       threshold. " argument="--vcf-min-gq">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="vcf_min_gq_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_vcf_min_dp">
                          <param name="CONDITIONAL_SELECT_vcf_min_dp" type="select" label="Set Vcf min dp" help="No-call genotypes when DP is present and below the                       threshold. " argument="--vcf-min-dp">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="vcf_min_dp_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_vcf_half_call">
                          <param name="CONDITIONAL_SELECT_vcf_half_call" type="select" label="Set Vcf half call" help="Specify how '0/.' and similar VCF GT values should be                       handled.  The following four modes are supported:                       * 'error'/'e' (default) errors out and reports line #.                       * 'haploid'/'h' treats them as haploid calls.                       * 'missing'/'m' treats them as missing.                       * 'reference'/'r' treats the missing value as 0. " argument="--vcf-half-call">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="vcf_half_call_MOD_0_0" type="text" label="" value="" optional="False" argument="" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_oxford_single_chr">
                          <param name="CONDITIONAL_SELECT_oxford_single_chr" type="select" label="Set Oxford single chr" help="Specify single-chromosome .gen file with                                    ignorable first column. " argument="--oxford-single-chr">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="oxford_single_chr_MOD_0_0" type="text" label="chr name" value="" optional="False" argument="chr name" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_hard_call_threshold">
                          <param name="CONDITIONAL_SELECT_hard_call_threshold" type="select" label="Set Hard call threshold" help="When importing dosage data, a hardcall is                                    normally saved when the distance from the                                    nearest hardcall, defined as                                      0.5 * sum_i |x_i - round(x_i)|                                    (where the x_i's are 0..2 allele dosages),                                    is not greater than 0.1.  You can adjust                                    this threshold by providing a numeric                                    parameter to --hard-call-threshold.                                    You can also use this with --make-{b}pgen                                    to alter the saved hardcalls while leaving                                    the dosages untouched. " argument="--hard-call-threshold">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="hard_call_threshold_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_dosage_erase_threshold">
                          <param name="CONDITIONAL_SELECT_dosage_erase_threshold" type="select" label="Set Dosage erase threshold" help="--hard-call-threshold normally preserves                                    the original dosages, and several PLINK 2.x                                    commands use them when they're available.                                    Use --dosage-erase-threshold to make PLINK                                    erase dosages and keep only hardcalls when                                    distance-from-hardcall &lt;= the given level. " argument="--dosage-erase-threshold">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="dosage_erase_threshold_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_import_dosage_certainty">
                          <param name="CONDITIONAL_SELECT_import_dosage_certainty" type="select" label="Set Import dosage certainty" help="The PLINK 2.0 file format currently                                    supports a single dosage for each allele.                                    Some other dosage file formats include a                                    separate probability for every possible                                    genotype, e.g. {P(0/0)=0.2, P(0/1)=0.52,                                    P(1/1)=0.28}, a highly uncertain call that                                    is nevertheless treated as a hardcall under                                    '--hard-call-threshold 0.1'.  To make PLINK                                    treat a dosage as missing whenever the                                    largest probability is less than a                                    threshold, use --import-dosage-certainty. " argument="--import-dosage-certainty">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="import_dosage_certainty_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_missing_code">
                          <param name="CONDITIONAL_SELECT_missing_code" type="select" label="Set Missing code" help="Comma-delimited list of missing phenotype (alias: --missing_code)         values for Oxford-format import (default                                    'NA')." argument="--missing-code">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="missing_code_MOD_0_0" type="text" label="string list" value="" optional="True" argument="string list" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_allow_extra_chr">
                          <param name="CONDITIONAL_SELECT_allow_extra_chr" type="select" label="Set Allow extra chr" help="Permit unrecognized chromosome codes (alias --aec). " argument="--allow-extra-chr">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_chr_set">
                          <param name="CONDITIONAL_SELECT_chr_set" type="select" label="Set Chr set" help="Specify a nonhuman chromosome set.  The first parameter sets the number of diploid autosome pairs if positive, or haploid chromosomes if negative. Given diploid autosomes, the remaining modifiers indicate the absence of the named non-autosomal chromosomes." argument="--chr-set">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="chr_set_MOD_0_0" type="text" label="autosome ct" value="" optional="False" argument="autosome ct" help=""/>
        <param name="chr_set_MOD_1_0" type="text" label="no-x" value="" optional="True" argument="no-x" help=""/>
        <param name="chr_set_MOD_2_0" type="text" label="no-y" value="" optional="True" argument="no-y" help=""/>
        <param name="chr_set_MOD_3_0" type="text" label="no-xy" value="" optional="True" argument="no-xy" help=""/>
        <param name="chr_set_MOD_4_0" type="text" label="no-mt" value="" optional="True" argument="no-mt" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_cow">
                          <param name="CONDITIONAL_SELECT_cow" type="select" label="Set Cow" help="Shortcuts for those species. " argument="--cow">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_dog">
                          <param name="CONDITIONAL_SELECT_dog" type="select" label="Set Dog" help="Shortcuts for those species. " argument="--dog">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_horse">
                          <param name="CONDITIONAL_SELECT_horse" type="select" label="Set Horse" help="Shortcuts for those species. " argument="--horse">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_mouse">
                          <param name="CONDITIONAL_SELECT_mouse" type="select" label="Set Mouse" help="Shortcuts for those species. " argument="--mouse">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_rice">
                          <param name="CONDITIONAL_SELECT_rice" type="select" label="Set Rice" help="Shortcuts for those species. " argument="--rice">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_sheep">
                          <param name="CONDITIONAL_SELECT_sheep" type="select" label="Set Sheep" help="Shortcuts for those species. " argument="--sheep">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_autosome_num">
                          <param name="CONDITIONAL_SELECT_autosome_num" type="select" label="Set Autosome num" help="Alias for '--chr-set [value] no-y no-xy no-mt'. " argument="--autosome-num">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="autosome_num_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_human">
                          <param name="CONDITIONAL_SELECT_human" type="select" label="Set Human" help="Explicitly specify human chromosome set, and make                          output .pvar/VCF files include a ##chrSet header                          line.  (.pvar/VCF output files automatically include                          ##chrSet when a nonhuman set is specified.) " argument="--human">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_chr_override">
                          <param name="CONDITIONAL_SELECT_chr_override" type="select" label="Set Chr override" help="By default, if --chr-set/--autosome-num/--human/etc.                          conflict with an input file ##chrSet header line,                          PLINK will error out.  --chr-override with no                          parameter causes the command line to take precedence;                          '--chr-override file' defers to the file. " argument="--chr-override">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="chr_override_MOD_0_0" type="text" label="file" value="" optional="True" argument="file" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_biallelic_only">
                          <param name="CONDITIONAL_SELECT_biallelic_only" type="select" label="Set Biallelic only" help="Skip variants with 2+ alt. alleles. " argument="--biallelic-only">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="biallelic_only_MOD_0_0" type="text" label="strict" value="" optional="True" argument="strict" help=""/>
        <param name="biallelic_only_MOD_1_0" type="text" label="list" value="" optional="True" argument="list" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_var_min_qual">
                          <param name="CONDITIONAL_SELECT_var_min_qual" type="select" label="Set Var min qual" help="Skip variants with low/missing QUAL. " argument="--var-min-qual">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="var_min_qual_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_var_filter">
                          <param name="CONDITIONAL_SELECT_var_filter" type="select" label="Set Var filter" help="Skip variants which have FILTER failures. " argument="--var-filter">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="var_filter_MOD_0_0" type="text" label="exception(s)..." value="" optional="True" argument="exception(s)..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_pheno">
                          <param name="CONDITIONAL_SELECT_pheno" type="select" label="Set Pheno" help="Specify additional phenotype/covariate file. " argument="--pheno">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="pheno_MOD_0_0" type="data" format="plink.pheno" label="filename" multiple="False" optional="False" argument="filename"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_pheno_name">
                          <param name="CONDITIONAL_SELECT_pheno_name" type="select" label="Set Pheno name" help="Only load the designated phenotype(s) from the                       --pheno (if one was specified) or .psam (if no --pheno)                       file.  Separate multiple names with spaces or commas,                       and use dashes to designate ranges. " argument="--pheno-name">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="pheno_name_MOD_0_0" type="text" label="..." value="" optional="False" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_input_missing_phenotype">
                          <param name="CONDITIONAL_SELECT_input_missing_phenotype" type="select" label="Set Input missing phenotype" help="Set number to treat as a missing phenotype in                                  input files (default -9). " argument="--input-missing-phenotype">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="input_missing_phenotype_MOD_0_0" type="text" label="v" value="" optional="False" argument="v" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_GALAXY_1">
                          <param name="CONDITIONAL_SELECT_GALAXY_1" type="select" label="Set 1" help="Expect case/control phenotypes in input files                                  to be coded as 0 = control, 1 = case, instead                                  of the usual 0 = missing, 1 = ctrl, 2 = case. " argument="--1">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_missing_catname">
                          <param name="CONDITIONAL_SELECT_missing_catname" type="select" label="Set Missing catname" help="Set missing-categorical-phenotype string                                  (case-sensitive, default 'NONE'). " argument="--missing-catname">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="missing_catname_MOD_0_0" type="text" label="str" value="" optional="False" argument="str" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_covar">
                          <param name="CONDITIONAL_SELECT_covar" type="select" label="Set Covar" help="Specify additional covariate file. " argument="--covar">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="covar_MOD_0_0" type="data" format="plink.covar" label="filename" multiple="False" optional="False" argument="filename"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_covar_name">
                          <param name="CONDITIONAL_SELECT_covar_name" type="select" label="Set Covar name" help="Only load the designated covariate(s) from the                       --covar (if one was specified), --pheno (if no --covar),                       or .psam (if no --covar or --pheno) file. " argument="--covar-name">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="covar_name_MOD_0_0" type="text" label="..." value="" optional="False" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_within">
                          <param name="CONDITIONAL_SELECT_within" type="select" label="Set Within" help="Import a PLINK 1.x categorical phenotype.                                  (Phenotype name defaults to 'CATPHENO'.)                                  * If any numeric values are present, ALL                                    values must be numeric.  In that case, 'C'                                    is added in front of all category names.                                  * 'NA' is treated as a missing value. " argument="--within">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="within_MOD_0_0" type="data" format="tabular" label="f" multiple="False" optional="False" argument="f"/>
        <param name="within_MOD_1_0" type="text" label="new pheno name" value="" optional="True" argument="new pheno name" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_mwithin">
                          <param name="CONDITIONAL_SELECT_mwithin" type="select" label="Set Mwithin" help="Load --within categories from column n+2. " argument="--mwithin">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="mwithin_MOD_0_0" type="integer" label="n" value="" optional="False" argument="n" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_family">
                          <param name="CONDITIONAL_SELECT_family" type="select" label="Set Family" help="Create a categorical phenotype from FID.                                  Restrictions on and handling of numeric                                  values are the same as for --within. " argument="--family">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="family_MOD_0_0" type="text" label="new pheno name" value="" optional="True" argument="new pheno name" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_family_missing_catname">
                          <param name="CONDITIONAL_SELECT_family_missing_catname" type="select" label="Set Family missing catname" help="Make --family treat the specified FID as                                  missing. " argument="--family-missing-catname">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="family_missing_catname_MOD_0_0" type="text" label="nm" value="" optional="False" argument="nm" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep">
                          <param name="CONDITIONAL_SELECT_keep" type="select" label="Set Keep" help="Exclude all samples not named in a file. " argument="--keep">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="keep_MOD_0_0" type="text" label="sid" value="" optional="True" argument="sid" help=""/>
        <param name="keep_MOD_1_0" type="text" label="fn..." value="" optional="False" argument="fn..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_remove">
                          <param name="CONDITIONAL_SELECT_remove" type="select" label="Set Remove" help="Exclude all samples named in a file. " argument="--remove">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="remove_MOD_0_0" type="text" label="sid" value="" optional="True" argument="sid" help=""/>
        <param name="remove_MOD_1_0" type="text" label="f..." value="" optional="False" argument="f..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_fam">
                          <param name="CONDITIONAL_SELECT_keep_fam" type="select" label="Set Keep fam" help="Exclude all families not named in a file. " argument="--keep-fam">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="keep_fam_MOD_0_0" type="text" label="fname..." value="" optional="False" argument="fname..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_remove_fam">
                          <param name="CONDITIONAL_SELECT_remove_fam" type="select" label="Set Remove fam" help="Exclude all families named in a file. " argument="--remove-fam">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="remove_fam_MOD_0_0" type="text" label="fn..." value="" optional="False" argument="fn..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_extract">
                          <param name="CONDITIONAL_SELECT_extract" type="select" label="Set Extract" help="Exclude all variants not named in a file. " argument="--extract">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="extract_MOD_0_0" type="text" label="range" value="" optional="True" argument="range" help=""/>
        <param name="extract_MOD_1_0" type="text" label="f..." value="" optional="False" argument="f..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_exclude">
                          <param name="CONDITIONAL_SELECT_exclude" type="select" label="Set Exclude" help="Exclude all variants named in a file. " argument="--exclude">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="exclude_MOD_0_0" type="text" label="range" value="" optional="True" argument="range" help=""/>
        <param name="exclude_MOD_1_0" type="text" label="f..." value="" optional="False" argument="f..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_cats">
                          <param name="CONDITIONAL_SELECT_keep_cats" type="select" label="Set Keep cats" help="These can be used individually or in combination " argument="--keep-cats">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="keep_cats_MOD_0_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_cat_names">
                          <param name="CONDITIONAL_SELECT_keep_cat_names" type="select" label="Set Keep cat names" help="" argument="--keep-cat-names">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="keep_cat_names_MOD_0_0" type="text" label="nm..." value="" optional="False" argument="nm..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_cat_pheno">
                          <param name="CONDITIONAL_SELECT_keep_cat_pheno" type="select" label="Set Keep cat pheno" help="If more than one categorical phenotype is loaded,                             or you wish to filter on a categorical covariate,                             --keep-cat-pheno must be used to specify which                             phenotype/covariate --keep-cats and                             --keep-cat-names apply to. " argument="--keep-cat-pheno">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="keep_cat_pheno_MOD_0_0" type="text" label="pheno" value="" optional="False" argument="pheno" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_remove_cats">
                          <param name="CONDITIONAL_SELECT_remove_cats" type="select" label="Set Remove cats" help="Exclude all categories named in the file. " argument="--remove-cats">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="remove_cats_MOD_0_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_remove_cat_names">
                          <param name="CONDITIONAL_SELECT_remove_cat_names" type="select" label="Set Remove cat names" help="Exclude named categories. " argument="--remove-cat-names">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="remove_cat_names_MOD_0_0" type="text" label="..." value="" optional="False" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_remove_cat_pheno">
                          <param name="CONDITIONAL_SELECT_remove_cat_pheno" type="select" label="Set Remove cat pheno" help="Specify pheno for --remove-cats/remove-cat-names. " argument="--remove-cat-pheno">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="remove_cat_pheno_MOD_0_0" type="text" label="phe" value="" optional="False" argument="phe" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_split_cat_pheno">
                          <param name="CONDITIONAL_SELECT_split_cat_pheno" type="select" label="Set Split cat pheno" help="Split n-category phenotype(s) into n (or n-1, with 'omit-last') binary phenotypes, with names of the form [orig. pheno name]=[category name].  (As a consequence, affected phenotypes and categories are not permitted to contain the '=' character.) * This happens after all sample filters. * If no phenotype or covariate names are provided, all categorical phenotypes (but not covariates) are processed. * By default, generated covariates are coded as 1=false, 2=true.  To code them as 0=false, 1=true instead, add the 'covar-01' modifier." argument="--split-cat-pheno">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="split_cat_pheno_MOD_0_0" type="text" label="omit-last" value="" optional="True" argument="omit-last" help=""/>
        <param name="split_cat_pheno_MOD_1_0" type="text" label="covar-01" value="" optional="True" argument="covar-01" help=""/>
        <param name="split_cat_pheno_MOD_2_0" type="text" label="cat. pheno/covar name(s)..." value="" optional="True" argument="cat. pheno/covar name(s)..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_loop_cats">
                          <param name="CONDITIONAL_SELECT_loop_cats" type="select" label="Set Loop cats" help="Run variant filters and subsequent operations on                             just the samples in the first category; then just                             the samples in the second category; and so on, for                             all categories in the named categorical phenotype. " argument="--loop-cats">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="loop_cats_MOD_0_0" type="text" label="pheno/cov" value="" optional="False" argument="pheno/cov" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_variance_standardize">
                          <param name="CONDITIONAL_SELECT_variance_standardize" type="select" label="Set Variance standardize" help="" argument="--variance-standardize">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="variance_standardize_MOD_0_0" type="text" label="pheno/covar name(s)..." value="" optional="True" argument="pheno/covar name(s)..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_covar_variance_standardize">
                          <param name="CONDITIONAL_SELECT_covar_variance_standardize" type="select" label="Set Covar variance standardize" help="Linearly transform named covariates (and quantitative phenotypes, if --variance-standardize) to mean-zero, variance 1.  If no parameters are provided, all possible phenotypes/covariates are affected." argument="--covar-variance-standardize">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="covar_variance_standardize_MOD_0_0" type="text" label="covar name(s)..." value="" optional="True" argument="covar name(s)..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_quantile_normalize">
                          <param name="CONDITIONAL_SELECT_quantile_normalize" type="select" label="Set Quantile normalize" help="Force named covariates and quantitative " argument="--quantile-normalize">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="quantile_normalize_MOD_0_0" type="text" label="..." value="" optional="True" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_pheno_quantile_normalize">
                          <param name="CONDITIONAL_SELECT_pheno_quantile_normalize" type="select" label="Set Pheno quantile normalize" help="" argument="--pheno-quantile-normalize">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="pheno_quantile_normalize_MOD_0_0" type="text" label="..." value="" optional="True" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_covar_quantile_normalize">
                          <param name="CONDITIONAL_SELECT_covar_quantile_normalize" type="select" label="Set Covar quantile normalize" help="" argument="--covar-quantile-normalize">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="covar_quantile_normalize_MOD_0_0" type="text" label="..." value="" optional="True" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_chr">
                          <param name="CONDITIONAL_SELECT_chr" type="select" label="Set Chr" help="Exclude all variants not on the given chromosome(s).                       Valid choices for humans are 0 (unplaced), 1-22, X, Y,                       XY, MT, PAR1, and PAR2.  Separate multiple chromosomes                       with spaces and/or commas, and use a dash (no adjacent                       spaces permitted) to denote a range, e.g.                       '--chr 1-4, 22, par1, x, par2'. " argument="--chr">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="chr_MOD_0_0" type="text" label="chr(s)..." value="" optional="False" argument="chr(s)..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_not_chr">
                          <param name="CONDITIONAL_SELECT_not_chr" type="select" label="Set Not chr" help="Reverse of --chr (exclude variants on listed                       chromosomes). " argument="--not-chr">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="not_chr_MOD_0_0" type="text" label="..." value="" optional="False" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_autosome">
                          <param name="CONDITIONAL_SELECT_autosome" type="select" label="Set Autosome" help="Exclude all non-autosomal variants. " argument="--autosome">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_autosome_par">
                          <param name="CONDITIONAL_SELECT_autosome_par" type="select" label="Set Autosome par" help="Exclude all non-autosomal variants, except those in a                       pseudo-autosomal region. " argument="--autosome-par">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_snps_only">
                          <param name="CONDITIONAL_SELECT_snps_only" type="select" label="Set Snps only" help="Exclude non-SNP variants.  By default, SNP = all                            allele codes are single-character; 'just-acgt'                            restricts SNP codes to {A,C,G,T,a,c,g,t,[missing]}. " argument="--snps-only">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="snps_only_MOD_0_0" type="text" label="just-acgt" value="" optional="True" argument="just-acgt" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_from">
                          <param name="CONDITIONAL_SELECT_from" type="select" label="Set From" help="Use ID(s) to specify a variant range to load.  When used " argument="--from">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="from_MOD_0_0" type="text" label="var ID" value="" optional="False" argument="var ID" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_to">
                          <param name="CONDITIONAL_SELECT_to" type="select" label="Set To" help="" argument="--to">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="to_MOD_0_0" type="text" label="var ID" value="" optional="False" argument="var ID" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_snp">
                          <param name="CONDITIONAL_SELECT_snp" type="select" label="Set Snp" help="Specify a single variant to load. " argument="--snp">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="snp_MOD_0_0" type="text" label="var ID" value="" optional="False" argument="var ID" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_exclude_snp">
                          <param name="CONDITIONAL_SELECT_exclude_snp" type="select" label="Set Exclude snp" help="Specify a single variant to exclude. " argument="--exclude-snp">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="exclude_snp_MOD_0_0" type="text" label="ID" value="" optional="False" argument="ID" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_window">
                          <param name="CONDITIONAL_SELECT_window" type="select" label="Set Window" help="With --snp/--exclude-snp, loads/excludes all variants                       within half the specified kb distance of the named one. " argument="--window">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="window_MOD_0_0" type="text" label="kbs" value="" optional="False" argument="kbs" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_from_bp">
                          <param name="CONDITIONAL_SELECT_from_bp" type="select" label="Set From bp" help="Use base-pair coordinates to define a variant range to " argument="--from-bp">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="from_bp_MOD_0_0" type="text" label="pos" value="" optional="False" argument="pos" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_to_bp">
                          <param name="CONDITIONAL_SELECT_to_bp" type="select" label="Set To bp" help="" argument="--to-bp">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="to_bp_MOD_0_0" type="text" label="pos" value="" optional="False" argument="pos" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_from_kb">
                          <param name="CONDITIONAL_SELECT_from_kb" type="select" label="Set From kb" help="" argument="--from-kb">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="from_kb_MOD_0_0" type="text" label="pos" value="" optional="False" argument="pos" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_to_kb">
                          <param name="CONDITIONAL_SELECT_to_kb" type="select" label="Set To kb" help="" argument="--to-kb">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="to_kb_MOD_0_0" type="text" label="pos" value="" optional="False" argument="pos" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_from_mb">
                          <param name="CONDITIONAL_SELECT_from_mb" type="select" label="Set From mb" help="" argument="--from-mb">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="from_mb_MOD_0_0" type="text" label="pos" value="" optional="False" argument="pos" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_to_mb">
                          <param name="CONDITIONAL_SELECT_to_mb" type="select" label="Set To mb" help="" argument="--to-mb">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="to_mb_MOD_0_0" type="text" label="pos" value="" optional="False" argument="pos" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_snps">
                          <param name="CONDITIONAL_SELECT_snps" type="select" label="Set Snps" help="Use IDs to specify variant range(s) to load or " argument="--snps">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="snps_MOD_0_0" type="text" label="var IDs..." value="" optional="False" argument="var IDs..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_exclude_snps">
                          <param name="CONDITIONAL_SELECT_exclude_snps" type="select" label="Set Exclude snps" help="" argument="--exclude-snps">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="exclude_snps_MOD_0_0" type="text" label="..." value="" optional="False" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_force_intersect">
                          <param name="CONDITIONAL_SELECT_force_intersect" type="select" label="Set Force intersect" help="PLINK 2 normally errors out when multiple variant                         inclusion filters (--extract, --from/--to,                         --from-bp/--to-bp, --snp, --snps) are specified.                         --force-intersect allows the run to proceed; the set                         intersection will be taken. " argument="--force-intersect">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_geno">
                          <param name="CONDITIONAL_SELECT_geno" type="select" label="Set Geno" help="" argument="--geno">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="geno_MOD_0_0" type="text" label="val" value="" optional="True" argument="val" help=""/>
        <conditional name="CONDITIONAL_geno_MOD_1">
                              <param name="CONDITIONAL_SELECT_geno_MOD_1" type="select" label="How to set Geno">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="geno_MOD_1" type="select" label="Select value">
                        <option value="dosage">dosage</option>
<option value="hh-missing">hh-missing</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_mind">
                          <param name="CONDITIONAL_SELECT_mind" type="select" label="Set Mind" help="Exclude variants (--geno) and/or samples (--mind) with missing call frequencies greater than a threshold (default 0.1).  (Note that the default threshold is only applied if --geno/--mind is invoked without a parameter; when --geno/--mind is not invoked, no missing call frequency ceiling is enforced at all.  Other inclusion/exclusion default thresholds work the same way.) By default, when a dosage is present but a hardcall is not, the genotype is treated as missing; add the 'dosage' modifier to treat this case as nonmissing.  Alternatively, you can use 'hh-missing' to also treat heterozygous haploid calls as missing." argument="--mind">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="mind_MOD_0_0" type="text" label="val" value="" optional="True" argument="val" help=""/>
        <conditional name="CONDITIONAL_mind_MOD_1">
                              <param name="CONDITIONAL_SELECT_mind_MOD_1" type="select" label="How to set Mind">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="mind_MOD_1" type="select" label="Select value">
                        <option value="dosage">dosage</option>
<option value="hh-missing">hh-missing</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_require_pheno">
                          <param name="CONDITIONAL_SELECT_require_pheno" type="select" label="Set Require pheno" help="Remove samples missing any of the named " argument="--require-pheno">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="require_pheno_MOD_0_0" type="text" label="name(s)..." value="" optional="True" argument="name(s)..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_require_covar">
                          <param name="CONDITIONAL_SELECT_require_covar" type="select" label="Set Require covar" help="" argument="--require-covar">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="require_covar_MOD_0_0" type="text" label="name(s)..." value="" optional="True" argument="name(s)..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_maf">
                          <param name="CONDITIONAL_SELECT_maf" type="select" label="Set Maf" help="Exclude variants with nonmajor allele frequency lower                       than a threshold (default 0.01). " argument="--maf">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="maf_MOD_0_0" type="float" label="freq" value="" optional="True" argument="freq" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_max_maf">
                          <param name="CONDITIONAL_SELECT_max_maf" type="select" label="Set Max maf" help="Exclude variants with MAF greater than the threshold. " argument="--max-maf">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="max_maf_MOD_0_0" type="float" label="freq" value="" optional="False" argument="freq" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_mac">
                          <param name="CONDITIONAL_SELECT_mac" type="select" label="Set Mac" help="Exclude variants with nonmajor allele dosage lower than                       the given threshold. " argument="--mac">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="mac_MOD_0_0" type="integer" label="ct" value="" optional="False" argument="ct" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_max_mac">
                          <param name="CONDITIONAL_SELECT_max_mac" type="select" label="Set Max mac" help="Exclude variants with nonmajor allele dosage greater                       than the given threshold. " argument="--max-mac">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="max_mac_MOD_0_0" type="integer" label="ct" value="" optional="False" argument="ct" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_maf_succ">
                          <param name="CONDITIONAL_SELECT_maf_succ" type="select" label="Set Maf succ" help="Rule of succession allele frequency estimation (used in                       EIGENSOFT).  Given a j observations of one allele and k                       observations of the other for a biallelic variant, infer                       allele frequencies of (j+1) / (j+k+2) and                       (k+1) / (j+k+2), rather than the default j / (j+k) and                       k / (j+k).                       Note that this does not affect --freq's output. " argument="--maf-succ">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_read_freq">
                          <param name="CONDITIONAL_SELECT_read_freq" type="select" label="Set Read freq" help="Load allele frequency estimates from the given --freq or                       --geno-counts (or PLINK 1.9 --freqx) report, instead of                       imputing them from the immediate dataset. " argument="--read-freq">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="read_freq_MOD_0_0" type="text" label="file" value="" optional="False" argument="file" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_hwe">
                          <param name="CONDITIONAL_SELECT_hwe" type="select" label="Set Hwe" help="Exclude variants with Hardy-Weinberg                                   equilibrium exact test p-values below a                                   threshold.                                   * By default, only founders are considered.                                   * chrX p-values are now computed using                                     Graffelman and Weir's method.                                   * With 'keep-fewhet', variants which fail                                     the test in the too-few-hets direction are                                     not excluded.  (On chrX, this uses the                                     ratio between the Graffelman/Weir p-value                                     and the female-only p-value.)                                   * There is currently no special handling of                                     case/control phenotypes. " argument="--hwe">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="hwe_MOD_0_0" type="float" label="p" value="" optional="False" argument="p" help=""/>
        <param name="hwe_MOD_1_0" type="text" label="midp" value="" optional="True" argument="midp" help=""/>
        <param name="hwe_MOD_2_0" type="text" label="keep-fewhet" value="" optional="True" argument="keep-fewhet" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_mach_r2_filter">
                          <param name="CONDITIONAL_SELECT_mach_r2_filter" type="select" label="Set Mach r2 filter" help="Exclude variants with MaCH                                   empirical-theoretical variance ratio outside                                   of [min, max] (defaults 0.1 and 2.0).                                   * For multiallelic variants, only the                                     ref-nonref dimension is considered.                                   * If a single parameter is provided, it is                                     treated as the minimum. " argument="--mach-r2-filter">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="mach_r2_filter_MOD_0_0" type="text" label="min" value="" optional="True" argument="min" help=""/>
        <param name="mach_r2_filter_MOD_1_0" type="text" label="max" value="" optional="True" argument="max" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_females">
                          <param name="CONDITIONAL_SELECT_keep_females" type="select" label="Set Keep females" help="Exclude male and unknown-sex samples. " argument="--keep-females">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_males">
                          <param name="CONDITIONAL_SELECT_keep_males" type="select" label="Set Keep males" help="Exclude female and unknown-sex samples. " argument="--keep-males">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_nosex">
                          <param name="CONDITIONAL_SELECT_keep_nosex" type="select" label="Set Keep nosex" help="Exclude all known-sex samples. " argument="--keep-nosex">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_remove_females">
                          <param name="CONDITIONAL_SELECT_remove_females" type="select" label="Set Remove females" help="Exclude female samples. " argument="--remove-females">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_remove_males">
                          <param name="CONDITIONAL_SELECT_remove_males" type="select" label="Set Remove males" help="Exclude male samples. " argument="--remove-males">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_remove_nosex">
                          <param name="CONDITIONAL_SELECT_remove_nosex" type="select" label="Set Remove nosex" help="Exclude unknown-sex samples. " argument="--remove-nosex">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_founders">
                          <param name="CONDITIONAL_SELECT_keep_founders" type="select" label="Set Keep founders" help="Exclude nonfounder samples. " argument="--keep-founders">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_nonfounders">
                          <param name="CONDITIONAL_SELECT_keep_nonfounders" type="select" label="Set Keep nonfounders" help="Exclude founder samples. " argument="--keep-nonfounders">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_keep_if">
                          <param name="CONDITIONAL_SELECT_keep_if" type="select" label="Set Keep if" help="Exclude samples which don't/do satisfy a " argument="--keep-if">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="keep_if_MOD_0_0" type="text" label="pheno/covar" value="" optional="False" argument="pheno/covar" help=""/>
        <param name="keep_if_MOD_1_0" type="text" label="op" value="" optional="False" argument="op" help=""/>
        <param name="keep_if_MOD_2_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_remove_if">
                          <param name="CONDITIONAL_SELECT_remove_if" type="select" label="Set Remove if" help="" argument="--remove-if">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="remove_if_MOD_0_0" type="text" label="pheno/covar" value="" optional="False" argument="pheno/covar" help=""/>
        <param name="remove_if_MOD_1_0" type="text" label="op" value="" optional="False" argument="op" help=""/>
        <param name="remove_if_MOD_2_0" type="text" label="v" value="" optional="False" argument="v" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_nonfounders">
                          <param name="CONDITIONAL_SELECT_nonfounders" type="select" label="Set Nonfounders" help="Include nonfounders in allele freq/HWE calculations. " argument="--nonfounders">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_output_chr">
                          <param name="CONDITIONAL_SELECT_output_chr" type="select" label="Set Output chr" help="Set chromosome coding scheme in output files by                           providing the desired human mitochondrial code.                           Options are '26', 'M', 'MT', '0M', 'chr26', 'chrM',                           and 'chrMT'; default is now 'MT' (note that this is                           a change from PLINK 1.x, which defaulted to '26'). " argument="--output-chr">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="output_chr_MOD_0_0" type="text" label="MT code" value="" optional="False" argument="MT code" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_output_missing_genotype">
                          <param name="CONDITIONAL_SELECT_output_missing_genotype" type="select" label="Set Output missing genotype" help="Set the code used to represent missing                                   genotypes in output files (default '.'). " argument="--output-missing-genotype">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="output_missing_genotype_MOD_0_0" type="text" label="ch" value="" optional="False" argument="ch" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_output_missing_phenotype">
                          <param name="CONDITIONAL_SELECT_output_missing_phenotype" type="select" label="Set Output missing phenotype" help="Set the string used to represent missing                                   phenotypes in output files (default 'NA'). " argument="--output-missing-phenotype">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="output_missing_phenotype_MOD_0_0" type="text" label="s" value="" optional="False" argument="s" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_sort_vars">
                          <param name="CONDITIONAL_SELECT_sort_vars" type="select" label="Set Sort vars" help="Sort variants by chromosome, then position, then                            ID.  The following string orders are supported:                            * 'natural'/'n': Natural sort (default).                            * 'ascii'/'a': ASCII.                            This must be used with --make-{b}pgen/--make-bed. " argument="--sort-vars">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="sort_vars_MOD_0_0" type="text" label="mode" value="" optional="True" argument="mode" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_set_hh_missing">
                          <param name="CONDITIONAL_SELECT_set_hh_missing" type="select" label="Set Set hh missing" help="Make --make-{b}pgen/--make-bed set heterozygous                            haploid and female chrY genotypes to missing.                            (Unlike PLINK 1.x, this does not change unknown-sex                            chrY genotypes.) " argument="--set-hh-missing">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_set_mixed_mt_missing">
                          <param name="CONDITIONAL_SELECT_set_mixed_mt_missing" type="select" label="Set Set mixed mt missing" help="Make --make-{b}pgen/--make-bed set mixed MT                            genotypes to missing. " argument="--set-mixed-mt-missing">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_OVERLOADED_split_par">
                      <param name="CONDITIONAL_OVERLOADED_SELECT_split_par" type="select" label="Choose argument form for Split_par" help="Overloaded argument, must chose a form">
                <option value="form_0">Form 0</option>
                <option value="form_1">Form 1</option>
                </param>
        <when value="form_0">
                
        <conditional name="CONDITIONAL_split_par">
                          <param name="CONDITIONAL_SELECT_split_par" type="select" label="Set Split par" help="Changes chromosome code of all X chromosome " argument="--split-par">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="split_par_MOD_0_0" type="text" label="bp1" value="" optional="False" argument="bp1" help=""/>
        <param name="split_par_MOD_1_0" type="text" label="bp2" value="" optional="False" argument="bp2" help=""/>
        </when>
                      </conditional>
        </when>
        <when value="form_1">
                
        <conditional name="CONDITIONAL_split_par">
                          <param name="CONDITIONAL_SELECT_split_par" type="select" label="Set Split par" help="* 'b36'/'hg18' = NCBI 36, 2709521/154584237                            * 'b37'/'hg19' = GRCh37, 2699520/154931044                            * 'b38'/'hg38' = GRCh38, 2781479/155701383 " argument="--split-par">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="split_par_MOD_0_0" type="text" label="build" value="" optional="False" argument="build" help=""/>
        <param name="split_par_MOD_1_0" type="text" label="= bp1 to PAR1, and those                            with position" value="" optional="True" argument="= bp1 to PAR1, and those                            with position" help=""/>
        </when>
                      </conditional>
        </when>
        </conditional>
        <conditional name="CONDITIONAL_merge_par">
                          <param name="CONDITIONAL_SELECT_merge_par" type="select" label="Set Merge par" help='Merge PAR1/PAR2 back with X.  Requires PAR1 to be                            positioned immediately before X, and PAR2 to be                            immediately after X.  (Should *not* be used with                            "--export vcf", since it causes male                            homozygous/missing calls in PAR1/PAR2 to be                            reported as haploid.) ' argument="--merge-par">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_set_missing_var_ids">
                          <param name="CONDITIONAL_SELECT_set_missing_var_ids" type="select" label="Set Set missing var ids" help="Given a template string with a '@' where the " argument="--set-missing-var-ids">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="set_missing_var_ids_MOD_0_0" type="text" label="t" value="" optional="False" argument="t" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_set_all_var_ids">
                          <param name="CONDITIONAL_SELECT_set_all_var_ids" type="select" label="Set Set all var ids" help="" argument="--set-all-var-ids">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="set_all_var_ids_MOD_0_0" type="text" label="t" value="" optional="False" argument="t" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_new_id_max_allele_len">
                          <param name="CONDITIONAL_SELECT_new_id_max_allele_len" type="select" label="Set New id max allele len" help="Specify maximum number of leading characters from allele codes to include in new variant IDs, and behavior on longer codes (defaults 23, error)." argument="--new-id-max-allele-len">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="new_id_max_allele_len_MOD_0_0" type="text" label="len" value="" optional="False" argument="len" help=""/>
        <conditional name="CONDITIONAL_new_id_max_allele_len_MOD_1">
                              <param name="CONDITIONAL_SELECT_new_id_max_allele_len_MOD_1" type="select" label="How to set New id max allele len">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="new_id_max_allele_len_MOD_1" type="select" label="Select value">
                        <option value="error">error</option>
<option value="missing">missing</option>
<option value="truncate">truncate</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_missing_var_code">
                          <param name="CONDITIONAL_SELECT_missing_var_code" type="select" label="Set Missing var code" help="Change unnamed variant code for                               --set-[missing/all]-var-ids (default '.'). " argument="--missing-var-code">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="missing_var_code_MOD_0_0" type="text" label="str" value="" optional="False" argument="str" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_update_sex">
                          <param name="CONDITIONAL_SELECT_update_sex" type="select" label="Set Update sex" help="Update sexes.  Sex (1/M/m = male, 2/F/f = female, 0 =                         missing) is loaded from column n+2 (default n is 1). " argument="--update-sex">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="update_sex_MOD_0_0" type="data" format="txt" label="f" multiple="False" optional="False" argument="f"/>
        <param name="update_sex_MOD_1_0" type="integer" label="n" value="" optional="True" argument="n" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_real_ref_alleles">
                          <param name="CONDITIONAL_SELECT_real_ref_alleles" type="select" label="Set Real ref alleles" help="Treat A2 alleles in a PLINK 1.x fileset as actual ref                       alleles; otherwise they're marked as provisional. " argument="--real-ref-alleles">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_maj_ref">
                          <param name="CONDITIONAL_SELECT_maj_ref" type="select" label="Set Maj ref" help="Set major alleles to reference, like PLINK 1.x                       automatically did.  (Note that this is now opt-in rather                       than opt-out; --keep-allele-order is no longer necessary                       to prevent allele-swapping.)                       * This can only be used in runs with                         --make-bed/--make-{b}pgen/--export and no other                         commands.                       * By default, this only affects variants marked as                         having 'provisional' reference alleles.  Add 'force'                         to apply this to all variants.                       * All new reference alleles are marked as provisional. " argument="--maj-ref">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="maj_ref_MOD_0_0" type="text" label="force" value="" optional="True" argument="force" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_ref_allele">
                          <param name="CONDITIONAL_SELECT_ref_allele" type="select" label="Set Ref allele" help="" argument="--ref-allele">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="ref_allele_MOD_0_0" type="text" label="force" value="" optional="True" argument="force" help=""/>
        <param name="ref_allele_MOD_1_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        <param name="ref_allele_MOD_2_0" type="text" label="refcol" value="" optional="True" argument="refcol" help=""/>
        <param name="ref_allele_MOD_3_0" type="text" label="IDcol" value="" optional="True" argument="IDcol" help=""/>
        <param name="ref_allele_MOD_4_0" type="text" label="skip" value="" optional="True" argument="skip" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_alt1_allele">
                          <param name="CONDITIONAL_SELECT_alt1_allele" type="select" label="Set Alt1 allele" help="These set the alleles specified in the file to ref (--ref-allele) or alt1 (--alt1-allele).  They can be combined in the same run. * These can only be used in runs with --make-bed/--make-{b}pgen/--export and no other commands. * &quot;--ref-allele [VCF filename] 4 3 '#'&quot;, which scrapes reference allele assignments from a VCF file, is especially useful. * By default, these error out when asked to change a 'known' reference allele.  Add 'force' to permit this (when e.g. switching to a new reference genome). * When --alt1-allele changes the previous ref allele to alt1, the previous alt1 allele is set to reference and marked as provisional." argument="--alt1-allele">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="alt1_allele_MOD_0_0" type="text" label="force" value="" optional="True" argument="force" help=""/>
        <param name="alt1_allele_MOD_1_0" type="data" format="txt" label="filename" multiple="False" optional="False" argument="filename"/>
        <param name="alt1_allele_MOD_2_0" type="text" label="alt1col" value="" optional="True" argument="alt1col" help=""/>
        <param name="alt1_allele_MOD_3_0" type="text" label="IDcol" value="" optional="True" argument="IDcol" help=""/>
        <param name="alt1_allele_MOD_4_0" type="text" label="skip" value="" optional="True" argument="skip" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_ref_from_fa">
                          <param name="CONDITIONAL_SELECT_ref_from_fa" type="select" label="Set Ref from fa" help="This sets reference alleles from the given FASTA                               file when it can be done unambiguously (note                               that it's never possible for deletions or some                               insertions).  By default, it errors out when                               asked to change a 'known' reference allele; add                               the 'force' modifier to permit this. " argument="--ref-from-fa">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="ref_from_fa_MOD_0_0" type="data" format="txt" label="fn" multiple="False" optional="False" argument="fn"/>
        <param name="ref_from_fa_MOD_1_0" type="text" label="force" value="" optional="True" argument="force" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_indiv_sort">
                          <param name="CONDITIONAL_SELECT_indiv_sort" type="select" label="Set Indiv sort" help="Specify FID/IID(/SID) sort order for merge and                               --make-{b}pgen/--make-bed.  The following four                               modes are supported:                               * 'none'/'0' keeps samples in the order they                                 were loaded.  Default for non-merge.                               * 'natural'/'n' invokes &quot;natural sort&quot;, e.g.                                 'id2' &lt; 'ID3' &lt; 'id10'.  Default when merging.                               * 'ascii'/'a' sorts in ASCII order, e.g.                                 'ID3' &lt; 'id10' &lt; 'id2'.                               * 'file'/'f' uses the order in the given file                                 (named in the last parameter).  The 'sid'                                 modifier has the usual effect when this mode                                 is requested. " argument="--indiv-sort">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="indiv_sort_MOD_0_0" type="text" label="m" value="" optional="False" argument="m" help=""/>
        <param name="indiv_sort_MOD_1_0" type="text" label="sid" value="" optional="True" argument="sid" help=""/>
        <param name="indiv_sort_MOD_2_0" type="data" format="txt" label="f" multiple="False" optional="True" argument="f"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_king_table_filter">
                          <param name="CONDITIONAL_SELECT_king_table_filter" type="select" label="Set King table filter" help="Specify minimum kinship coefficient for                               inclusion in --make-king-table report. " argument="--king-table-filter">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="king_table_filter_MOD_0_0" type="text" label="min" value="" optional="False" argument="min" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_condition">
                          <param name="CONDITIONAL_SELECT_condition" type="select" label="Set Condition" help="Add one variant's alt1 dosages                                                as a --glm covariate. " argument="--condition">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="condition_MOD_0_0" type="text" label="var ID" value="" optional="False" argument="var ID" help=""/>
        <conditional name="CONDITIONAL_condition_MOD_1">
                              <param name="CONDITIONAL_SELECT_condition_MOD_1" type="select" label="How to set Condition">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="condition_MOD_1" type="select" label="Select value">
                        <option value="dominant">dominant</option>
<option value="recessive">recessive</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_condition_list">
                          <param name="CONDITIONAL_SELECT_condition_list" type="select" label="Set Condition list" help="Add all variants in the file as                                                --glm covariates. " argument="--condition-list">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="condition_list_MOD_0_0" type="data" format="txt" label="f" multiple="False" optional="False" argument="f"/>
        <conditional name="CONDITIONAL_condition_list_MOD_1">
                              <param name="CONDITIONAL_SELECT_condition_list_MOD_1" type="select" label="How to set Condition list">
                                  <option value="no_set" selected="True">Don't set</option>
                                  <option value="from_list">Select from list</option>
                                  
                              </param>
                              <when value="no_set">
                              </when>
                              
                              <when value="from_list">
                                  <param name="condition_list_MOD_1" type="select" label="Select value">
                        <option value="dominant">dominant</option>
<option value="recessive">recessive</option>
</param>
                        </when>
                      </conditional>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_parameters">
                          <param name="CONDITIONAL_SELECT_parameters" type="select" label="Set Parameters" help="Include only the given covariates/interactions in the                       --glm model, identified by a list of 1-based indices                       and/or ranges of them. " argument="--parameters">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="parameters_MOD_0_0" type="text" label="..." value="" optional="False" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_vif">
                          <param name="CONDITIONAL_SELECT_vif" type="select" label="Set Vif" help="Set VIF threshold for --glm multicollinearity check                       (default 50).  (This is no longer skipped for                       case/control phenotypes.) " argument="--vif">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="vif_MOD_0_0" type="text" label="max VIF" value="" optional="False" argument="max VIF" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_max_corr">
                          <param name="CONDITIONAL_SELECT_max_corr" type="select" label="Set Max corr" help="Skip --glm regression when the absolute value of the                       correlation between two predictors exceeds this value                       (default 0.999). " argument="--max-corr">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="max_corr_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_xchr_model">
                          <param name="CONDITIONAL_SELECT_xchr_model" type="select" label="Set Xchr model" help="Set the chrX --glm/--score model.                       * '0' = skip chrX.                       * '1' = add sex as a covar on chrX, code males 0..1.                       * '2' (default) = chrX sex covar, code males 0..2.                       (Use the --glm 'interaction' modifier to test for                       interaction between genotype and sex.) " argument="--xchr-model">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="xchr_model_MOD_0_0" type="text" label="m" value="" optional="False" argument="m" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_ci">
                          <param name="CONDITIONAL_SELECT_ci" type="select" label="Set Ci" help="Report confidence ratios for odds ratios/betas. " argument="--ci">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="ci_MOD_0_0" type="text" label="size" value="" optional="False" argument="size" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_pfilter">
                          <param name="CONDITIONAL_SELECT_pfilter" type="select" label="Set Pfilter" help="Filter out assoc. test results with higher p-values. " argument="--pfilter">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="pfilter_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_score_col_nums">
                          <param name="CONDITIONAL_SELECT_score_col_nums" type="select" label="Set Score col nums" help="Process all the specified coefficient columns in the                           --score file, identified by 1-based indexes and/or                           ranges of them. " argument="--score-col-nums">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="score_col_nums_MOD_0_0" type="text" label="..." value="" optional="False" argument="..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_memory">
                          <param name="CONDITIONAL_SELECT_memory" type="select" label="Set Memory" help="Set size, in MB, of initial workspace malloc                             attempt.  To error out instead of reducing the                             request size when the initial attempt fails, add                             the 'require' modifier. " argument="--memory">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="memory_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        <param name="memory_MOD_1_0" type="text" label="require" value="" optional="True" argument="require" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_threads">
                          <param name="CONDITIONAL_SELECT_threads" type="select" label="Set Threads" help="Set maximum number of compute threads. " argument="--threads">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="threads_MOD_0_0" type="text" label="val" value="" optional="False" argument="val" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_seed">
                          <param name="CONDITIONAL_SELECT_seed" type="select" label="Set Seed" help='Set random number seed(s).  Each value must be an                       integer between 0 and 4294967295 inclusive.                       Note that --threads and "--memory require" may also be                       needed to reproduce some randomized runs. ' argument="--seed">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="seed_MOD_0_0" type="text" label="val..." value="" optional="False" argument="val..." help="Multiple values are allowed"/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_output_min_p">
                          <param name="CONDITIONAL_SELECT_output_min_p" type="select" label="Set Output min p" help="Specify minimum p-value to write to reports. " argument="--output-min-p">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        <param name="output_min_p_MOD_0_0" type="float" label="p" value="" optional="False" argument="p" help=""/>
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_debug">
                          <param name="CONDITIONAL_SELECT_debug" type="select" label="Set Debug" help="Use slower, more crash-resistant logging method. " argument="--debug">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_randmem">
                          <param name="CONDITIONAL_SELECT_randmem" type="select" label="Set Randmem" help="Randomize initial workspace memory (helps catch                       uninitialized-memory bugs). " argument="--randmem">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
        <conditional name="CONDITIONAL_warning_errcode">
                          <param name="CONDITIONAL_SELECT_warning_errcode" type="select" label="Set Warning errcode" help="Return a nonzero error code to the OS when a run                       completes with warning(s). " argument="--warning-errcode">
                              <option value="no_set" selected="True">Don't set</option>
                              <option value="set">Set value(s)</option>
                          </param>
                          <when value="no_set">
                          </when>
                          <when value="set">
                    
        </when>
                      </conditional>
    </inputs>
    <outputs>
        <data name="OUTPUT_plink_adjusted" format="plink.adjusted" label="${tool.name} on ${on_string}: plink.adjusted" from_work_dir="plink.adjusted" hidden="True"/>
        <data name="OUTPUT_plink_allele_no_snp" format="plink.allele.no.snp" label="${tool.name} on ${on_string}: plink.allele.no.snp" from_work_dir="plink.allele.no.snp" hidden="True"/>
        <data name="OUTPUT_plink_annot" format="plink.annot" label="${tool.name} on ${on_string}: plink.annot" from_work_dir="plink.annot" hidden="True"/>
        <data name="OUTPUT_plink_assoc" format="plink.assoc" label="${tool.name} on ${on_string}: plink.assoc" from_work_dir="plink.assoc" hidden="True"/>
        <data name="OUTPUT_plink_assoc_dosage" format="plink.assoc.dosage" label="${tool.name} on ${on_string}: plink.assoc.dosage" from_work_dir="plink.assoc.dosage" hidden="True"/>
        <data name="OUTPUT_plink_assoc_fisher" format="plink.assoc.fisher" label="${tool.name} on ${on_string}: plink.assoc.fisher" from_work_dir="plink.assoc.fisher" hidden="True"/>
        <data name="OUTPUT_plink_assoc_linear" format="plink.assoc.linear" label="${tool.name} on ${on_string}: plink.assoc.linear" from_work_dir="plink.assoc.linear" hidden="True"/>
        <data name="OUTPUT_plink_assoc_logistic" format="plink.assoc.logistic" label="${tool.name} on ${on_string}: plink.assoc.logistic" from_work_dir="plink.assoc.logistic" hidden="True"/>
        <data name="OUTPUT_plink_auto_R" format="plink.auto.R" label="${tool.name} on ${on_string}: plink.auto.R" from_work_dir="plink.auto.R" hidden="True"/>
        <data name="OUTPUT_plink_beagle_dat" format="plink.beagle.dat" label="${tool.name} on ${on_string}: plink.beagle.dat" from_work_dir="plink.beagle.dat" hidden="True"/>
        <data name="OUTPUT_plink_bed" format="plink.bed" label="${tool.name} on ${on_string}: plink.bed" from_work_dir="plink.bed" hidden="True"/>
        <data name="OUTPUT_plink_bed_vmaj" format="plink.bed.vmaj" label="${tool.name} on ${on_string}: plink.bed.vmaj" from_work_dir="plink.bed.vmaj" hidden="True"/>
        <data name="OUTPUT_plink_bim" format="plink.bim" label="${tool.name} on ${on_string}: plink.bim" from_work_dir="plink.bim" hidden="True"/>
        <collection name="OUTPUT_plink___bin" type="list" label="plink.*.bin" hidden="True">
                        <discover_datasets pattern="plink\.(?P&lt;name&gt;)\.bin" format="plink.*.bin"/>
                        </collection>
        <collection name="OUTPUT_plink_blocks_" type="list" label="plink.blocks*" hidden="True">
                        <discover_datasets pattern="plink\.blocks(?P&lt;name&gt;)" format="plink.blocks*"/>
                        </collection>
        <collection name="OUTPUT_plink_chr___dat" type="list" label="plink.chr-*.dat" hidden="True">
                        <discover_datasets pattern="plink\.chr\-(?P&lt;name&gt;)\.dat" format="plink.chr-*.dat"/>
                        </collection>
        <collection name="OUTPUT_plink_chr___map" type="list" label="plink.chr-*.map" hidden="True">
                        <discover_datasets pattern="plink\.chr\-(?P&lt;name&gt;)\.map" format="plink.chr-*.map"/>
                        </collection>
        <data name="OUTPUT_plink_clst" format="plink.clst" label="${tool.name} on ${on_string}: plink.clst" from_work_dir="plink.clst" hidden="True"/>
        <collection name="OUTPUT_plink_clumped_" type="list" label="plink.clumped*" hidden="True">
                        <discover_datasets pattern="plink\.clumped(?P&lt;name&gt;)" format="plink.clumped*"/>
                        </collection>
        <collection name="OUTPUT_plink_cluster_" type="list" label="plink.cluster*" hidden="True">
                        <discover_datasets pattern="plink\.cluster(?P&lt;name&gt;)" format="plink.cluster*"/>
                        </collection>
        <data name="OUTPUT_plink_cmh" format="plink.cmh" label="${tool.name} on ${on_string}: plink.cmh" from_work_dir="plink.cmh" hidden="True"/>
        <data name="OUTPUT_plink_cmh2" format="plink.cmh2" label="${tool.name} on ${on_string}: plink.cmh2" from_work_dir="plink.cmh2" hidden="True"/>
        <data name="OUTPUT_plink_cnv_overlap" format="plink.cnv.overlap" label="${tool.name} on ${on_string}: plink.cnv.overlap" from_work_dir="plink.cnv.overlap" hidden="True"/>
        <data name="OUTPUT_plink_cnv_summary" format="plink.cnv.summary" label="${tool.name} on ${on_string}: plink.cnv.summary" from_work_dir="plink.cnv.summary" hidden="True"/>
        <data name="OUTPUT_plink_cov" format="plink.cov" label="${tool.name} on ${on_string}: plink.cov" from_work_dir="plink.cov" hidden="True"/>
        <data name="OUTPUT_plink_debug_R" format="plink.debug.R" label="${tool.name} on ${on_string}: plink.debug.R" from_work_dir="plink.debug.R" hidden="True"/>
        <data name="OUTPUT_plink_dfam" format="plink.dfam" label="${tool.name} on ${on_string}: plink.dfam" from_work_dir="plink.dfam" hidden="True"/>
        <data name="OUTPUT_plink_diff" format="plink.diff" label="${tool.name} on ${on_string}: plink.diff" from_work_dir="plink.diff" hidden="True"/>
        <data name="OUTPUT_plink_dist" format="plink.dist" label="${tool.name} on ${on_string}: plink.dist" from_work_dir="plink.dist" hidden="True"/>
        <data name="OUTPUT_plink_dupvar" format="plink.dupvar" label="${tool.name} on ${on_string}: plink.dupvar" from_work_dir="plink.dupvar" hidden="True"/>
        <data name="OUTPUT_plink_eigenval" format="plink.eigenval" label="${tool.name} on ${on_string}: plink.eigenval" from_work_dir="plink.eigenval" hidden="True"/>
        <collection name="OUTPUT_plink_eigenvec_" type="list" label="plink.eigenvec*" hidden="True">
                        <discover_datasets pattern="plink\.eigenvec(?P&lt;name&gt;)" format="plink.eigenvec*"/>
                        </collection>
        <collection name="OUTPUT_plink_epi__" type="list" label="plink.epi.*" hidden="True">
                        <discover_datasets pattern="plink\.epi\.(?P&lt;name&gt;)" format="plink.epi.*"/>
                        </collection>
        <data name="OUTPUT_plink_fam" format="plink.fam" label="${tool.name} on ${on_string}: plink.fam" from_work_dir="plink.fam" hidden="True"/>
        <collection name="OUTPUT_plink_flipscan_" type="list" label="plink.flipscan*" hidden="True">
                        <discover_datasets pattern="plink\.flipscan(?P&lt;name&gt;)" format="plink.flipscan*"/>
                        </collection>
        <data name="OUTPUT_plink_frq" format="plink.frq" label="${tool.name} on ${on_string}: plink.frq" from_work_dir="plink.frq" hidden="True"/>
        <data name="OUTPUT_plink_frq_cc" format="plink.frq.cc" label="${tool.name} on ${on_string}: plink.frq.cc" from_work_dir="plink.frq.cc" hidden="True"/>
        <data name="OUTPUT_plink_frq_count" format="plink.frq.count" label="${tool.name} on ${on_string}: plink.frq.count" from_work_dir="plink.frq.count" hidden="True"/>
        <data name="OUTPUT_plink_frq_strat" format="plink.frq.strat" label="${tool.name} on ${on_string}: plink.frq.strat" from_work_dir="plink.frq.strat" hidden="True"/>
        <data name="OUTPUT_plink_frqx" format="plink.frqx" label="${tool.name} on ${on_string}: plink.frqx" from_work_dir="plink.frqx" hidden="True"/>
        <data name="OUTPUT_plink_fst" format="plink.fst" label="${tool.name} on ${on_string}: plink.fst" from_work_dir="plink.fst" hidden="True"/>
        <data name="OUTPUT_plink_gen" format="plink.gen" label="${tool.name} on ${on_string}: plink.gen" from_work_dir="plink.gen" hidden="True"/>
        <data name="OUTPUT_plink_genome" format="plink.genome" label="${tool.name} on ${on_string}: plink.genome" from_work_dir="plink.genome" hidden="True"/>
        <data name="OUTPUT_plink_gplink" format="plink.gplink" label="${tool.name} on ${on_string}: plink.gplink" from_work_dir="plink.gplink" hidden="True"/>
        <data name="OUTPUT_plink_grm" format="plink.grm" label="${tool.name} on ${on_string}: plink.grm" from_work_dir="plink.grm" hidden="True"/>
        <data name="OUTPUT_plink_grm_N_bin" format="plink.grm.N.bin" label="${tool.name} on ${on_string}: plink.grm.N.bin" from_work_dir="plink.grm.N.bin" hidden="True"/>
        <data name="OUTPUT_plink_grm_bin" format="plink.grm.bin" label="${tool.name} on ${on_string}: plink.grm.bin" from_work_dir="plink.grm.bin" hidden="True"/>
        <data name="OUTPUT_plink_grm_id" format="plink.grm.id" label="${tool.name} on ${on_string}: plink.grm.id" from_work_dir="plink.grm.id" hidden="True"/>
        <collection name="OUTPUT_plink___gz" type="list" label="plink.*.gz" hidden="True">
                        <discover_datasets pattern="plink\.(?P&lt;name&gt;)\.gz" format="plink.*.gz"/>
                        </collection>
        <data name="OUTPUT_plink_het" format="plink.het" label="${tool.name} on ${on_string}: plink.het" from_work_dir="plink.het" hidden="True"/>
        <data name="OUTPUT_plink_hh" format="plink.hh" label="${tool.name} on ${on_string}: plink.hh" from_work_dir="plink.hh" hidden="True"/>
        <data name="OUTPUT_plink_hom" format="plink.hom" label="${tool.name} on ${on_string}: plink.hom" from_work_dir="plink.hom" hidden="True"/>
        <data name="OUTPUT_plink_hom_indiv" format="plink.hom.indiv" label="${tool.name} on ${on_string}: plink.hom.indiv" from_work_dir="plink.hom.indiv" hidden="True"/>
        <collection name="OUTPUT_plink_hom_overlap_" type="list" label="plink.hom.overlap*" hidden="True">
                        <discover_datasets pattern="plink\.hom\.overlap(?P&lt;name&gt;)" format="plink.hom.overlap*"/>
                        </collection>
        <data name="OUTPUT_plink_hom_summary" format="plink.hom.summary" label="${tool.name} on ${on_string}: plink.hom.summary" from_work_dir="plink.hom.summary" hidden="True"/>
        <data name="OUTPUT_plink_homog" format="plink.homog" label="${tool.name} on ${on_string}: plink.homog" from_work_dir="plink.homog" hidden="True"/>
        <data name="OUTPUT_plink_hwe" format="plink.hwe" label="${tool.name} on ${on_string}: plink.hwe" from_work_dir="plink.hwe" hidden="True"/>
        <data name="OUTPUT_plink_ibc" format="plink.ibc" label="${tool.name} on ${on_string}: plink.ibc" from_work_dir="plink.ibc" hidden="True"/>
        <collection name="OUTPUT_plink___id" type="list" label="plink.*.id" hidden="True">
                        <discover_datasets pattern="plink\.(?P&lt;name&gt;)\.id" format="plink.*.id"/>
                        </collection>
        <data name="OUTPUT_plink_imiss" format="plink.imiss" label="${tool.name} on ${on_string}: plink.imiss" from_work_dir="plink.imiss" hidden="True"/>
        <data name="OUTPUT_plink_indel" format="plink.indel" label="${tool.name} on ${on_string}: plink.indel" from_work_dir="plink.indel" hidden="True"/>
        <data name="OUTPUT_plink_info" format="plink.info" label="${tool.name} on ${on_string}: plink.info" from_work_dir="plink.info" hidden="True"/>
        <data name="OUTPUT_plink_irem" format="plink.irem" label="${tool.name} on ${on_string}: plink.irem" from_work_dir="plink.irem" hidden="True"/>
        <data name="OUTPUT_plink_lasso" format="plink.lasso" label="${tool.name} on ${on_string}: plink.lasso" from_work_dir="plink.lasso" hidden="True"/>
        <data name="OUTPUT_plink_ld" format="plink.ld" label="${tool.name} on ${on_string}: plink.ld" from_work_dir="plink.ld" hidden="True"/>
        <data name="OUTPUT_plink_ldset" format="plink.ldset" label="${tool.name} on ${on_string}: plink.ldset" from_work_dir="plink.ldset" hidden="True"/>
        <data name="OUTPUT_plink_lgen" format="plink.lgen" label="${tool.name} on ${on_string}: plink.lgen" from_work_dir="plink.lgen" hidden="True"/>
        <data name="OUTPUT_plink_list" format="plink.list" label="${tool.name} on ${on_string}: plink.list" from_work_dir="plink.list" hidden="True"/>
        <data name="OUTPUT_plink_lmiss" format="plink.lmiss" label="${tool.name} on ${on_string}: plink.lmiss" from_work_dir="plink.lmiss" hidden="True"/>
        <data name="OUTPUT_plink_map" format="plink.map" label="${tool.name} on ${on_string}: plink.map" from_work_dir="plink.map" hidden="True"/>
        <data name="OUTPUT_plink_mdist" format="plink.mdist" label="${tool.name} on ${on_string}: plink.mdist" from_work_dir="plink.mdist" hidden="True"/>
        <data name="OUTPUT_plink_mdist_missing" format="plink.mdist.missing" label="${tool.name} on ${on_string}: plink.mdist.missing" from_work_dir="plink.mdist.missing" hidden="True"/>
        <data name="OUTPUT_plink_mds" format="plink.mds" label="${tool.name} on ${on_string}: plink.mds" from_work_dir="plink.mds" hidden="True"/>
        <data name="OUTPUT_plink_mds_eigvals" format="plink.mds.eigvals" label="${tool.name} on ${on_string}: plink.mds.eigvals" from_work_dir="plink.mds.eigvals" hidden="True"/>
        <collection name="OUTPUT_plink__mendel" type="list" label="plink.*mendel" hidden="True">
                        <discover_datasets pattern="plink\.(?P&lt;name&gt;)mendel" format="plink.*mendel"/>
                        </collection>
        <data name="OUTPUT_plink_meta" format="plink.meta" label="${tool.name} on ${on_string}: plink.meta" from_work_dir="plink.meta" hidden="True"/>
        <data name="OUTPUT_plink_mibs" format="plink.mibs" label="${tool.name} on ${on_string}: plink.mibs" from_work_dir="plink.mibs" hidden="True"/>
        <data name="OUTPUT_plink_missing" format="plink.missing" label="${tool.name} on ${on_string}: plink.missing" from_work_dir="plink.missing" hidden="True"/>
        <data name="OUTPUT_plink_missing_hap" format="plink.missing.hap" label="${tool.name} on ${on_string}: plink.missing.hap" from_work_dir="plink.missing.hap" hidden="True"/>
        <data name="OUTPUT_plink_missnp" format="plink.missnp" label="${tool.name} on ${on_string}: plink.missnp" from_work_dir="plink.missnp" hidden="True"/>
        <data name="OUTPUT_plink_model" format="plink.model" label="${tool.name} on ${on_string}: plink.model" from_work_dir="plink.model" hidden="True"/>
        <data name="OUTPUT_plink_mperm" format="plink.mperm" label="${tool.name} on ${on_string}: plink.mperm" from_work_dir="plink.mperm" hidden="True"/>
        <data name="OUTPUT_plink_nearest" format="plink.nearest" label="${tool.name} on ${on_string}: plink.nearest" from_work_dir="plink.nearest" hidden="True"/>
        <data name="OUTPUT_plink_nopred" format="plink.nopred" label="${tool.name} on ${on_string}: plink.nopred" from_work_dir="plink.nopred" hidden="True"/>
        <data name="OUTPUT_plink_nosex" format="plink.nosex" label="${tool.name} on ${on_string}: plink.nosex" from_work_dir="plink.nosex" hidden="True"/>
        <data name="OUTPUT_plink_occur_dosage" format="plink.occur.dosage" label="${tool.name} on ${on_string}: plink.occur.dosage" from_work_dir="plink.occur.dosage" hidden="True"/>
        <data name="OUTPUT_plink_out_dosage" format="plink.out.dosage" label="${tool.name} on ${on_string}: plink.out.dosage" from_work_dir="plink.out.dosage" hidden="True"/>
        <data name="OUTPUT_plink_ped" format="plink.ped" label="${tool.name} on ${on_string}: plink.ped" from_work_dir="plink.ped" hidden="True"/>
        <data name="OUTPUT_plink_perm" format="plink.perm" label="${tool.name} on ${on_string}: plink.perm" from_work_dir="plink.perm" hidden="True"/>
        <data name="OUTPUT_plink_pphe" format="plink.pphe" label="${tool.name} on ${on_string}: plink.pphe" from_work_dir="plink.pphe" hidden="True"/>
        <data name="OUTPUT_plink_prob" format="plink.prob" label="${tool.name} on ${on_string}: plink.prob" from_work_dir="plink.prob" hidden="True"/>
        <data name="OUTPUT_plink_profile" format="plink.profile" label="${tool.name} on ${on_string}: plink.profile" from_work_dir="plink.profile" hidden="True"/>
        <data name="OUTPUT_plink_prune_in" format="plink.prune.in" label="${tool.name} on ${on_string}: plink.prune.in" from_work_dir="plink.prune.in" hidden="True"/>
        <data name="OUTPUT_plink_prune_out" format="plink.prune.out" label="${tool.name} on ${on_string}: plink.prune.out" from_work_dir="plink.prune.out" hidden="True"/>
        <data name="OUTPUT_plink_qassoc" format="plink.qassoc" label="${tool.name} on ${on_string}: plink.qassoc" from_work_dir="plink.qassoc" hidden="True"/>
        <data name="OUTPUT_plink_qassoc_gxe" format="plink.qassoc.gxe" label="${tool.name} on ${on_string}: plink.qassoc.gxe" from_work_dir="plink.qassoc.gxe" hidden="True"/>
        <data name="OUTPUT_plink_qassoc_means" format="plink.qassoc.means" label="${tool.name} on ${on_string}: plink.qassoc.means" from_work_dir="plink.qassoc.means" hidden="True"/>
        <data name="OUTPUT_plink_qfam" format="plink.qfam" label="${tool.name} on ${on_string}: plink.qfam" from_work_dir="plink.qfam" hidden="True"/>
        <data name="OUTPUT_plink_range_report" format="plink.range.report" label="${tool.name} on ${on_string}: plink.range.report" from_work_dir="plink.range.report" hidden="True"/>
        <data name="OUTPUT_plink_raw" format="plink.raw" label="${tool.name} on ${on_string}: plink.raw" from_work_dir="plink.raw" hidden="True"/>
        <collection name="OUTPUT_plink_recode___txt" type="list" label="plink.recode.*.txt" hidden="True">
                        <discover_datasets pattern="plink\.recode\.(?P&lt;name&gt;)\.txt" format="plink.recode.*.txt"/>
                        </collection>
        <data name="OUTPUT_plink_recode_phase_inp" format="plink.recode.phase.inp" label="${tool.name} on ${on_string}: plink.recode.phase.inp" from_work_dir="plink.recode.phase.inp" hidden="True"/>
        <data name="OUTPUT_plink_recode_strct_in" format="plink.recode.strct_in" label="${tool.name} on ${on_string}: plink.recode.strct_in" from_work_dir="plink.recode.strct_in" hidden="True"/>
        <data name="OUTPUT_plink_ref" format="plink.ref" label="${tool.name} on ${on_string}: plink.ref" from_work_dir="plink.ref" hidden="True"/>
        <data name="OUTPUT_plink_rel" format="plink.rel" label="${tool.name} on ${on_string}: plink.rel" from_work_dir="plink.rel" hidden="True"/>
        <data name="OUTPUT_plink_rel_id" format="plink.rel.id" label="${tool.name} on ${on_string}: plink.rel.id" from_work_dir="plink.rel.id" hidden="True"/>
        <data name="OUTPUT_plink_rlist" format="plink.rlist" label="${tool.name} on ${on_string}: plink.rlist" from_work_dir="plink.rlist" hidden="True"/>
        <data name="OUTPUT_plink_sample" format="plink.sample" label="${tool.name} on ${on_string}: plink.sample" from_work_dir="plink.sample" hidden="True"/>
        <data name="OUTPUT_plink_set" format="plink.set" label="${tool.name} on ${on_string}: plink.set" from_work_dir="plink.set" hidden="True"/>
        <collection name="OUTPUT_plink_set___m_perm" type="list" label="plink.set.{,m}perm" hidden="True">
                        <discover_datasets pattern="plink\.set\.(?P&lt;name&gt;)perm" format="plink.set.{,m}perm"/>
                        </collection>
        <data name="OUTPUT_plink_set_table" format="plink.set.table" label="${tool.name} on ${on_string}: plink.set.table" from_work_dir="plink.set.table" hidden="True"/>
        <data name="OUTPUT_plink_sexcheck" format="plink.sexcheck" label="${tool.name} on ${on_string}: plink.sexcheck" from_work_dir="plink.sexcheck" hidden="True"/>
        <data name="OUTPUT_plink_simfreq" format="plink.simfreq" label="${tool.name} on ${on_string}: plink.simfreq" from_work_dir="plink.simfreq" hidden="True"/>
        <data name="OUTPUT_plink_skip_3allele" format="plink.skip.3allele" label="${tool.name} on ${on_string}: plink.skip.3allele" from_work_dir="plink.skip.3allele" hidden="True"/>
        <data name="OUTPUT_plink_snplist" format="plink.snplist" label="${tool.name} on ${on_string}: plink.snplist" from_work_dir="plink.snplist" hidden="True"/>
        <collection name="OUTPUT_plink_tags_" type="list" label="plink.tags*" hidden="True">
                        <discover_datasets pattern="plink\.tags(?P&lt;name&gt;)" format="plink.tags*"/>
                        </collection>
        <data name="OUTPUT_plink_tdt" format="plink.tdt" label="${tool.name} on ${on_string}: plink.tdt" from_work_dir="plink.tdt" hidden="True"/>
        <data name="OUTPUT_plink_tdt_poo" format="plink.tdt.poo" label="${tool.name} on ${on_string}: plink.tdt.poo" from_work_dir="plink.tdt.poo" hidden="True"/>
        <data name="OUTPUT_plink_tfam" format="plink.tfam" label="${tool.name} on ${on_string}: plink.tfam" from_work_dir="plink.tfam" hidden="True"/>
        <data name="OUTPUT_plink_tped" format="plink.tped" label="${tool.name} on ${on_string}: plink.tped" from_work_dir="plink.tped" hidden="True"/>
        <data name="OUTPUT_plink_traw" format="plink.traw" label="${tool.name} on ${on_string}: plink.traw" from_work_dir="plink.traw" hidden="True"/>
        <collection name="OUTPUT_plink_tucc__" type="list" label="plink.tucc.*" hidden="True">
                        <discover_datasets pattern="plink\.tucc\.(?P&lt;name&gt;)" format="plink.tucc.*"/>
                        </collection>
        <data name="OUTPUT_plink_twolocus" format="plink.twolocus" label="${tool.name} on ${on_string}: plink.twolocus" from_work_dir="plink.twolocus" hidden="True"/>
        <data name="OUTPUT_plink_var_ranges" format="plink.var.ranges" label="${tool.name} on ${on_string}: plink.var.ranges" from_work_dir="plink.var.ranges" hidden="True"/>
        <data name="OUTPUT_plink_vcf" format="vcf" label="${tool.name} on ${on_string}: plink.vcf" from_work_dir="plink.vcf" hidden="True"/>
        <data name="OUTPUT_plink_log" format="plink.log" label="${tool.name} on ${on_string}: plink.log" from_work_dir="plink.log" hidden="False"/>
    </outputs>
    <help><![CDATA[
        
PLINK v2.00aLM 64-bit Intel (9 Oct 2017)       www.cog-genomics.org/plink/2.0/
(C) 2005-2017 Shaun Purcell, Christopher Chang   GNU General Public License v3

In the command line flag definitions that follow,
  * [square brackets] denote a required parameter, where the text between the
    brackets describes its nature.
  * <angle brackets> denote an optional modifier (or if '|' is present, a set
    of mutually exclusive optional modifiers).  Use the EXACT text in the
    definition.
  * There's one exception to the angle brackets/exact text rule: when an angle
    bracket term ends with '=[value]', '[value]' designates a variable
    parameter.
  * {curly braces} denote an optional parameter, where the text between the
    braces describes its nature.
  * An ellipsis (...) indicates that you may enter multiple parameters of the
    specified type.
  * A "column set descriptor" is either
    1. a comma-separated sequence of column set names; this is interpreted as
       the full list of column sets to include.
    2. a comma-separated sequence of column set names, all preceded by '+' or
       '-'; this is interpreted as a list of changes to the default.

  plink2 [input flag(s)...] {command flag(s)...} {other flag(s)...}
  plink2 --help {flag name(s)...}

Most plink2 runs require exactly one main input fileset.  The following flags
are available for defining its form and location:

  --pfile [prefix] <vzs> : Specify .pgen + .pvar{.zst} + .psam prefix.
  --pgen [filename]      : Specify full name of .pgen/.bed file.
  --pvar [filename]      : Specify full name of .pvar/.bim file.
  --psam [filename]      : Specify full name of .psam/.fam file.

  --bfile [prefix] <vzs> : Specify .bed + .bim{.zst} + .fam prefix.
  --bpfile [prefx] <vzs> : Specify .pgen + .bim{.zst} + .fam prefix.

  --keep-autoconv    : When importing non-PLINK-binary data, don't delete
                       autogenerated binary fileset at end of run.

  --no-fid           : .fam file does not contain column 1 (family ID).
  --no-parents       : .fam file does not contain columns 3-4 (parents).
  --no-sex           : .fam file does not contain column 5 (sex).
  --no-pheno         : .fam file does not contain column 6 (phenotype).

  --vcf [filename] <dosage=[field]>
  --bcf [filename] <dosage=[field]>  (not implemented yet)
    Specify full name of .vcf{.gz|.zst} or BCF2 file to import.
    * These can be used with --psam.
    * By default, dosage information is not imported.  To import the GP field
      (must be VCFv4.3-style 0..1, one probability per possible genotype), add
      'dosage=GP'.  'dosage=DS' (or anything else) causes the named field to be
      interpreted as a Minimac3-style dosage.

  --data [filename prefix] <ref-first | ref-second> <gzs>
  --bgen [filename] <snpid-chr> <ref-first | ref-second>
  --gen [filename] <ref-first | ref-second>
  --sample [filename]
    Specify an Oxford-format dataset to import.  --data specifies a .gen{.zst}
    + .sample pair, while --bgen specifies a BGEN v1.1+ file.
    * If a BGEN v1.2+ file contains sample IDs, it may be imported without a
      companion .sample file.
    * With 'snpid-chr', chromosome codes are read from the 'SNP ID' field
      instead of the usual chromosome field.
    * By default, the second allele for each variant is treated as a
      provisional reference allele.  To specify that the first (resp. second)
      allele really is always reference, add the 'ref-first' (resp.
      'ref-second') modifier.

  --haps [filename] <ref-first | ref-second>
  --legend [filename] [chr code]
    Specify .haps {+ .legend} file(s) to import.
    * When --legend is specified, it's assumed that the --haps file doesn't
      contain header columns.
    * On chrX, the second male column may contain dummy '-' entries.  (However,
      PLINK currently cannot handle omitted male columns.)
    * If not used with --sample, new sample IDs are of the form 'per#/per#'.

  --map [fname]      : Specify full name of .map file.
  --import-dosage [allele dosage file] <noheader> <skip0=[i]> <skip1=[j]>
                  <skip2=[k]> <dose1> <format=[m]> <ref-first | ref-second>
                  <single-chr=[code]> <chr-col-num=[#]> <pos-col-num=[#]>
    Specify PLINK 1.x-style dosage file to import.
    * You must also specify a companion .psam/.fam file.
    * By default, PLINK assumes that the file contains a header line, which has
      'SNP' in (1-based) column i+1, 'A1' in column i+j+2, 'A2' in column
      i+j+3, and sample FID/IIDs starting from column i+j+k+4.  (i/j/k are
      normally zero, but can be changed with 'skip0', 'skip1', and 'skip2'
      respectively.)  If such a header line is not present, use the 'noheader'
      modifier; samples will then be assumed to appear in the same order as
      they do in the .psam/.fam file.
    * You may specify a companion .map file.  If you do not,
      * 'single-chr=' can be used to specify that all variants are on the named
        chromosome.  Otherwise, you can use 'chr-col-num=' to read chromosome
        codes from the given (1-based) column number.
      * 'pos-col-num=' causes bp coordinates to be read from the given column
        number.
    * The 'format' modifier lets you specify the number of values used to
      represent each dosage.  'format=1' normally indicates a single 0..2 A1
      expected count; 'dose1' modifies this to a 0..1 frequency.  'format=2'
      (the default) indicates a 0..1 homozygous A1 likelihood followed by a
      0..1 het likelihood, while 'format=3' indicates 0..1 hom A1, 0..1 het,
      0..1 hom A2.

  --dummy [sample ct] [SNP ct] {missing dosage freq} {missing pheno freq}
          <acgt | 1234 | 12> <pheno-ct=[count]> <scalar-pheno>
          <dosage-freq=[rate]>
    This generates a fake input dataset with the specified number of samples
    and SNPs.
    * By default, the missing dosage and phenotype frequencies are zero.
      These can be changed by providing 3rd and 4th numeric parameters.
    * By default, allele codes are As and Bs; this can be changed with the
      'acgt', '1234', or '12' modifier.
    * By default, one binary phenotype is generated.  'pheno-ct=' can be used
      to change the number of phenotypes, and 'scalar-pheno' causes these
      phenotypes to be normally distributed scalars.
    * By default, all (nonmissing) dosages are in {0,1,2}.  To make some of
      them take on decimal values, use 'dosage-freq='.  (These dosages are
      affected by --hard-call-threshold and --dosage-erase-threshold.)

Output files have names of the form 'plink2.{extension}' by default.  You can
change the 'plink2' prefix with

  --out [prefix]     : Specify prefix for output files.

Most runs also require at least one of the following commands:

  --make-pgen <vzs> <format=[code]> <trim-alts>
              <erase-phase> <erase-dosage>
              <pvar-cols=[col set descriptor]> <psam-cols=[col set descriptor]>
  --make-bpgen <vzs> <format=[code]> <trim-alts>
               <erase-phase> <erase-dosage>
  --make-bed <vzs> <trim-alts>
    Create a new PLINK binary fileset (--make-pgen = .pgen + .pvar{.zst} +
    .psam, --make-bpgen = .pgen + .bim{.zst} + .fam).
    * Unlike the automatic text-to-binary converters (which only heed
      chromosome filters), this supports all of plink2's filtering flags.
    * The 'vzs' modifier causes the variant file (.pvar/.bim) to be
      Zstd-compressed.
    * The 'format' modifier requests an uncompressed fixed-variant-width .pgen
      file.  (These do not directly support multiallelic variants.)  The
      following format code is currently supported:
        2: just like .bed, except with an extended (12-byte instead of 3-byte)
           header containing variant/sample counts, and rotated genotype codes
           (00 = hom ref, 01 = het, 10 = hom alt, 11 = missing).
    * The 'erase-phase' and 'erase-dosage' modifiers prevent phase and dosage
      information from being written to the new .pgen.
    * The first five columns of a .pvar file are always #CHROM/POS/ID/REF/ALT.
      Supported optional .pvar column sets are:
        xheader: All ## header lines (yeah, this is technically not a column).
                 Without this, only the #CHROM header line is kept.
        maybequal: QUAL.  Omitted if all loaded values are missing.
        qual: Force QUAL column to be written even when empty.
        maybefilter: FILTER.  Omitted if all loaded values are missing.
        filter: Force FILTER column to be written even when empty.
        maybeinfo: INFO.  Omitted if all loaded values are missing, or if
                   INFO:PR is the only subfield.
        info: Force INFO column to be written.
        maybecm: Centimorgan coordinate.  Omitted if all loaded values are 0.
        cm: Force CM column to be written even when empty.
      The default is xheader,maybequal,maybefilter,maybeinfo,maybecm.
    * The first two columns of a .psam file are always #FID/IID.  Supported
      optional .psam column sets are:
        maybesid: Sample disambiguation ID (useful when multiple samples are
                  collected from a single organism), '0' = missing.  Omitted if
                  all loaded values are missing.
        sid: Force SID column to be written even when empty.
        maybeparents: Father and mother IIDs, '0' = missing.  Omitted if all
                      loaded values are missing.
        parents: Force PAT and MAT columns to be written even when empty.
        sex: '1'/'M'/'m' = male, '2'/'F'/'f' = female, 'NA'/'0' = missing.
        pheno1: First active phenotype.  If none, all column entries are set to
                the --output-missing-phenotype string.
        phenos: All active phenotypes, if any.  (Can be combined with pheno1 to
                force at least one phenotype column to be written.)
      The default is maybesid,maybeparents,sex,phenos.

  --make-just-pvar <zs> <cols=[column set descriptor]>
  --make-just-psam <cols=[column set descriptor]>
  --make-just-bim <zs>
  --make-just-fam
    Variants of --make-pgen/--make-bed which only write a new variant or sample
    file.  These don't always require an input genotype file.
    USE THESE CAUTIOUSLY.  It is very easy to desynchronize your binary
    genotype data and your sample/variant indexes if you use these commands
    improperly.  If you have any doubt, stick with --make-{b}pgen/--make-bed.

  --export [output format(s)...] <01 | 12> <bgz> <id-delim=[char]>
    <id-paste=[column set descriptor]> <include-alt> <omit-nonmale-y> <spaces>
    <vcf-dosage=[field]> <ref-first> <bits=[#]>
    Create a new fileset with all filters applied.  The following output
    formats are supported:
    (actually, only A-transpose, bgen-1.1, ind-major-bed, haps, hapslegend,
    oxford, and vcf are implemented for now)
    * '23': 23andMe 4-column format.  This can only be used on a single
            sample's data (--keep may be handy), and does not support
            multicharacter allele codes.
    * 'A': Sample-major additive (0/1/2) coding, suitable for loading from R.
           If you need uncounted alleles to be named in the header line, add
           the 'include-alt' modifier.
    * 'AD': Sample-major additive (0/1/2) + dominant (het=1/hom=0) coding.
            Also supports 'include-alt'.
    * 'A-transpose': Variant-major 0/1/2.
    * 'beagle': Unphased per-autosome .dat and .map files, readable by early
                BEAGLE versions.
    * 'beagle-nomap': Single .beagle.dat file.
    * 'bgen-1.x': Oxford-format .bgen + .sample.  For v1.2/v1.3, sample
                  identifiers are stored in the .bgen (with id-delim and
                  id-paste settings applied), and default precision is 16-bit
                  (use the 'bits' modifier to change this).
    * 'bimbam': Regular BIMBAM format.
    * 'bimbam-1chr': BIMBAM format, with a two-column .pos.txt file.  Does not
                     support multiple chromosomes.
    * 'fastphase': Per-chromosome fastPHASE files, with
                   .chr-[chr #].phase.inp filename extensions.
    * 'fastphase-1chr': Single .phase.inp file.  Does not support
                        multiple chromosomes.
    * 'haps', 'hapslegend': Oxford-format .haps + .sample{ + .legend}.  All
                            data must be biallelic and phased.
    * 'HV': Per-chromosome Haploview files, with .chr-[chr #][.ped + .info]
            filename extensions.
    * 'HV-1chr': Single Haploview .ped + .info file pair.  Does not support
                 multiple chromosomes.
    * 'ind-major-bed': PLINK 1 sample-major .bed (+ .bim + .fam).
    * 'lgen': PLINK 1 long-format (.lgen + .fam + .map), loadable with --lfile.
    * 'lgen-ref': .lgen + .fam + .map + .ref, loadable with --lfile +
                  --reference.
    * 'list': Single genotype-based list, up to 4 lines per variant.  To omit
              nonmale genotypes on the Y chromosome, add the 'omit-nonmale-y'
              modifier.
    * 'rlist': .rlist + .fam + .map fileset, where the .rlist file is a
                genotype-based list which omits the most common genotype for
                each variant.  Also supports 'omit-nonmale-y'.
    * 'oxford': Oxford-format .gen + .sample.
    * 'ped': PLINK 1 sample-major (.ped + .map), loadable with --file.
    * 'compound-genotypes': Same as 'ped', except that the space between each
                            pair of same-variant allele codes is removed.
    * 'structure': Structure-format.
    * 'transpose': PLINK 1 variant-major (.tped + .tfam), loadable with
                   --tfile.
    * 'vcf': VCFv4.3.  If PAR1 and PAR2 are present, they are automatically
             merged with chrX, with proper handling of chromosome codes and
             male ploidy.  If the 'bgz' modifier is added, the VCF file is
             block-gzipped.
             The 'id-paste' modifier controls which .psam columns are used to
             construct sample IDs (choices are fid, iid, maybesid, and sid;
             default is fid,iid,maybesid), while the 'id-delim' modifier sets
             the character between the ID pieces (default '_').
             By default, dosages are not exported; use 'vcf-dosage=GP' to
             export them as genotype posterior probabilities, or
             'vcf-dosage=DS' to export Minimac3-style dosages.  Replace 'DS'
             with 'DS-force' to prevent DS from being omitted when it's an
             integer.
    In addition,
    * When the output format only supports biallelic variants, multiallelic
      variants are downcoded to ref/alt1, not split.
    * The '12' modifier causes alt1 alleles to be coded as '1' and ref alleles
      to be coded as '2', while '01' maps alt1 -> 0 and ref -> 1.
    * The 'spaces' modifier makes the output space-delimited instead of
      tab-delimited, whenever both are permitted.
    * For biallelic formats where it's unspecified whether the reference/major
      allele should appear first or second, --export defaults to second for
      compatibility with PLINK 1.9.  Use 'ref-first' to change this.

  --freq <zs> <counts> <cols=[column set descriptor]> <bins-only>
         <refbins=[comma-separated bin boundaries] | refbins-file=[filename]>
         <alt1bins=[comma-separated bin boundaries] | alt1bins-file=[filename]>
    Empirical allele frequency report.  By default, only founders are
    considered.  Dosages are taken into account (e.g. heterozygous haploid
    calls count as 0.5).  chrM dosages are scaled to sum to 2.
    Supported column sets are:
      chrom: Chromosome ID.
      pos: Base-pair coordinate.
      (ID is always present, and positioned here.)
      ref: Reference allele.
      alt1: Alternate allele 1.
      alt: All alternate alleles, comma-separated.
      reffreq: Reference allele frequency/dosage.
      alt1freq: Alt1 frequency/dosage.
      altfreq: Comma-separated frequencies/dosages for all alternate alleles.
      freq: Similar to altfreq, except ref is also included at the start.
      eq: Comma-separated [allele]=[freq] for all present alleles.  (If no
          alleles are present, the column contains a single '.'.)
      eqz: Same as eq, except zero-counts are included.
      alteq/alteqz: Same as eq/eqz, except reference allele is omitted.
      numeq: 0=[freq],1=[freq], etc.  Zero-counts are omitted.
      altnumeq: Same as numeq, except reference allele is omitted.
      machr2: Empirical divided by theoretical variance quality metric.
      nobs: Number of allele observations.
    The default is chrom,ref,alt,altfreq,nobs.
    Additional .afreq.{ref,alt1}.bins (or .acount.{ref,alt1}.bins with
    'counts') file(s) are generated when 'refbins='/'refbins-file=' or
    'alt1bins='/'alt1bins-file=' is present; these report the total number of
    frequencies or counts in each left-closed, right-open interval.  (If you
    only want these histogram(s), and not the main report, add 'bins-only'.)

  --geno-counts <zs> <cols=[column set descriptor]>
    Hardcall genotype count report (considering both alleles simultaneously in
    the diploid case).  Nonfounders are now included; use --keep-founders if
    this is a problem.  Heterozygous haploid calls are treated as missing.
    Supported column sets are:
      chrom: Chromosome ID.
      pos: Base-pair coordinate.
      (ID is always present, and positioned here.)
      ref: Reference allele.
      alt1: Alternate allele 1.
      alt: All alternate alleles, comma-separated.
      homref: Homozygous-ref count.
      refalt1: Heterozygous ref-alt1 count.
      refalt: Comma-separated het ref-altx counts.
      homalt1: Homozygous-alt1 count.
      altxy: Comma-separated altx-alty counts, in (1/1)-(1/2)-(2/2)-(1/3)-...
             order.
      xy: Similar to altxy, except the reference allele is treated as alt0,
          and the sequence starts (0/0)-(0/1)-(1/1)-(0/2)-...
      hapref: Haploid-ref count.
      hapalt1: Haploid-alt1 count.
      hapalt: Comma-separated haploid-altx counts.
      hap: Similar to hapalts, except ref is also included at the start.
      numeq: 0/0=[hom ref ct],0/1=[het ref-alt1],1/1=[hom alt1],...,0=[hap ref]
             etc.  Zero-counts are omitted.  (If all genotypes are missing, the
             column contains a single '.'.)
      missing: Number of missing genotypes.
      nobs: Number of (nonmissing) genotype observations.
    The default is chrom,ref,alt,homref,refalt,altxy,hapref,hapalt,missing.

  --missing <zs> <sample-only | variant-only> <scols=[column set descriptor]>
            <vcols=[column set descriptor]>
    Generate sample- and variant-based missing data reports (or just one report
    if 'sample-only'/'variant-only' is specified).
    Supported column sets in the sample-based report are:
      (FID and IID are always present, and positioned here.)
      maybesid: SID, if at least one nonmissing value is present.
      sid: Force SID column to be written even when empty.
      misspheno1: First active phenotype missing (Y/N)?  Always 'Y' if no
                  phenotypes are loaded.
      missphenos: A Y/N column for each loaded phenotype.  (Can be combined
                  with misspheno1 to force at least one such column.)
      nmissdosage: Number of missing dosages.
      nmiss: Number of missing hardcalls, not counting het haploids.
      nmisshh: Number of missing hardcalls, counting het haploids.
      hethap: Number of heterozygous haploid hardcalls.
      nobs: Denominator (male count on chrY, otherwise total sample count).
      fmissdosage: Missing dosage rate.
      fmiss: Missing hardcall rate, not counting het haploids.
      fmisshh: Missing hardcall rate, counting het haploids.
    The default is maybesid,missphenos,nmiss,nobs,fmiss.
    Supported column sets in the variant-based report are:
      chrom: Chromosome ID.
      pos: Base-pair coordinate.
      (ID is always present, and positioned here.)
      ref: Reference allele.
      alt1: Alternate allele 1.
      alt: All alternate alleles, comma-separated.
      nmissdosage: Number of missing dosages.
      nmiss: Number of missing hardcalls, not counting het haploids.
      nmisshh: Number of missing hardcalls, counting het haploids.
      hethap: Number of heterozygous haploid calls.
      nobs: Number of potentially valid calls.
      fmissdosage: Missing dosage rate.
      fmiss: Missing hardcall rate, not counting het haploids.
      fmisshh: Missing hardcall rate, counting het haploids.
      fhethap: Heterozygous haploid rate.
    The default is chrom,nmiss,nobs,fmiss.

  --hardy <zs> <midp> <cols=[column set descriptor]>
    Hardy-Weinberg exact test p-value report(s).
    * For multiallelic variants, the test is based on the reference allele.
    * By default, only founders are considered; change this with --nonfounders.
    * chrX is now omitted from the main {output prefix}.hardy report.  Instead,
      (if present) it gets its own {output prefix}.hardy.x report based on the
      method described in Graffelman J, Weir BS (2016) Hardy-Weinberg
      equilibrium and the X chromosome.
    * There is currently no special handling of case/control phenotypes.
    Supported column sets are:
      chrom: Chromosome ID.
      pos: Base-pair coordinate.
      (ID is always present, and positioned here.)
      ref: Reference allele.
      alt1: Alternate allele 1.
      alt: All alternate alleles, comma-separated.
      gcounts: Hom-ref count, total number of ref-altx heterozygous calls, and
               total number of nonmissing calls with no reference allele.  On
               chrX, these are followed by male ref and male alt counts.
      gcount1col: gcounts values in a single comma-separated column.
      hetfreq: Observed and expected heterozygote frequencies.
      sexaf: Female and male ref allele frequencies (chrX only).
      femalep: Female-only p/midp-value (chrX only).
      p: Hardy-Weinberg equilibrium exact test p/midp-value.
    The default is chrom,ref,alt,gcounts,hetfreq,sexaf,p.

  --indep-pairwise [window size]<kb> {step size (variant ct)}
                   [unphased-hardcall-r^2 threshold]
    Generate a list of variants in approximate linkage equilibrium.  With the
    'kb' modifier, the window size is in kilobase instead of variant count
    units.  (Pre-'kb' space is optional, i.e. '--indep-pairwise 500 kb 0.5' and
    and '--indep-pairwise 500kb 0.5' have the same effect.)
    The step size now defaults to 1 if it's unspecified, and *must* be 1 if the
    window is in kilobase units.
    Note that you need to rerun plink2 using --extract or --exclude on the
    .prune.in/.prune.out file to apply the list to another computation.

  --ld [variant ID] [variant ID] <dosage> <hwe-midp>
    This displays diplotype frequencies, r^2, and D' for a single pair of
    variants.
    * Phase information is used when both variants are on the same chromosome.
    * When there is at least one sample with unphased het calls for both
      variants, diplotype frequencies are estimated using the Hill equation.
      If there are multiple biologically possible local maxima, all are
      displayed, along with HWE exact test statistics.
    * By default, only hardcalls are considered.  Add the 'dosage' modifier if
      you want dosages to be taken into account.  (In the diploid case, an
      unphased dosage of x is interpreted as P(0/0) = 1 - x, P(0/1) = x when x
      is in 0..1.)  Note that when both an unphased dosage and a phased
      hardcall are present, this ignores the phased hardcall, which may not be
      what you want when the dosage is e.g. 0.95...

  --make-king <square | square0 | triangle> <zs | bin | bin4>
    KING-robust kinship estimator, described by Manichaikul A, Mychaleckyj JC,
    Rich SS, Daly K, Sale M, Chen WM (2010) Robust relationship inference in
    genome-wide association studies.  By default, this writes a
    lower-triangular tab-delimited table of kinship coefficients to
    {output prefix}.king, and a list of the corresponding sample IDs to
    {output prefix}.king.id.  The first row of the .king file contains a single
    [genome 1-genome 2] kinship coefficient, the second row has the
    [genome 1-genome 3] and [genome 2-genome 3] kinship values in that order,
    etc.
    * Only autosomes are currently considered.
    * Pedigree information is currently ignored; the between-family estimator
      is used for all pairs.
    * If the 'square' or 'square0' modifier is present, a square matrix is
      written instead; 'square0' fills the upper right triangle with zeroes.
    * If the 'zs' modifier is present, the .king file is Zstd-compressed.
    * If the 'bin' modifier is present, a binary (square) matrix of
      double-precision floating point values, suitable for loading from R, is
      instead written to {output prefix}.king.bin.  ('bin4' specifies
      single-precision numbers instead.)  This can be combined with 'square0'
      if you still want the upper right zeroed out, or 'triangle' if you don't
      want to pad the upper right at all.
    * The computation can be subdivided with --parallel.
  --make-king-table <zs> <counts> <cols=[column set descriptor]>
    Similar to --make-king, except results are reported in the original .kin0
    text table format (with minor changes, e.g. row order is more friendly to
    incremental addition of samples), and --king-table-filter can be used to
    restrict the report to high kinship values.
    Supported column sets are:
      (FID and IID are always present, and positioned here.)
      maybesid: SID, if at least one nonmissing value is present.
      sid: Force SID column to be written even when empty.
      misspheno1: First active phenotype missing (Y/N)?  Always 'Y' if no
                  phenotypes are loaded.
      missphenos: A Y/N column for each loaded phenotype.  (Can be combined
                  with misspheno1 to force at least one such column.)
      id: FID1/ID1/FID2/ID2.
      maybesid: SID1/SID2, if at least one value is nonmissing.  Must be used
                with 'id'.
      sid: Force SID1/SID2 even when all values are missing.
      nsnp: Number of variants considered (autosomal, neither call missing).
      hethet: Proportion/count of considered call pairs which are het-het.
      ibs0: Proportion/count of considered call pairs which are opposite homs.
      ibs1: HET1_HOM2 and HET2_HOM1 proportions/counts.
      kinship: KING-robust between-family kinship estimator.
    The default is id,maybesid,nsnp,hethet,ibs0,kinship.  hethet/ibs0/ibs1
    values are proportions unless the 'counts' modifier is present.  If id is
    omitted, a .kin0.id file is also written.

  --make-rel <cov> <meanimpute> <square | square0 | triangle> <zs | bin | bin4>
    Write a lower-triangular variance-standardized relationship matrix to
    {output prefix}.rel, and corresponding IDs to {output prefix}.rel.id.
    * It is usually best to perform this calculation on a variant set in
      approximate linkage equilibrium, with no very-low-MAF variants.
    * The 'cov' modifier removes the variance standardization step, causing a
      covariance matrix to be calculated instead.
    * The computation can be subdivided with --parallel.
  --make-grm-gz <cov> <meanimpute> <no-gz | zs>
  --make-grm-bin <cov> <meanimpute>
    --make-grm-gz causes the relationships to be written to GCTA's original
    gzipped list format, which describes one pair per line, while
    --make-grm-bin writes them in GCTA 1.1+'s single-precision triangular
    binary format.  Note that these formats explicitly report the number of
    valid observations (where neither sample has a missing call) for each pair,
    which is useful input for some scripts.

  --pca {count} <approx | meanimpute> <sid>
  --pca var-wts {count} <approx | meanimpute> <sid> <vzs>
                <vcols=[col set descriptor]>
    Extracts top principal components from the variance-standardized
    relationship matrix.
    * It is usually best to perform this calculation on a variant set in
      approximate linkage equilibrium, with no very-low-MAF variants.
    * By default, 10 PCs are extracted; you can adjust this by passing a
      numeric parameter.  (Note that 10 is lower than the PLINK 1.9 default of
      20; this is due to the randomized algorithm's memory footprint growing
      quadratically w.r.t. the PC count.)
    * The 'approx' modifier causes the standard deterministic computation to be
      replaced with the randomized algorithm originally implemented for
      Galinsky KJ, Bhatia G, Loh PR, Georgiev S, Mukherjee S, Patterson NJ,
      Price AL (2016) Fast Principal-Component Analysis Reveals Convergent
      Evolution of ADH1B in Europe and East Asia.  This can be a good idea when
      you have >5k samples.
    * The randomized algorithm always uses mean imputation for missing genotype
      calls.  For comparison purposes, you can use the 'meanimpute' modifier to
      request this behavior for the standard computation.
    * The 'var-wts' modifier requests an additional .eigenvec.var file with PCs
      expressed as variant weights instead of sample weights.  When it's
      present, 'vzs' causes the .eigenvec.var file to be Zstd-compressed.
      'vcols' can be used to customize the report columns; supported column
      sets are:
        chrom: Chromosome ID.
        pos: Base-pair coordinate.
        (ID is always present, and positioned here.)
        ref: Reference allele.
        alt1: Alternate allele 1.
        alt: All alternate alleles, comma-separated.
        maj: Major allele.
        nonmaj: All nonmajor alleles, comma-separated.
        (PCs are always present, and positioned here.  Signs are w.r.t. the
        major, not necessarily reference, allele.)
      Default is chrom,maj,nonmaj.

  --king-cutoff {.king.bin + .king.id fileset prefix} [threshold]
    Exclude one member of each pair of samples with KING-robust kinship greater
    than the given threshold.  Remaining/excluded sample IDs are written to
    {output prefix}.king.cutoff.in + .king.cutoff.out.
    If present, the .king.bin file must be triangular (either precision is ok).

  --write-covar <cols=[column set descriptor]>
    If covariates are defined, an updated version (with all filters applied) is
    automatically written to {output prefix}.cov whenever --make-pgen,
    --make-just-psam, --export, or a similar command is present.  However, if
    you do not wish to simultaneously generate a new sample file, you can use
    --write-covar to just produce a pruned covariate file.
    Supported column sets are:
      maybesid: SID, if at least one nonmissing value is present.
      sid: Force SID column to be written even when empty.
      maybeparents: Father and mother IIDs, '0' = missing.  Omitted if all
                    loaded values are missing.
      parents: Force PAT and MAT columns to be written even when empty.
      sex: '1'/'M'/'m' = male, '2'/'F'/'f' = female, 'NA'/'0' = missing.
      pheno1: First active phenotype.  If none, all column entries are set to
              the --output-missing-phenotype string.
      phenos: All active phenotypes, if any.  (Can be combined with pheno1 to
              force at least one phenotype column to be written.)
      (Covariates are always present, and positioned here.)
    The default is just maybesid.

  --write-samples
    Report FID/IID (or FID/IID/SID, iff the input .psam file had a SID column)
    of all samples which pass your filters/inclusion thresholds.

  --write-snplist <zs>
    List all variants which pass your filters/inclusion thresholds.

  --glm <zs> <sex | no-x-sex> <genotypic | hethom | dominant | recessive>
        <interaction> <hide-covar> <intercept> <firth-fallback | firth>
        <cols=[col set descriptor]> <local-covar=[f]> <local-pvar=[f]>
        <local-psam=[f]> <local-omit-last | local-cats=[category ct]>
    Basic association analysis on quantitative and/or case/control phenotypes.
    For each variant, a linear (for quantitative traits) or logistic (for
    case/control) regression is run with the phenotype as the dependent
    variable, and alt dosage and a constant-1 column as predictors.
    * For multiallelic variants, the total alt1 + alt2 + ... dosage is used.
    * By default, sex (male = 1, female = 2; note that this is a change from
      PLINK 1.x) is automatically added as a predictor for X chromosome
      variants, and no others.  The 'sex' modifier causes it to be added
      everywhere (except chrY), while 'no-x-sex' excludes it entirely.
    * The 'genotypic' modifier adds an additive effect/dominance deviation 2df
      joint test (0-2 and 0..1..0 coding), while 'hethom' uses 0..0..1 and
      0..1..0 coding instead.
    * 'dominant' and 'recessive' specify a model assuming full dominance or
      recessiveness, respectively, for the ref allele.  I.e. the genotype
      column is recoded as 0..1..1 or 0..0..1, respectively.
    * 'interaction' adds genotype x covariate interactions to the model.
    * Additional predictors can be added with --covar.  By default, association
      statistics are reported for all nonconstant predictors; 'hide-covar'
      suppresses covariate-only results, while 'intercept' causes intercepts
      to be reported.
    * For logistic regression, when the phenotype {quasi-}separates the
      genotype, an NA result will normally be reported.  To fall back on Firth
      logistic regression instead when the basic logistic regression fails to
      converge, add the 'firth-fallback' modifier.  To eliminate the special
      case and use Firth logistic regression everywhere, add 'firth'.
    * To add covariates which are not constant across all variants, add the
      'local-covar=', 'local-pvar=', and 'local-psam=' modifiers, and use full
      filenames for each.
      Normally, the local-covar file should have c * n real-valued columns,
      where the first c columns correspond to the first sample in the
      local-psam file, columns (c+1) to 2c correspond to the second sample,
      etc.; and the mth line correspond to the mth nonheader line of the
      local-pvar file.  (Variants outside of the local-pvar file are excluded
      from the regression.)  The local covariates are assigned the names
      LOCAL1, LOCAL2, etc.; to exclude the last local covariate from the
      regression (necessary if they are e.g. local ancestry coefficients which
      sum to 1), add 'local-omit-last'.
      Alternatively, with 'local-cats=[k]', the local-covar file is expected to
      have n columns with integer-valued entries in [1, k].  These category
      assignments are expanded into (k-1) local covariates in the usual manner.
    The main report supports the following column sets:
      chrom: Chromosome ID.
      pos: Base-pair coordinate.
      (ID is always present, and positioned here.)
      ref: Reference allele.
      alt1: Alternate allele 1.
      alt: All alternate alleles, comma-separated.
      altcount: Alternate allele count (can be decimal with dosage data).
      totallele: Allele observation count (can be higher than --freq value, due
                 to inclusion of het haploids and chrX model).
      altcountcc: Alt count in cases, then controls (case/control only).
      totallelecc: Case and control allele observation counts.
      gcountcc: Genotype hardcall counts (hom-ref, ref-alt, alt-alt) in cases,
                then controls (case/control only).
      altfreq: alt allele frequency.
      altfreqcc: alt frequency in cases, then controls (case/control only).
      machr2: Empirical divided by theoretical variance quality metric.
      firth: Reports whether Firth regression was used (firth-fallback only).
      test: Test identifier.  (Required unless only one test is run.)
      nobs: Number of samples in the regression.
      beta: Regression coefficient (for alternate allele).
      orbeta: Odds ratio for case/control, beta for quantitative traits.
      se: Standard error of beta/odds ratio.
      ci: Bounds of symmetric approximate confidence interval (requires --ci).
      t: T-statistic.
      p: Asymptotic p-value for t-statistic.
    The default is chrom,pos,ref,alt,firth,test,nobs,orbeta,se,ci,t,p.

  --score [filename] {i} {j} {k} <header | header-read> <no-mean-imputation>
          <center | variance-standardize> <se> <zs>
          <list-variants | list-variants-zs> <cols=[col set descriptor]>
    Apply linear scoring system(s) to each sample.
    The input file should have one line per scored variant.  Variant IDs are
    read from column #i and allele codes are read from column #j, where i
    defaults to 1 and j defaults to i+1.
    * By default, a single column of input coefficients is read from column #k,
      where k defaults to j+1.  (--score-number can be used to specify multiple
      columns.)
    * The 'header' modifier causes the first nonempty line of the input file to
      be treated as an ignorable header line, while 'header-read' causes score
      column header(s) to be read and included in the report.
    * By default, copies of unnamed alleles contribute zero to score, while
      missing genotypes contribute an amount proportional to the loaded (via
      --read-freq) or imputed allele frequency.  To throw out missing
      observations instead (decreasing the denominator in the final average
      when this happens), use the 'no-mean-imputation' modifier.
    * You can use the 'center' modifier to shift all genotypes to mean zero, or
      'variance-standardize' to linearly transform the genotypes to mean-0,
      variance-1.  ('variance-standardize' cannot be used with chrX or MT.)
    * The 'se' modifier causes the score coefficients to be treated as
      independent standard errors; in this case, standard errors for the score
      average/sum are reported.  (Note that this will systematically
      underestimate standard errors when scored variants are in LD.)
    * The 'list-variants{-zs}' modifier causes variant IDs used for scoring to
      be written to [output prefix].sscore.vars{.zst}.
    The main report supports the following column sets:
      (FID and IID are always present, and positioned here.)
      maybesid: SID, if at least one nonmissing value is present.
      sid: Force SID column to be written even when empty.
      pheno1: First active phenotype.
      phenos: All active phenotypes, if any.
      nmissallele: Number of nonmissing alleles.
      denom: Denominator of score average (equal to nmissallele value when
             'no-mean-imputation' specified)
      dosagesum: Sum of named allele dosages.
      scoreavgs: Score averages.
      scoresums: Score sums.
    The default is maybesid,phenos,nmissallele,dosagesum,scoreavgs.

  --genotyping-rate <dosage>
    Report genotyping rate in log (this was automatic in PLINK 1.x).

  --validate
    Validates all variant records in a .pgen file.

  --zst-decompress [.zst file] {output filename}
    Decompress a Zstd-compressed file.  If no output filename is specified, the
    file is decompressed to standard output.
    This cannot be used with any other flags, and does not cause a log file to
    be generated.

The following other flags are supported.
  --script [fname]   : Include command-line options from file.
  --rerun {log}      : Rerun commands in log (default 'plink2.log').
  --version          : Display only version number before exiting.
  --silent           : Suppress output to console.
  --input-missing-genotype [c] : '.' is always interpreted as a missing
                                 genotype code in input files.  By default, '0'
                                 also is; you can change this second missing
                                 code with --input-missing-genotype.
  --double-id        : Set both FIDs and IIDs to the VCF/.bgen sample ID.
  --const-fid {ID}   : Set all FIDs to the given constant (default '0').
  --id-delim {d}     : Parse sample IDs as [FID][d][IID] (or
                       [FID][d][IID][d][SID] when delimiter appears twice).
                       Default delimiter is '_'.
  --idspace-to [c]   : Convert spaces in VCF/.bgen sample IDs to the given
                       character.
  --vcf-require-gt   : Skip variants with no GT field.
  --vcf-min-gq [val] : No-call genotypes when GQ is present and below the
                       threshold.
  --vcf-min-dp [val] : No-call genotypes when DP is present and below the
                       threshold.
  --vcf-half-call [] : Specify how '0/.' and similar VCF GT values should be
                       handled.  The following four modes are supported:
                       * 'error'/'e' (default) errors out and reports line #.
                       * 'haploid'/'h' treats them as haploid calls.
                       * 'missing'/'m' treats them as missing.
                       * 'reference'/'r' treats the missing value as 0.
  --oxford-single-chr [chr name]  : Specify single-chromosome .gen file with
                                    ignorable first column.
  --hard-call-threshold [val]     : When importing dosage data, a hardcall is
                                    normally saved when the distance from the
                                    nearest hardcall, defined as
                                      0.5 * sum_i |x_i - round(x_i)|
                                    (where the x_i's are 0..2 allele dosages),
                                    is not greater than 0.1.  You can adjust
                                    this threshold by providing a numeric
                                    parameter to --hard-call-threshold.
                                    You can also use this with --make-{b}pgen
                                    to alter the saved hardcalls while leaving
                                    the dosages untouched.
  --dosage-erase-threshold [val]  : --hard-call-threshold normally preserves
                                    the original dosages, and several PLINK 2.x
                                    commands use them when they're available.
                                    Use --dosage-erase-threshold to make PLINK
                                    erase dosages and keep only hardcalls when
                                    distance-from-hardcall <= the given level.
  --import-dosage-certainty [val] : The PLINK 2.0 file format currently
                                    supports a single dosage for each allele.
                                    Some other dosage file formats include a
                                    separate probability for every possible
                                    genotype, e.g. {P(0/0)=0.2, P(0/1)=0.52,
                                    P(1/1)=0.28}, a highly uncertain call that
                                    is nevertheless treated as a hardcall under
                                    '--hard-call-threshold 0.1'.  To make PLINK
                                    treat a dosage as missing whenever the
                                    largest probability is less than a
                                    threshold, use --import-dosage-certainty.
  --missing-code {string list}    : Comma-delimited list of missing phenotype
    (alias: --missing_code)         values for Oxford-format import (default
                                    'NA').
  --allow-extra-chr  : Permit unrecognized chromosome codes (alias --aec).
  --chr-set [autosome ct] <no-x> <no-y> <no-xy> <no-mt> :
    Specify a nonhuman chromosome set.  The first parameter sets the number of
    diploid autosome pairs if positive, or haploid chromosomes if negative.
    Given diploid autosomes, the remaining modifiers indicate the absence of
    the named non-autosomal chromosomes.
  --cow/--dog/--horse/--mouse/--rice/--sheep : Shortcuts for those species.
  --autosome-num [val]  : Alias for '--chr-set [value] no-y no-xy no-mt'.
  --human               : Explicitly specify human chromosome set, and make
                          output .pvar/VCF files include a ##chrSet header
                          line.  (.pvar/VCF output files automatically include
                          ##chrSet when a nonhuman set is specified.)
  --chr-override <file> : By default, if --chr-set/--autosome-num/--human/etc.
                          conflict with an input file ##chrSet header line,
                          PLINK will error out.  --chr-override with no
                          parameter causes the command line to take precedence;
                          '--chr-override file' defers to the file.
  --biallelic-only <strict> <list> : Skip variants with 2+ alt. alleles.
  --var-min-qual [val]             : Skip variants with low/missing QUAL.
  --var-filter {exception(s)...}   : Skip variants which have FILTER failures.
  --pheno [filename] : Specify additional phenotype/covariate file.
  --pheno-name [...] : Only load the designated phenotype(s) from the
                       --pheno (if one was specified) or .psam (if no --pheno)
                       file.  Separate multiple names with spaces or commas,
                       and use dashes to designate ranges.
  --input-missing-phenotype [v] : Set number to treat as a missing phenotype in
                                  input files (default -9).
  --1                           : Expect case/control phenotypes in input files
                                  to be coded as 0 = control, 1 = case, instead
                                  of the usual 0 = missing, 1 = ctrl, 2 = case.
  --missing-catname [str]       : Set missing-categorical-phenotype string
                                  (case-sensitive, default 'NONE').
  --covar [filename] : Specify additional covariate file.
  --covar-name [...] : Only load the designated covariate(s) from the
                       --covar (if one was specified), --pheno (if no --covar),
                       or .psam (if no --covar or --pheno) file.
  --within [f] {new pheno name} : Import a PLINK 1.x categorical phenotype.
                                  (Phenotype name defaults to 'CATPHENO'.)
                                  * If any numeric values are present, ALL
                                    values must be numeric.  In that case, 'C'
                                    is added in front of all category names.
                                  * 'NA' is treated as a missing value.
  --mwithin [n]                 : Load --within categories from column n+2.
  --family {new pheno name}     : Create a categorical phenotype from FID.
                                  Restrictions on and handling of numeric
                                  values are the same as for --within.
  --family-missing-catname [nm] : Make --family treat the specified FID as
                                  missing.
  --keep <sid> [fn...]  : Exclude all samples not named in a file.
  --remove <sid> [f...] : Exclude all samples named in a file.
  --keep-fam [fname...] : Exclude all families not named in a file.
  --remove-fam [fn...]  : Exclude all families named in a file.
  --extract <range> [f...] : Exclude all variants not named in a file.
  --exclude <range> [f...] : Exclude all variants named in a file.
  --keep-cats [filename]   : These can be used individually or in combination
  --keep-cat-names [nm...]   to define a list of categories to keep; all
                             samples not in one of the named categories are
                             excluded.  Use spaces to separate category names
                             for --keep-cat-names.  Use the --missing-catname
                             value (default 'NONE') to refer to the group of
                             uncategorized samples.
  --keep-cat-pheno [pheno] : If more than one categorical phenotype is loaded,
                             or you wish to filter on a categorical covariate,
                             --keep-cat-pheno must be used to specify which
                             phenotype/covariate --keep-cats and
                             --keep-cat-names apply to.
  --remove-cats [filename] : Exclude all categories named in the file.
  --remove-cat-names [...] : Exclude named categories.
  --remove-cat-pheno [phe] : Specify pheno for --remove-cats/remove-cat-names.
  --split-cat-pheno <omit-last> <covar-01> {cat. pheno/covar name(s)...} :
    Split n-category phenotype(s) into n (or n-1, with 'omit-last') binary
    phenotypes, with names of the form [orig. pheno name]=[category name].  (As
    a consequence, affected phenotypes and categories are not permitted to
    contain the '=' character.)
    * This happens after all sample filters.
    * If no phenotype or covariate names are provided, all categorical
      phenotypes (but not covariates) are processed.
    * By default, generated covariates are coded as 1=false, 2=true.  To code
      them as 0=false, 1=true instead, add the 'covar-01' modifier.
  --loop-cats [pheno/cov]  : Run variant filters and subsequent operations on
                             just the samples in the first category; then just
                             the samples in the second category; and so on, for
                             all categories in the named categorical phenotype.
  --variance-standardize {pheno/covar name(s)...}
  --covar-variance-standardize {covar name(s)...} :
    Linearly transform named covariates (and quantitative phenotypes, if
    --variance-standardize) to mean-zero, variance 1.  If no parameters are
    provided, all possible phenotypes/covariates are affected.
  --quantile-normalize {...}       : Force named covariates and quantitative
  --pheno-quantile-normalize {...}   phenotypes to a N(0,1) distribution,
  --covar-quantile-normalize {...}   preserving only the original rank orders.
  --chr [chr(s)...]  : Exclude all variants not on the given chromosome(s).
                       Valid choices for humans are 0 (unplaced), 1-22, X, Y,
                       XY, MT, PAR1, and PAR2.  Separate multiple chromosomes
                       with spaces and/or commas, and use a dash (no adjacent
                       spaces permitted) to denote a range, e.g.
                       '--chr 1-4, 22, par1, x, par2'.
  --not-chr [...]    : Reverse of --chr (exclude variants on listed
                       chromosomes).
  --autosome         : Exclude all non-autosomal variants.
  --autosome-par     : Exclude all non-autosomal variants, except those in a
                       pseudo-autosomal region.
  --snps-only <just-acgt> : Exclude non-SNP variants.  By default, SNP = all
                            allele codes are single-character; 'just-acgt'
                            restricts SNP codes to {A,C,G,T,a,c,g,t,[missing]}.
  --from [var ID]    : Use ID(s) to specify a variant range to load.  When used
  --to   [var ID]      together, both variants must be on the same chromosome.
                       (--snps can be used to specify intervals which cross
                       chromosome boundaries.)
  --snp  [var ID]    : Specify a single variant to load.
  --exclude-snp [ID] : Specify a single variant to exclude.
  --window  [kbs]    : With --snp/--exclude-snp, loads/excludes all variants
                       within half the specified kb distance of the named one.
  --from-bp [pos]    : Use base-pair coordinates to define a variant range to
  --to-bp   [pos]      load.
  --from-kb [pos]      * You must use these with --chr, specifying a single
  --to-kb   [pos]        chromosome.
  --from-mb [pos]      * Decimals and negative numbers are permitted.
  --to-mb   [pos]      * The --to-bp(/-kb/-mb) position is no longer permitted
                         to be smaller than the --from-bp position.
  --snps [var IDs...]  : Use IDs to specify variant range(s) to load or
  --exclude-snps [...]   exclude.  E.g. '--snps rs1111-rs2222, rs3333, rs4444'.
  --force-intersect    : PLINK 2 normally errors out when multiple variant
                         inclusion filters (--extract, --from/--to,
                         --from-bp/--to-bp, --snp, --snps) are specified.
                         --force-intersect allows the run to proceed; the set
                         intersection will be taken.
  --geno {val} <dosage | hh-missing>
  --mind {val} <dosage | hh-missing> : 
    Exclude variants (--geno) and/or samples (--mind) with missing call
    frequencies greater than a threshold (default 0.1).  (Note that the default
    threshold is only applied if --geno/--mind is invoked without a parameter;
    when --geno/--mind is not invoked, no missing call frequency ceiling is
    enforced at all.  Other inclusion/exclusion default thresholds work the
    same way.)
    By default, when a dosage is present but a hardcall is not, the genotype is
    treated as missing; add the 'dosage' modifier to treat this case as
    nonmissing.  Alternatively, you can use 'hh-missing' to also treat
    heterozygous haploid calls as missing.
  --require-pheno {name(s)...} : Remove samples missing any of the named
  --require-covar {name(s)...}   phenotype(s)/covariate(s).  If no parameters
                                 are provided, all phenotype(s)/covariate(s)
                                 must be present.
  --maf {freq}       : Exclude variants with nonmajor allele frequency lower
                       than a threshold (default 0.01).
  --max-maf [freq]   : Exclude variants with MAF greater than the threshold.
  --mac [ct]         : Exclude variants with nonmajor allele dosage lower than
                       the given threshold.
  --max-mac [ct]     : Exclude variants with nonmajor allele dosage greater
                       than the given threshold.
  --maf-succ         : Rule of succession allele frequency estimation (used in
                       EIGENSOFT).  Given a j observations of one allele and k
                       observations of the other for a biallelic variant, infer
                       allele frequencies of (j+1) / (j+k+2) and
                       (k+1) / (j+k+2), rather than the default j / (j+k) and
                       k / (j+k).
                       Note that this does not affect --freq's output.
  --read-freq [file] : Load allele frequency estimates from the given --freq or
                       --geno-counts (or PLINK 1.9 --freqx) report, instead of
                       imputing them from the immediate dataset.
  --hwe [p] <midp> <keep-fewhet> : Exclude variants with Hardy-Weinberg
                                   equilibrium exact test p-values below a
                                   threshold.
                                   * By default, only founders are considered.
                                   * chrX p-values are now computed using
                                     Graffelman and Weir's method.
                                   * With 'keep-fewhet', variants which fail
                                     the test in the too-few-hets direction are
                                     not excluded.  (On chrX, this uses the
                                     ratio between the Graffelman/Weir p-value
                                     and the female-only p-value.)
                                   * There is currently no special handling of
                                     case/control phenotypes.
  --mach-r2-filter {min} {max}   : Exclude variants with MaCH
                                   empirical-theoretical variance ratio outside
                                   of [min, max] (defaults 0.1 and 2.0).
                                   * For multiallelic variants, only the
                                     ref-nonref dimension is considered.
                                   * If a single parameter is provided, it is
                                     treated as the minimum.
  --keep-females     : Exclude male and unknown-sex samples.
  --keep-males       : Exclude female and unknown-sex samples.
  --keep-nosex       : Exclude all known-sex samples.
  --remove-females   : Exclude female samples.
  --remove-males     : Exclude male samples.
  --remove-nosex     : Exclude unknown-sex samples.
  --keep-founders    : Exclude nonfounder samples.
  --keep-nonfounders : Exclude founder samples.
  --keep-if [pheno/covar] [op] [val] : Exclude samples which don't/do satisfy a
  --remove-if [pheno/covar] [op] [v]   comparison predicate, e.g.
                                         --keep-if PHENO1 == case
                                       Unless the operator is !=, the predicate
                                       always evaluates to false when the
                                       phenotype/covariate is missing.
  --nonfounders      : Include nonfounders in allele freq/HWE calculations.
  --output-chr [MT code] : Set chromosome coding scheme in output files by
                           providing the desired human mitochondrial code.
                           Options are '26', 'M', 'MT', '0M', 'chr26', 'chrM',
                           and 'chrMT'; default is now 'MT' (note that this is
                           a change from PLINK 1.x, which defaulted to '26').
  --output-missing-genotype [ch] : Set the code used to represent missing
                                   genotypes in output files (default '.').
  --output-missing-phenotype [s] : Set the string used to represent missing
                                   phenotypes in output files (default 'NA').
  --sort-vars {mode}      : Sort variants by chromosome, then position, then
                            ID.  The following string orders are supported:
                            * 'natural'/'n': Natural sort (default).
                            * 'ascii'/'a': ASCII.
                            This must be used with --make-{b}pgen/--make-bed.
  --set-hh-missing        : Make --make-{b}pgen/--make-bed set heterozygous
                            haploid and female chrY genotypes to missing.
                            (Unlike PLINK 1.x, this does not change unknown-sex
                            chrY genotypes.)
  --set-mixed-mt-missing  : Make --make-{b}pgen/--make-bed set mixed MT
                            genotypes to missing.
  --split-par [bp1] [bp2] : Changes chromosome code of all X chromosome
  --split-par [build]       variants with bp position <= bp1 to PAR1, and those
                            with position >= bp2 to PAR2.  The following build
                            codes are supported as shorthand:
                            * 'b36'/'hg18' = NCBI 36, 2709521/154584237
                            * 'b37'/'hg19' = GRCh37, 2699520/154931044
                            * 'b38'/'hg38' = GRCh38, 2781479/155701383
  --merge-par             : Merge PAR1/PAR2 back with X.  Requires PAR1 to be
                            positioned immediately before X, and PAR2 to be
                            immediately after X.  (Should *not* be used with
                            "--export vcf", since it causes male
                            homozygous/missing calls in PAR1/PAR2 to be
                            reported as haploid.)
  --set-missing-var-ids [t]  : Given a template string with a '@' where the
  --set-all-var-ids [t]        chromosome code should go and '#' where the bp
                               coordinate belongs, --set-missing-var-ids
                               assigns chromosome-and-bp-based IDs to unnamed
                               variants, while --set-all-var-ids resets all
                               IDs.
                               You may also use '$r'/'$a' to refer to the
                               ref and alt1 alleles, or '$1'/'$2' to refer to
                               them in alphabetical order.
  --new-id-max-allele-len [len] <error | missing | truncate> :
    Specify maximum number of leading characters from allele codes to include
    in new variant IDs, and behavior on longer codes (defaults 23, error).
  --missing-var-code [str]   : Change unnamed variant code for
                               --set-[missing/all]-var-ids (default '.').
  --update-sex [f] {n} : Update sexes.  Sex (1/M/m = male, 2/F/f = female, 0 =
                         missing) is loaded from column n+2 (default n is 1).
  --real-ref-alleles : Treat A2 alleles in a PLINK 1.x fileset as actual ref
                       alleles; otherwise they're marked as provisional.
  --maj-ref <force>  : Set major alleles to reference, like PLINK 1.x
                       automatically did.  (Note that this is now opt-in rather
                       than opt-out; --keep-allele-order is no longer necessary
                       to prevent allele-swapping.)
                       * This can only be used in runs with
                         --make-bed/--make-{b}pgen/--export and no other
                         commands.
                       * By default, this only affects variants marked as
                         having 'provisional' reference alleles.  Add 'force'
                         to apply this to all variants.
                       * All new reference alleles are marked as provisional.
  --ref-allele <force> [filename] {refcol} {IDcol} {skip}
  --alt1-allele <force> [filename] {alt1col} {IDcol} {skip} :
    These set the alleles specified in the file to ref (--ref-allele) or alt1
    (--alt1-allele).  They can be combined in the same run.
    * These can only be used in runs with --make-bed/--make-{b}pgen/--export
      and no other commands.
    * "--ref-allele [VCF filename] 4 3 '#'", which scrapes reference allele
      assignments from a VCF file, is especially useful.
    * By default, these error out when asked to change a 'known' reference
      allele.  Add 'force' to permit this (when e.g. switching to a new
      reference genome).
    * When --alt1-allele changes the previous ref allele to alt1, the previous
      alt1 allele is set to reference and marked as provisional.
  --ref-from-fa [fn] <force> : This sets reference alleles from the given FASTA
                               file when it can be done unambiguously (note
                               that it's never possible for deletions or some
                               insertions).  By default, it errors out when
                               asked to change a 'known' reference allele; add
                               the 'force' modifier to permit this.
  --indiv-sort [m] <sid> {f} : Specify FID/IID(/SID) sort order for merge and
                               --make-{b}pgen/--make-bed.  The following four
                               modes are supported:
                               * 'none'/'0' keeps samples in the order they
                                 were loaded.  Default for non-merge.
                               * 'natural'/'n' invokes "natural sort", e.g.
                                 'id2' < 'ID3' < 'id10'.  Default when merging.
                               * 'ascii'/'a' sorts in ASCII order, e.g.
                                 'ID3' < 'id10' < 'id2'.
                               * 'file'/'f' uses the order in the given file
                                 (named in the last parameter).  The 'sid'
                                 modifier has the usual effect when this mode
                                 is requested.
  --king-table-filter [min]  : Specify minimum kinship coefficient for
                               inclusion in --make-king-table report.
  --condition [var ID] <dominant | recessive> : Add one variant's alt1 dosages
                                                as a --glm covariate.
  --condition-list [f] <dominant | recessive> : Add all variants in the file as
                                                --glm covariates.
  --parameters [...] : Include only the given covariates/interactions in the
                       --glm model, identified by a list of 1-based indices
                       and/or ranges of them.
  --vif [max VIF]    : Set VIF threshold for --glm multicollinearity check
                       (default 50).  (This is no longer skipped for
                       case/control phenotypes.)
  --max-corr [val]   : Skip --glm regression when the absolute value of the
                       correlation between two predictors exceeds this value
                       (default 0.999).
  --xchr-model [m]   : Set the chrX --glm/--score model.
                       * '0' = skip chrX.
                       * '1' = add sex as a covar on chrX, code males 0..1.
                       * '2' (default) = chrX sex covar, code males 0..2.
                       (Use the --glm 'interaction' modifier to test for
                       interaction between genotype and sex.)
  --ci [size]        : Report confidence ratios for odds ratios/betas.
  --pfilter [val]    : Filter out assoc. test results with higher p-values.
  --score-col-nums [...] : Process all the specified coefficient columns in the
                           --score file, identified by 1-based indexes and/or
                           ranges of them.
  --parallel [k] [n] : Divide the output matrix into n pieces, and only compute
                       the kth piece.  The primary output file will have the
                       piece number included in its name, e.g. plink2.king.13
                       or plink2.king.13.zst if k is 13.  Concatenating these
                       files in order will yield the full matrix of interest.
                       (Yes, this can be done before decompression.)
                       N.B. This generally cannot be used to directly write a
                       symmetric square matrix.  Choose square0 or triangle
                       shape instead, and postprocess as necessary.
  --memory [val] <require> : Set size, in MB, of initial workspace malloc
                             attempt.  To error out instead of reducing the
                             request size when the initial attempt fails, add
                             the 'require' modifier.
  --threads [val]    : Set maximum number of compute threads.
  --seed [val...]    : Set random number seed(s).  Each value must be an
                       integer between 0 and 4294967295 inclusive.
                       Note that --threads and "--memory require" may also be
                       needed to reproduce some randomized runs.
  --output-min-p [p] : Specify minimum p-value to write to reports.
  --debug            : Use slower, more crash-resistant logging method.
  --randmem          : Randomize initial workspace memory (helps catch
                       uninitialized-memory bugs).
  --warning-errcode  : Return a nonzero error code to the OS when a run
                       completes with warning(s).

Primary methods paper:
Chang CC, Chow CC, Tellier LCAM, Vattikuti S, Purcell SM, Lee JJ (2015)
Second-generation PLINK: rising to the challenge of larger and richer datasets.
GigaScience, 4.

    ]]></help>
    <citations>
        <citation type="doi">10.1186/s13742-015-0047-8</citation>
        <citation type="bibtex">@ARTICLE{Blankenberg19-anvio,
   author = {Daniel Blankenberg, et al},
   title = {In preparation..},
   }</citation>
    </citations>
</tool>
